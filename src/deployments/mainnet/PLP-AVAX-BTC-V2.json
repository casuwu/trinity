{
  "address": "0xDEfC4b949EA970533FE6F5A75248d4Da534F8873",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvestBeforeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "UpdateRequireReinvestBeforeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUIRE_REINVEST_BEFORE_DEPOSIT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IBambooChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensToApprove",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "approvalAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "spenders",
          "type": "address[]"
        }
      ],
      "name": "tokenAllow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvestBeforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRequireReinvestBeforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43d19f9cdc750df30102451b4c5db3e696c5a1d31dd5efcabaad3d64ce5c9412",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xDEfC4b949EA970533FE6F5A75248d4Da534F8873",
    "transactionIndex": 0,
    "gasUsed": "5101866",
    "logsBloom": "0x
    "blockHash": "0x0cef4633a976add65af590334ccfd9254604a6da99f529324108d6f6e39e38b5",
    "transactionHash": "0x43d19f9cdc750df30102451b4c5db3e696c5a1d31dd5efcabaad3d64ce5c9412",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 883588,
        "transactionHash": "0x43d19f9cdc750df30102451b4c5db3e696c5a1d31dd5efcabaad3d64ce5c9412",
        "address": "0xDEfC4b949EA970533FE6F5A75248d4Da534F8873",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0cef4633a976add65af590334ccfd9254604a6da99f529324108d6f6e39e38b5"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 883588,
        "transactionHash": "0x43d19f9cdc750df30102451b4c5db3e696c5a1d31dd5efcabaad3d64ce5c9412",
        "address": "0xDEfC4b949EA970533FE6F5A75248d4Da534F8873",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x0cef4633a976add65af590334ccfd9254604a6da99f529324108d6f6e39e38b5"
      }
    ],
    "blockNumber": 883588,
    "cumulativeGasUsed": "5101866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe98D0f9ede480b7F027B9406c9F24eaa194aD717",
    "0x9a928D7dcD8D7E5Cb6860B7768eC2D87B8934267",
    "0x124737ce6a43A98CAAF095AcCb9A9D6fccBb0E73",
    "0x67c58C8f01f50589A52C2C0b233Db9aF6A66a0F0",
    "30"
  ],
  "solcInputHash": "ddd5c9e2373807c58cb1b8f27dacf84b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvestBeforeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"UpdateRequireReinvestBeforeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRE_REINVEST_BEFORE_DEPOSIT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IBambooChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToApprove\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"approvalAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"spenders\",\"type\":\"address[]\"}],\"name\":\"tokenAllow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvestBeforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRequireReinvestBeforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"details\":\"Staking rewards accurue to contract on each deposit/withdrawal\",\"returns\":{\"_0\":\"Unclaimed rewards, plus contract balance\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"emergencyWithdraw()\":{\"details\":\"Reward tokens are not automatically collectedNew deposits will be effectively disabled\"},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"reinvest()\":{\"details\":\"This external function requires minimum tokens to be met\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenAllow(address[],uint256[],address[])\":{\"params\":{\"approvalAmounts\":\"approval amounts\",\"spenders\":\"address allowed to spend tokens\",\"tokensToApprove\":\"tokens to approve\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateMinTokensToReinvestBeforeDeposit(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateReinvestReward(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of receipt tokens to redeem\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward token balance that can be reinvested\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"emergencyWithdraw()\":{\"notice\":\"Allows exit from Staking Contract without additional logic\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest rewards from staking contract to deposit tokens\"},\"tokenAllow(address[],uint256[],address[])\":{\"notice\":\"Set approvals for tokens\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest minimum threshold for external callers\"},\"updateMinTokensToReinvestBeforeDeposit(uint256)\":{\"notice\":\"Update reinvest minimum threshold before a deposit\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"updateRequireReinvestBeforeDeposit()\":{\"notice\":\"Toggle requirement to reinvest before deposit\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw LP tokens by redeeming receipt tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BambooStrategyForLP.sol\":\"BambooStrategyForLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BambooStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IBambooChef.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract BambooStrategyForLP is YakERC20, Ownable {\\n  using SafeMath for uint;\\n\\n  uint public totalDeposits;\\n\\n  IRouter public router;\\n  IPair public depositToken;\\n  IERC20 private token0;\\n  IERC20 private token1;\\n  IERC20 public rewardToken;\\n  IBambooChef public stakingContract;\\n\\n  uint public PID;\\n  uint public MIN_TOKENS_TO_REINVEST = 20000;\\n  uint public REINVEST_REWARD_BIPS = 500;\\n  uint public ADMIN_FEE_BIPS = 500;\\n  uint constant private BIPS_DIVISOR = 10000;\\n  bool public REQUIRE_REINVEST_BEFORE_DEPOSIT;\\n  uint public MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT = 20;\\n\\n  event Deposit(address indexed account, uint amount);\\n  event Withdraw(address indexed account, uint amount);\\n  event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n  event Recovered(address token, uint amount);\\n  event UpdateAdminFee(uint oldValue, uint newValue);\\n  event UpdateReinvestReward(uint oldValue, uint newValue);\\n  event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n  event UpdateRequireReinvestBeforeDeposit(bool newValue);\\n  event UpdateMinTokensToReinvestBeforeDeposit(uint oldValue, uint newValue);\\n\\n  constructor(\\n    address _depositToken, \\n    address _rewardToken, \\n    address _stakingContract,\\n    address _router,\\n    uint _pid\\n  ) {\\n    depositToken = IPair(_depositToken);\\n    rewardToken = IERC20(_rewardToken);\\n    stakingContract = IBambooChef(_stakingContract);\\n    router = IRouter(_router);\\n\\n    PID = _pid;\\n\\n    address _token0 = IPair(_depositToken).token0();\\n    address _token1 = IPair(_depositToken).token1();\\n    token0 = IERC20(_token0);\\n    token1 = IERC20(_token1);\\n\\n    name = string(\\n      abi.encodePacked(\\n        \\\"Yield Yak: \\\",\\n        depositToken.symbol(), \\\" \\\",\\n        IERC20(_token0).symbol(), \\\"-\\\",\\n        IERC20(_token1).symbol()\\n      )\\n    );\\n\\n    emit Reinvest(0, 0);\\n  }\\n\\n  /**\\n    * @dev Throws if called by smart contract\\n    */\\n  modifier onlyEOA() {\\n      require(tx.origin == msg.sender, \\\"onlyEOA\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @notice Set approvals for tokens\\n   * @param tokensToApprove tokens to approve\\n   * @param approvalAmounts approval amounts\\n   * @param spenders address allowed to spend tokens\\n   */\\n  function tokenAllow(\\n      address[] memory tokensToApprove, \\n      uint256[] memory approvalAmounts, \\n      address[] memory spenders\\n  ) external onlyOwner {\\n    require(\\n      tokensToApprove.length == approvalAmounts.length\\n      && tokensToApprove.length == spenders.length\\n    , \\\"not same length\\\");\\n    for(uint i = 0; i < tokensToApprove.length; i++) {\\n      IERC20 token = IERC20(tokensToApprove[i]);\\n      uint allowance = token.allowance(address(this), spenders[i]);\\n      if (\\n        allowance != approvalAmounts[i] &&\\n        (allowance != uint256(-1) || approvalAmounts[i] == 0)\\n      ) {\\n        require(token.approve(spenders[i], approvalAmounts[i]), \\\"approve failed\\\");\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Deposit tokens to receive receipt tokens\\n   * @param amount Amount of tokens to deposit\\n   */\\n  function deposit(uint amount) external {\\n    _deposit(amount);\\n  }\\n\\n  /**\\n   * @notice Deposit using Permit\\n   * @param amount Amount of tokens to deposit\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    _deposit(amount);\\n  }\\n\\n  function _deposit(uint amount) internal {\\n    require(totalDeposits >= totalSupply, \\\"deposit failed\\\");\\n    if (REQUIRE_REINVEST_BEFORE_DEPOSIT) {\\n      uint unclaimedRewards = checkReward();\\n      if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT) {\\n        _reinvest(unclaimedRewards);\\n      }\\n    }\\n    require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"transferFrom failed\\\");\\n    _stakeDepositTokens(amount);\\n    _mint(msg.sender, getSharesForDepositTokens(amount));\\n    totalDeposits = totalDeposits.add(amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw LP tokens by redeeming receipt tokens\\n   * @param amount Amount of receipt tokens to redeem\\n   */\\n  function withdraw(uint amount) external {\\n    uint depositTokenAmount = getDepositTokensForShares(amount);\\n    if (depositTokenAmount > 0) {\\n      _withdrawDepositTokens(depositTokenAmount);\\n      require(depositToken.transfer(msg.sender, depositTokenAmount), \\\"transfer failed\\\");\\n      _burn(msg.sender, amount);\\n      totalDeposits = totalDeposits.sub(depositTokenAmount);\\n      emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate receipt tokens for a given amount of deposit tokens\\n   * @dev If contract is empty, use 1:1 ratio\\n   * @dev Could return zero shares for very low amounts of deposit tokens\\n   * @param amount deposit tokens\\n   * @return receipt tokens\\n   */\\n  function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return amount;\\n    }\\n    return amount.mul(totalSupply).div(totalDeposits);\\n  }\\n\\n  /**\\n   * @notice Calculate deposit tokens for a given amount of receipt tokens\\n   * @param amount receipt tokens\\n   * @return deposit tokens\\n   */\\n  function getDepositTokensForShares(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return 0;\\n    }\\n    return amount.mul(totalDeposits).div(totalSupply);\\n  }\\n\\n  /**\\n   * @notice Reward token balance that can be reinvested\\n   * @dev Staking rewards accurue to contract on each deposit/withdrawal\\n   * @return Unclaimed rewards, plus contract balance\\n   */\\n  function checkReward() public view returns (uint) {\\n    uint pendingReward = stakingContract.pendingBamboo(PID, address(this));\\n    uint contractBalance = rewardToken.balanceOf(address(this));\\n    return pendingReward.add(contractBalance);\\n  }\\n\\n  /**\\n   * @notice Estimate reinvest reward for caller\\n   * @return Estimated rewards tokens earned for calling `reinvest()`\\n   */\\n  function estimateReinvestReward() external view returns (uint) {\\n    uint unclaimedRewards = checkReward();\\n    if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n      return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to deposit tokens\\n   * @dev This external function requires minimum tokens to be met\\n   */\\n  function reinvest() external onlyEOA {\\n    uint unclaimedRewards = checkReward();\\n    require(unclaimedRewards >= MIN_TOKENS_TO_REINVEST, \\\"MIN_TOKENS_TO_REINVEST\\\");\\n    _reinvest(unclaimedRewards);\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to deposit tokens\\n   * @dev This internal function does not require mininmum tokens to be met\\n   */\\n  function _reinvest(uint amount) internal {\\n    stakingContract.deposit(PID, 0);\\n\\n    uint adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (adminFee > 0) {\\n      require(rewardToken.transfer(owner(), adminFee), \\\"admin fee transfer failed\\\");\\n    }\\n\\n    uint reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    if (reinvestFee > 0) {\\n      require(rewardToken.transfer(msg.sender, reinvestFee), \\\"reinvest fee transfer failed\\\");\\n    }\\n\\n    uint lpTokenAmount = _convertRewardTokensToDepositTokens(amount.sub(adminFee).sub(reinvestFee));\\n    _stakeDepositTokens(lpTokenAmount);\\n    totalDeposits = totalDeposits.add(lpTokenAmount);\\n\\n    emit Reinvest(totalDeposits, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Converts entire reward token balance to deposit tokens\\n   * @dev Always converts through router; there are no price checks enabled\\n   * @return deposit tokens received\\n   */\\n  function _convertRewardTokensToDepositTokens(uint amount) internal returns (uint) {\\n    uint amountIn = amount.div(2);\\n    require(amountIn > 0, \\\"amount too low\\\");\\n\\n    // swap to token0\\n    address[] memory path0 = new address[](2);\\n    path0[0] = address(rewardToken);\\n    path0[1] = address(token0);\\n\\n    uint amountOutToken0 = amountIn;\\n    if (path0[0] != path0[1]) {\\n      uint[] memory amountsOutToken0 = router.getAmountsOut(amountIn, path0);\\n      amountOutToken0 = amountsOutToken0[amountsOutToken0.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken0, path0, address(this), block.timestamp);\\n    }\\n\\n    // swap to token1\\n    address[] memory path1 = new address[](2);\\n    path1[0] = path0[0];\\n    path1[1] = address(token1);\\n\\n    uint amountOutToken1 = amountIn;\\n    if (path1[0] != path1[1]) {\\n      uint[] memory amountsOutToken1 = router.getAmountsOut(amountIn, path1);\\n      amountOutToken1 = amountsOutToken1[amountsOutToken1.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken1, path1, address(this), block.timestamp);\\n    }\\n\\n    (,,uint liquidity) = router.addLiquidity(\\n      path0[1], path1[1],\\n      amountOutToken0, amountOutToken1,\\n      0, 0,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return liquidity;\\n  }\\n\\n  /**\\n   * @notice Stakes deposit tokens in Staking Contract\\n   * @param amount deposit tokens to stake\\n   */\\n  function _stakeDepositTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.deposit(PID, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraws deposit tokens from Staking Contract\\n   * @dev Reward tokens are automatically collected\\n   * @dev Reward tokens are not automatically reinvested\\n   * @param amount deposit tokens to remove\\n   */\\n  function _withdrawDepositTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.withdraw(PID, amount);\\n  }\\n\\n  /**\\n   * @notice Allows exit from Staking Contract without additional logic\\n   * @dev Reward tokens are not automatically collected\\n   * @dev New deposits will be effectively disabled\\n   */\\n  function emergencyWithdraw() external onlyOwner {\\n    stakingContract.emergencyWithdraw(PID);\\n    totalDeposits = 0;\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold for external callers\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvest(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n    MIN_TOKENS_TO_REINVEST = newValue;\\n  }\\n\\n  /**\\n   * @notice Update admin fee\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateAdminFee(uint newValue) external onlyOwner {\\n    require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR, \\\"admin fee too high\\\");\\n    emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n    ADMIN_FEE_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Update reinvest reward\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateReinvestReward(uint newValue) external onlyOwner {\\n    require(newValue.add(ADMIN_FEE_BIPS) <= BIPS_DIVISOR, \\\"reinvest reward too high\\\");\\n    emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n    REINVEST_REWARD_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Toggle requirement to reinvest before deposit\\n   */\\n  function updateRequireReinvestBeforeDeposit() external onlyOwner {\\n    REQUIRE_REINVEST_BEFORE_DEPOSIT = !REQUIRE_REINVEST_BEFORE_DEPOSIT;\\n    emit UpdateRequireReinvestBeforeDeposit(REQUIRE_REINVEST_BEFORE_DEPOSIT);\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold before a deposit\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvestBeforeDeposit(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvestBeforeDeposit(MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT, newValue);\\n    MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT = newValue;\\n  }\\n\\n  /**\\n   * @notice Recover ERC20 from contract\\n   * @param tokenAddress token address\\n   * @param tokenAmount amount to recover\\n   */\\n  function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n    require(tokenAmount > 0, 'amount too low');\\n    IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Recover AVAX from contract\\n   * @param amount amount\\n   */\\n  function recoverAVAX(uint amount) external onlyOwner {\\n    require(amount > 0, 'amount too low');\\n    msg.sender.transfer(amount);\\n    emit Recovered(address(0), amount);\\n  }\\n}\",\"keccak256\":\"0x5e8d41e06b589cb419bfb76a5928d63cd48469b3abccaf8dd15fc9bfa539dc78\",\"license\":\"MIT\"},\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9668eb9a3b98c068430dc416d38c28fde029ec001f3478f910a6ba7d0912810a\",\"license\":\"MIT\"},\"contracts/interfaces/IBambooChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IBambooChef {\\n    function bamboo() external view returns (address);\\n    function bambooPerBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n    function add(uint256 _allocPoint, address _lpToken, bool _withUpdate) external;\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n    function setMigrator(address _migrator) external;\\n    function migrate(uint256 _pid) external;\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n    function pendingBamboo(uint256 _pid, address _user) external view returns (uint256);\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function emergencyWithdraw(uint256 _pid) external;\\n    function dev(address _devaddr) external;\\n    function poolInfo(uint pid) external view returns (\\n        address lpToken,\\n        uint allocPoint,\\n        uint lastRewardBlock,\\n        uint accSushiPerShare\\n    );\\n    function userInfo(uint pid, address user) external view returns (\\n        uint256 amount,\\n        uint256 rewardDebt\\n    );\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n}\",\"keccak256\":\"0x2895a35497a5297a67408b01f72560fd1e46ec73811d2ae3f82e780dd1a1e83e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600981526020017f5969656c642059616b0000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000677565b506040518060400160405280600381526020017f5952540000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000677565b50614e20600f556101f46010556101f46011556014601355348015620000c457600080fd5b5060405162006096380380620060968339818101604052810190620000ea9190620007d3565b6000620000fc6200066f60201b60201c565b905080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35084600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600e8190555060008573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620002ef57600080fd5b505afa15801562000304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032a9190620007a7565b905060008673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200037557600080fd5b505afa1580156200038a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003b09190620007a7565b905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200049d57600080fd5b505afa158015620004b2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620004dd919062000855565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200052457600080fd5b505afa15801562000539573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000564919062000855565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620005ab57600080fd5b505afa158015620005c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620005eb919062000855565b604051602001620005ff93929190620009a8565b604051602081830303815290604052600090805190602001906200062592919062000677565b507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346000806040516200065a92919062000a06565b60405180910390a15050505050505062000b6e565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620006ba57805160ff1916838001178555620006eb565b82800160010185558215620006eb579182015b82811115620006ea578251825591602001919060010190620006cd565b5b509050620006fa9190620006fe565b5090565b5b8082111562000719576000816000905550600101620006ff565b5090565b6000815190506200072e8162000b3a565b92915050565b600082601f8301126200074657600080fd5b81516200075d620007578262000a67565b62000a33565b915080825260208301602083018583830111156200077a57600080fd5b6200078783828462000b02565b50505092915050565b600081519050620007a18162000b54565b92915050565b600060208284031215620007ba57600080fd5b6000620007ca848285016200071d565b91505092915050565b600080600080600060a08688031215620007ec57600080fd5b6000620007fc888289016200071d565b95505060206200080f888289016200071d565b945050604062000822888289016200071d565b935050606062000835888289016200071d565b9250506080620008488882890162000790565b9150509295509295909350565b6000602082840312156200086857600080fd5b600082015167ffffffffffffffff8111156200088357600080fd5b620008918482850162000734565b91505092915050565b620008a58162000aee565b82525050565b6000620008b88262000a9a565b620008c4818562000aa5565b9350620008d681856020860162000b02565b80840191505092915050565b6000620008f1600b8362000aa5565b91507f5969656c642059616b3a200000000000000000000000000000000000000000006000830152600b82019050919050565b60006200093360018362000aa5565b91507f20000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b60006200097560018362000aa5565b91507f2d000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000620009b582620008e2565b9150620009c38286620008ab565b9150620009d08262000924565b9150620009de8285620008ab565b9150620009eb8262000966565b9150620009f98284620008ab565b9150819050949350505050565b600060408201905062000a1d60008301856200089a565b62000a2c60208301846200089a565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171562000a5d5762000a5c62000b38565b5b8060405250919050565b600067ffffffffffffffff82111562000a855762000a8462000b38565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600081905092915050565b600062000abd8262000ac4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000afb8262000ae4565b9050919050565b60005b8381101562000b2257808201518184015260208101905062000b05565b8381111562000b32576000848401525b50505050565bfe5b62000b458162000ab0565b811462000b5157600080fd5b50565b62000b5f8162000ae4565b811462000b6b57600080fd5b50565b6155188062000b7e6000396000f3fe608060405234801561001057600080fd5b506004361061028a5760003560e01c80638da5cb5b1161015c578063d505accf116100ce578063ed24911d11610087578063ed24911d1461077d578063ee99205c1461079b578063f2fde38b146107b9578063f7c618c1146107d5578063f887ea40146107f3578063fdb5a03e146108115761028a565b8063d505accf146106ab578063db2e21bc146106c7578063dd62ed3e146106d1578063dd8ce4d614610701578063e41e091314610731578063eab89a5a1461074d5761028a565b8063b6b55f2511610120578063b6b55f25146105fb578063b9e57b8014610617578063bd079f5514610635578063c4b24a4614610653578063c89039c514610671578063cff1b6ef1461068f5761028a565b80638da5cb5b1461055557806395d89b41146105735780639e4e731814610591578063a8ae2b7c146105af578063a9059cbb146105cb5761028a565b806330adf81f11610200578063715018a6116101b9578063715018a6146104a75780637d882097146104b15780637ecebe00146104cf57806381837230146104ff5780638980f11f1461051b5780638aff733d146105375761028a565b806330adf81f146103e5578063313ce567146104035780634a970be7146104215780634ebb79161461043d5780635eaec0e41461045957806370a08231146104775761028a565b80631331731411610252578063133173141461033557806318160ddd1461035357806320606b7014610371578063236aecd51461038f57806323b872dd146103995780632e1a7d4d146103c95761028a565b806303f7d9071461028f57806306fdde03146102ab57806307677111146102c9578063095ea7b3146102e75780631145180414610317575b600080fd5b6102a960048036038101906102a4919061405c565b61081b565b005b6102b36108dc565b6040516102c09190614d37565b60405180910390f35b6102d161097a565b6040516102de9190614ff9565b60405180910390f35b61030160048036038101906102fc9190613f1f565b610980565b60405161030e9190614b9c565b60405180910390f35b61031f610997565b60405161032c9190614ff9565b60405180910390f35b61033d61099d565b60405161034a9190614b9c565b60405180910390f35b61035b6109b0565b6040516103689190614ff9565b60405180910390f35b6103796109b6565b6040516103869190614bb7565b60405180910390f35b6103976109dd565b005b6103b360048036038101906103ae9190613e32565b610acb565b6040516103c09190614b9c565b60405180910390f35b6103e360048036038101906103de919061405c565b610ce4565b005b6103ed610e69565b6040516103fa9190614bb7565b60405180910390f35b61040b610e90565b6040516104189190615119565b60405180910390f35b61043b600480360381019061043691906140fd565b610e95565b005b6104576004803603810190610452919061405c565b610f3e565b005b610461611081565b60405161046e9190614ff9565b60405180910390f35b610491600480360381019061048c9190613dcd565b611087565b60405161049e9190614ff9565b60405180910390f35b6104af6110d0565b005b6104b961120d565b6040516104c69190614ff9565b60405180910390f35b6104e960048036038101906104e49190613dcd565b611213565b6040516104f69190614ff9565b60405180910390f35b6105196004803603810190610514919061405c565b61122b565b005b61053560048036038101906105309190613f1f565b6112ec565b005b61053f611476565b60405161054c9190614ff9565b60405180910390f35b61055d61147c565b60405161056a91906149e2565b60405180910390f35b61057b6114a6565b6040516105889190614d37565b60405180910390f35b610599611544565b6040516105a69190614bb7565b60405180910390f35b6105c960048036038101906105c4919061405c565b61156b565b005b6105e560048036038101906105e09190613f1f565b611685565b6040516105f29190614b9c565b60405180910390f35b6106156004803603810190610610919061405c565b61169c565b005b61061f6116a8565b60405161062c9190614ff9565b60405180910390f35b61063d6116f8565b60405161064a9190614ff9565b60405180910390f35b61065b6116fe565b6040516106689190614ff9565b60405180910390f35b61067961187b565b6040516106869190614d01565b60405180910390f35b6106a960048036038101906106a4919061405c565b6118a1565b005b6106c560048036038101906106c09190613e81565b6119bb565b005b6106cf611ac5565b005b6106eb60048036038101906106e69190613df6565b611bda565b6040516106f89190614ff9565b60405180910390f35b61071b6004803603810190610716919061405c565b611c61565b6040516107289190614ff9565b60405180910390f35b61074b60048036038101906107469190613f5b565b611cba565b005b6107676004803603810190610762919061405c565b611fbb565b6040516107749190614ff9565b60405180910390f35b610785612015565b6040516107929190614bb7565b60405180910390f35b6107a36120ae565b6040516107b09190614ccb565b60405180910390f35b6107d360048036038101906107ce9190613dcd565b6120d4565b005b6107dd612280565b6040516107ea9190614ce6565b60405180910390f35b6107fb6122a6565b6040516108089190614d1c565b60405180910390f35b6108196122cc565b005b610823612397565b73ffffffffffffffffffffffffffffffffffffffff1661084161147c565b73ffffffffffffffffffffffffffffffffffffffff1614610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90614eb9565b60405180910390fd5b7fd0f7c999974ac5e720302e1a81f85f0e86835bd50d1cdd4086c839df9c123aab601354826040516108ca929190615096565b60405180910390a18060138190555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b505050505081565b60115481565b600061098d33848461239f565b6001905092915050565b60135481565b601260009054906101000a900460ff1681565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6109e5612397565b73ffffffffffffffffffffffffffffffffffffffff16610a0361147c565b73ffffffffffffffffffffffffffffffffffffffff1614610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090614eb9565b60405180910390fd5b601260009054906101000a900460ff1615601260006101000a81548160ff0219169083151502179055507fd46852adf64681b12b81a308b01efd0a546667f68ab41ae5855c2bae7756380f601260009054906101000a900460ff16604051610ac19190614b9c565b60405180910390a1565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610bae57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ccc576000610be2856040518060600160405280602f815260200161545f602f91398461256a9092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cc29190614ff9565b60405180910390a3505b610cd78686866125c5565b6001925050509392505050565b6000610cef82611fbb565b90506000811115610e6557610d03816127e3565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d60929190614aa3565b602060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db29190614033565b610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890614f99565b60405180910390fd5b610dfb33836128ba565b610e1081600754612a0890919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610e5c9190614ff9565b60405180910390a25b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610efc9796959493929190614a34565b600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b50505050610f3785612a52565b5050505050565b610f46612397565b73ffffffffffffffffffffffffffffffffffffffff16610f6461147c565b73ffffffffffffffffffffffffffffffffffffffff1614610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb190614eb9565b60405180910390fd5b60008111610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490614dd9565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611043573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051611076929190614aa3565b60405180910390a150565b600e5481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110d8612397565b73ffffffffffffffffffffffffffffffffffffffff166110f661147c565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114390614eb9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60075481565b60056020528060005260406000206000915090505481565b611233612397565b73ffffffffffffffffffffffffffffffffffffffff1661125161147c565b73ffffffffffffffffffffffffffffffffffffffff16146112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90614eb9565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600f54826040516112da929190615096565b60405180910390a180600f8190555050565b6112f4612397565b73ffffffffffffffffffffffffffffffffffffffff1661131261147c565b73ffffffffffffffffffffffffffffffffffffffff1614611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90614eb9565b60405180910390fd5b600081116113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290614dd9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016113e6929190614aa3565b602060405180830381600087803b15801561140057600080fd5b505af1158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190614033565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161146a929190614b73565b60405180910390a15050565b60105481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561153c5780601f106115115761010080835404028352916020019161153c565b820191906000526020600020905b81548152906001019060200180831161151f57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b611573612397565b73ffffffffffffffffffffffffffffffffffffffff1661159161147c565b73ffffffffffffffffffffffffffffffffffffffff16146115e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115de90614eb9565b60405180910390fd5b6127106115ff60115483612c4690919063ffffffff16565b1115611640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163790614fd9565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f260105482604051611673929190615096565b60405180910390a18060108190555050565b60006116923384846125c5565b6001905092915050565b6116a581612a52565b50565b6000806116b36116fe565b9050600f5481106116ef576116e76127106116d960105484612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b9150506116f5565b60009150505b90565b600f5481565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de86b677600e54306040518363ffffffff1660e01b8152600401611760929190615014565b60206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190614085565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161180f91906149e2565b60206040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190614085565b90506118748183612c4690919063ffffffff16565b9250505090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118a9612397565b73ffffffffffffffffffffffffffffffffffffffff166118c761147c565b73ffffffffffffffffffffffffffffffffffffffff161461191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490614eb9565b60405180910390fd5b61271061193560105483612c4690919063ffffffff16565b1115611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d90614f39565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601154826040516119a9929190615096565b60405180910390a18060118190555050565b428410156119fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f590614e19565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505589604051602001611a8b96959493929190614bd2565b604051602081830303815290604052805190602001209050611ab08882868686612d55565b611abb88888861239f565b5050505050505050565b611acd612397565b73ffffffffffffffffffffffffffffffffffffffff16611aeb61147c565b73ffffffffffffffffffffffffffffffffffffffff1614611b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3890614eb9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e600e546040518263ffffffff1660e01b8152600401611b9e9190614ff9565b600060405180830381600087803b158015611bb857600080fd5b505af1158015611bcc573d6000803e3d6000fd5b505050506000600781905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080611c7b600754600254612c9b90919063ffffffff16565b1415611c8957819050611cb5565b611cb2600754611ca460025485612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b90505b919050565b611cc2612397565b73ffffffffffffffffffffffffffffffffffffffff16611ce061147c565b73ffffffffffffffffffffffffffffffffffffffff1614611d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2d90614eb9565b60405180910390fd5b81518351148015611d48575080518351145b611d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7e90614d99565b60405180910390fd5b60005b8351811015611fb5576000848281518110611da157fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30868681518110611dd657fe5b60200260200101516040518363ffffffff1660e01b8152600401611dfb929190614acc565b60206040518083038186803b158015611e1357600080fd5b505afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190614085565b9050848381518110611e5957fe5b60200260200101518114158015611eae57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81141580611ead57506000858481518110611ea357fe5b6020026020010151145b5b15611fa6578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858581518110611edb57fe5b6020026020010151878681518110611eef57fe5b60200260200101516040518363ffffffff1660e01b8152600401611f14929190614b73565b602060405180830381600087803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190614033565b611fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9c90614e39565b60405180910390fd5b5b50508080600101915050611d8a565b50505050565b600080611fd5600754600254612c9b90919063ffffffff16565b1415611fe45760009050612010565b61200d600254611fff60075485612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161204a9190614994565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b61207e612e8c565b30604051602001612093959493929190614c33565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6120dc612397565b73ffffffffffffffffffffffffffffffffffffffff166120fa61147c565b73ffffffffffffffffffffffffffffffffffffffff1614612150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214790614eb9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b790614d59565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461233a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233190614f59565b60405180910390fd5b60006123446116fe565b9050600f5481101561238b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238290614e59565b60405180910390fd5b61239481612e99565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561240f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240690614ed9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561247f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247690614fb9565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161255d9190614ff9565b60405180910390a3505050565b60008383111582906125b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a99190614d37565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262c90614ef9565b60405180910390fd5b6126a1816040518060600160405280602e81526020016154b5602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256a9092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061273681600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c4690919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516127d69190614ff9565b60405180910390a3505050565b60008111612826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281d90614dd9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600e54836040518363ffffffff1660e01b8152600401612885929190615096565b600060405180830381600087803b15801561289f57600080fd5b505af11580156128b3573d6000803e3d6000fd5b5050505050565b6129268160405180606001604052806027815260200161548e60279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256a9092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612998816040518060600160405280602781526020016154386027913960025461256a9092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516129fc9190614ff9565b60405180910390a35050565b6000612a4a83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061256a565b905092915050565b6002546007541015612a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9090614f79565b60405180910390fd5b601260009054906101000a900460ff1615612acf576000612ab86116fe565b90506013548110612acd57612acc81612e99565b5b505b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612b2e939291906149fd565b602060405180830381600087803b158015612b4857600080fd5b505af1158015612b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b809190614033565b612bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb690614f19565b60405180910390fd5b612bc881613214565b612bda33612bd583611c61565b6132eb565b612bef81600754612c4690919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612c3b9190614ff9565b60405180910390a250565b600080828401905083811015612c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8890614d79565b60405180910390fd5b8091505092915050565b600080831415612cae5760009050612d05565b6000828402905082848281612cbf57fe5b0414612d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf790614e99565b60405180910390fd5b809150505b92915050565b6000612d4d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613405565b905092915050565b6000612d5f612015565b85604051602001612d719291906149ab565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612dae9493929190614c86565b6020604051602081039080840390855afa158015612dd0573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612e4457508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7a90614db9565b60405180910390fd5b50505050505050565b6000804690508091505090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e5460006040518363ffffffff1660e01b8152600401612ef992919061506d565b600060405180830381600087803b158015612f1357600080fd5b505af1158015612f27573d6000803e3d6000fd5b505050506000612f56612710612f4860115485612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b9050600081111561305757600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612fa761147c565b836040518363ffffffff1660e01b8152600401612fc5929190614b73565b602060405180830381600087803b158015612fdf57600080fd5b505af1158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130179190614033565b613056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304d90614e79565b60405180910390fd5b5b600061308261271061307460105486612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b9050600081111561317c57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016130ea929190614aa3565b602060405180830381600087803b15801561310457600080fd5b505af1158015613118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313c9190614033565b61317b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317290614df9565b60405180910390fd5b5b60006131ab6131a6836131988688612a0890919063ffffffff16565b612a0890919063ffffffff16565b613466565b90506131b681613214565b6131cb81600754612c4690919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234600754600254604051613206929190615096565b60405180910390a150505050565b60008111613257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161324e90614dd9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e54836040518363ffffffff1660e01b81526004016132b6929190615096565b600060405180830381600087803b1580156132d057600080fd5b505af11580156132e4573d6000803e3d6000fd5b5050505050565b61330081600254612c4690919063ffffffff16565b60028190555061335881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c4690919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516133f99190614ff9565b60405180910390a35050565b6000808311829061344c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134439190614d37565b60405180910390fd5b50600083858161345857fe5b049050809150509392505050565b60008061347d600284612d0b90919063ffffffff16565b9050600081116134c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b990614dd9565b60405180910390fd5b6060600267ffffffffffffffff811180156134dc57600080fd5b5060405190808252806020026020018201604052801561350b5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061353e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106135a857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000829050816001815181106135f457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061361f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146137cf576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b81526004016136a192919061503d565b60006040518083038186803b1580156136b957600080fd5b505afa1580156136cd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136f69190613ff2565b90508060018251038151811061370857fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b81526004016137759594939291906150bf565b600060405180830381600087803b15801561378f57600080fd5b505af11580156137a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137cc9190613ff2565b50505b6060600267ffffffffffffffff811180156137e957600080fd5b506040519080825280602002602001820160405280156138185781602001602082028036833780820191505090505b5090508260008151811061382857fe5b60200260200101518160008151811061383d57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106138a757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000849050816001815181106138f357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061391e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613ace576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b81526004016139a092919061503d565b60006040518083038186803b1580156139b857600080fd5b505afa1580156139cc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139f59190613ff2565b905080600182510381518110613a0757fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b8152600401613a749594939291906150bf565b600060405180830381600087803b158015613a8e57600080fd5b505af1158015613aa2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613acb9190613ff2565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e3370086600181518110613b1b57fe5b602002602001015185600181518110613b3057fe5b6020026020010151878660008030426040518963ffffffff1660e01b8152600401613b62989796959493929190614af5565b606060405180830381600087803b158015613b7c57600080fd5b505af1158015613b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb491906140ae565b92505050809650505050505050919050565b600081359050613bd5816153c4565b92915050565b600082601f830112613bec57600080fd5b8135613bff613bfa82615165565b615134565b91508181835260208401935060208101905083856020840282011115613c2457600080fd5b60005b83811015613c545781613c3a8882613bc6565b845260208401935060208301925050600181019050613c27565b5050505092915050565b600082601f830112613c6f57600080fd5b8135613c82613c7d82615191565b615134565b91508181835260208401935060208101905083856020840282011115613ca757600080fd5b60005b83811015613cd75781613cbd8882613d8e565b845260208401935060208301925050600181019050613caa565b5050505092915050565b600082601f830112613cf257600080fd5b8151613d05613d0082615191565b615134565b91508181835260208401935060208101905083856020840282011115613d2a57600080fd5b60005b83811015613d5a5781613d408882613da3565b845260208401935060208301925050600181019050613d2d565b5050505092915050565b600081519050613d73816153db565b92915050565b600081359050613d88816153f2565b92915050565b600081359050613d9d81615409565b92915050565b600081519050613db281615409565b92915050565b600081359050613dc781615420565b92915050565b600060208284031215613ddf57600080fd5b6000613ded84828501613bc6565b91505092915050565b60008060408385031215613e0957600080fd5b6000613e1785828601613bc6565b9250506020613e2885828601613bc6565b9150509250929050565b600080600060608486031215613e4757600080fd5b6000613e5586828701613bc6565b9350506020613e6686828701613bc6565b9250506040613e7786828701613d8e565b9150509250925092565b600080600080600080600060e0888a031215613e9c57600080fd5b6000613eaa8a828b01613bc6565b9750506020613ebb8a828b01613bc6565b9650506040613ecc8a828b01613d8e565b9550506060613edd8a828b01613d8e565b9450506080613eee8a828b01613db8565b93505060a0613eff8a828b01613d79565b92505060c0613f108a828b01613d79565b91505092959891949750929550565b60008060408385031215613f3257600080fd5b6000613f4085828601613bc6565b9250506020613f5185828601613d8e565b9150509250929050565b600080600060608486031215613f7057600080fd5b600084013567ffffffffffffffff811115613f8a57600080fd5b613f9686828701613bdb565b935050602084013567ffffffffffffffff811115613fb357600080fd5b613fbf86828701613c5e565b925050604084013567ffffffffffffffff811115613fdc57600080fd5b613fe886828701613bdb565b9150509250925092565b60006020828403121561400457600080fd5b600082015167ffffffffffffffff81111561401e57600080fd5b61402a84828501613ce1565b91505092915050565b60006020828403121561404557600080fd5b600061405384828501613d64565b91505092915050565b60006020828403121561406e57600080fd5b600061407c84828501613d8e565b91505092915050565b60006020828403121561409757600080fd5b60006140a584828501613da3565b91505092915050565b6000806000606084860312156140c357600080fd5b60006140d186828701613da3565b93505060206140e286828701613da3565b92505060406140f386828701613da3565b9150509250925092565b600080600080600060a0868803121561411557600080fd5b600061412388828901613d8e565b955050602061413488828901613d8e565b945050604061414588828901613db8565b935050606061415688828901613d79565b925050608061416788828901613d79565b9150509295509295909350565b6000614180838361419b565b60208301905092915050565b6141958161529c565b82525050565b6141a48161523d565b82525050565b6141b38161523d565b82525050565b60006141c4826151e2565b6141ce8185615205565b93506141d9836151bd565b8060005b8381101561420a5781516141f18882614174565b97506141fc836151f8565b9250506001810190506141dd565b5085935050505092915050565b6142208161524f565b82525050565b61422f8161525b565b82525050565b6142466142418261525b565b6153a7565b82525050565b600081546001811660008114614269576001811461428e576142d2565b607f600283041661427a8187615216565b955060ff19831686528086019350506142d2565b6002820461429c8187615216565b95506142a7856151cd565b60005b828110156142c9578154818901526001820191506020810190506142aa565b82880195505050505b505092915050565b6142e3816152ae565b82525050565b6142f2816152d2565b82525050565b614301816152f6565b82525050565b6143108161531a565b82525050565b61431f8161533e565b82525050565b6000614330826151ed565b61433a8185615221565b935061434a818560208601615374565b614353816153b3565b840191505092915050565b600061436b602683615221565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143d1600283615232565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000614411601b83615221565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614451600f83615221565b91507f6e6f742073616d65206c656e67746800000000000000000000000000000000006000830152602082019050919050565b6000614491602483615221565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006144f7600e83615221565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b6000614537601c83615221565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b6000614577600f83615221565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b60006145b7600e83615221565b91507f617070726f7665206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006145f7601683615221565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b6000614637601983615221565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b6000614677602183615221565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006146dd602083615221565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061471d601c83615221565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b600061475d603483615221565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b60006147c3601383615221565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b6000614803601283615221565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b6000614843600783615221565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614883600e83615221565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006148c3600f83615221565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000614903601e83615221565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b6000614943601883615221565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b61497f81615285565b82525050565b61498e8161528f565b82525050565b60006149a0828461424c565b915081905092915050565b60006149b6826143c4565b91506149c28285614235565b6020820191506149d28284614235565b6020820191508190509392505050565b60006020820190506149f760008301846141aa565b92915050565b6000606082019050614a12600083018661418c565b614a1f60208301856141aa565b614a2c6040830184614976565b949350505050565b600060e082019050614a49600083018a61418c565b614a5660208301896141aa565b614a636040830188614976565b614a706060830187614976565b614a7d6080830186614985565b614a8a60a0830185614226565b614a9760c0830184614226565b98975050505050505050565b6000604082019050614ab8600083018561418c565b614ac56020830184614976565b9392505050565b6000604082019050614ae160008301856141aa565b614aee60208301846141aa565b9392505050565b600061010082019050614b0b600083018b6141aa565b614b18602083018a6141aa565b614b256040830189614976565b614b326060830188614976565b614b3f6080830187614316565b614b4c60a0830186614316565b614b5960c08301856141aa565b614b6660e0830184614976565b9998505050505050505050565b6000604082019050614b8860008301856141aa565b614b956020830184614976565b9392505050565b6000602082019050614bb16000830184614217565b92915050565b6000602082019050614bcc6000830184614226565b92915050565b600060c082019050614be76000830189614226565b614bf460208301886141aa565b614c0160408301876141aa565b614c0e6060830186614976565b614c1b6080830185614976565b614c2860a0830184614976565b979650505050505050565b600060a082019050614c486000830188614226565b614c556020830187614226565b614c626040830186614226565b614c6f6060830185614976565b614c7c60808301846141aa565b9695505050505050565b6000608082019050614c9b6000830187614226565b614ca86020830186614985565b614cb56040830185614226565b614cc26060830184614226565b95945050505050565b6000602082019050614ce060008301846142da565b92915050565b6000602082019050614cfb60008301846142e9565b92915050565b6000602082019050614d1660008301846142f8565b92915050565b6000602082019050614d316000830184614307565b92915050565b60006020820190508181036000830152614d518184614325565b905092915050565b60006020820190508181036000830152614d728161435e565b9050919050565b60006020820190508181036000830152614d9281614404565b9050919050565b60006020820190508181036000830152614db281614444565b9050919050565b60006020820190508181036000830152614dd281614484565b9050919050565b60006020820190508181036000830152614df2816144ea565b9050919050565b60006020820190508181036000830152614e128161452a565b9050919050565b60006020820190508181036000830152614e328161456a565b9050919050565b60006020820190508181036000830152614e52816145aa565b9050919050565b60006020820190508181036000830152614e72816145ea565b9050919050565b60006020820190508181036000830152614e928161462a565b9050919050565b60006020820190508181036000830152614eb28161466a565b9050919050565b60006020820190508181036000830152614ed2816146d0565b9050919050565b60006020820190508181036000830152614ef281614710565b9050919050565b60006020820190508181036000830152614f1281614750565b9050919050565b60006020820190508181036000830152614f32816147b6565b9050919050565b60006020820190508181036000830152614f52816147f6565b9050919050565b60006020820190508181036000830152614f7281614836565b9050919050565b60006020820190508181036000830152614f9281614876565b9050919050565b60006020820190508181036000830152614fb2816148b6565b9050919050565b60006020820190508181036000830152614fd2816148f6565b9050919050565b60006020820190508181036000830152614ff281614936565b9050919050565b600060208201905061500e6000830184614976565b92915050565b60006040820190506150296000830185614976565b61503660208301846141aa565b9392505050565b60006040820190506150526000830185614976565b818103602083015261506481846141b9565b90509392505050565b60006040820190506150826000830185614976565b61508f6020830184614316565b9392505050565b60006040820190506150ab6000830185614976565b6150b86020830184614976565b9392505050565b600060a0820190506150d46000830188614976565b6150e16020830187614976565b81810360408301526150f381866141b9565b905061510260608301856141aa565b61510f6080830184614976565b9695505050505050565b600060208201905061512e6000830184614985565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561515b5761515a6153b1565b5b8060405250919050565b600067ffffffffffffffff8211156151805761517f6153b1565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156151ac576151ab6153b1565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061524882615265565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006152a782615350565b9050919050565b60006152b9826152c0565b9050919050565b60006152cb82615265565b9050919050565b60006152dd826152e4565b9050919050565b60006152ef82615265565b9050919050565b600061530182615308565b9050919050565b600061531382615265565b9050919050565b60006153258261532c565b9050919050565b600061533782615265565b9050919050565b600061534982615285565b9050919050565b600061535b82615362565b9050919050565b600061536d82615265565b9050919050565b60005b83811015615392578082015181840152602081019050615377565b838111156153a1576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b6153cd8161523d565b81146153d857600080fd5b50565b6153e48161524f565b81146153ef57600080fd5b50565b6153fb8161525b565b811461540657600080fd5b50565b61541281615285565b811461541d57600080fd5b50565b6154298161528f565b811461543457600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212207e33d9a18b5ea5b2e1bb8be033522712084d9792d730c3d3f7b6754dbf30865464736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061028a5760003560e01c80638da5cb5b1161015c578063d505accf116100ce578063ed24911d11610087578063ed24911d1461077d578063ee99205c1461079b578063f2fde38b146107b9578063f7c618c1146107d5578063f887ea40146107f3578063fdb5a03e146108115761028a565b8063d505accf146106ab578063db2e21bc146106c7578063dd62ed3e146106d1578063dd8ce4d614610701578063e41e091314610731578063eab89a5a1461074d5761028a565b8063b6b55f2511610120578063b6b55f25146105fb578063b9e57b8014610617578063bd079f5514610635578063c4b24a4614610653578063c89039c514610671578063cff1b6ef1461068f5761028a565b80638da5cb5b1461055557806395d89b41146105735780639e4e731814610591578063a8ae2b7c146105af578063a9059cbb146105cb5761028a565b806330adf81f11610200578063715018a6116101b9578063715018a6146104a75780637d882097146104b15780637ecebe00146104cf57806381837230146104ff5780638980f11f1461051b5780638aff733d146105375761028a565b806330adf81f146103e5578063313ce567146104035780634a970be7146104215780634ebb79161461043d5780635eaec0e41461045957806370a08231146104775761028a565b80631331731411610252578063133173141461033557806318160ddd1461035357806320606b7014610371578063236aecd51461038f57806323b872dd146103995780632e1a7d4d146103c95761028a565b806303f7d9071461028f57806306fdde03146102ab57806307677111146102c9578063095ea7b3146102e75780631145180414610317575b600080fd5b6102a960048036038101906102a4919061405c565b61081b565b005b6102b36108dc565b6040516102c09190614d37565b60405180910390f35b6102d161097a565b6040516102de9190614ff9565b60405180910390f35b61030160048036038101906102fc9190613f1f565b610980565b60405161030e9190614b9c565b60405180910390f35b61031f610997565b60405161032c9190614ff9565b60405180910390f35b61033d61099d565b60405161034a9190614b9c565b60405180910390f35b61035b6109b0565b6040516103689190614ff9565b60405180910390f35b6103796109b6565b6040516103869190614bb7565b60405180910390f35b6103976109dd565b005b6103b360048036038101906103ae9190613e32565b610acb565b6040516103c09190614b9c565b60405180910390f35b6103e360048036038101906103de919061405c565b610ce4565b005b6103ed610e69565b6040516103fa9190614bb7565b60405180910390f35b61040b610e90565b6040516104189190615119565b60405180910390f35b61043b600480360381019061043691906140fd565b610e95565b005b6104576004803603810190610452919061405c565b610f3e565b005b610461611081565b60405161046e9190614ff9565b60405180910390f35b610491600480360381019061048c9190613dcd565b611087565b60405161049e9190614ff9565b60405180910390f35b6104af6110d0565b005b6104b961120d565b6040516104c69190614ff9565b60405180910390f35b6104e960048036038101906104e49190613dcd565b611213565b6040516104f69190614ff9565b60405180910390f35b6105196004803603810190610514919061405c565b61122b565b005b61053560048036038101906105309190613f1f565b6112ec565b005b61053f611476565b60405161054c9190614ff9565b60405180910390f35b61055d61147c565b60405161056a91906149e2565b60405180910390f35b61057b6114a6565b6040516105889190614d37565b60405180910390f35b610599611544565b6040516105a69190614bb7565b60405180910390f35b6105c960048036038101906105c4919061405c565b61156b565b005b6105e560048036038101906105e09190613f1f565b611685565b6040516105f29190614b9c565b60405180910390f35b6106156004803603810190610610919061405c565b61169c565b005b61061f6116a8565b60405161062c9190614ff9565b60405180910390f35b61063d6116f8565b60405161064a9190614ff9565b60405180910390f35b61065b6116fe565b6040516106689190614ff9565b60405180910390f35b61067961187b565b6040516106869190614d01565b60405180910390f35b6106a960048036038101906106a4919061405c565b6118a1565b005b6106c560048036038101906106c09190613e81565b6119bb565b005b6106cf611ac5565b005b6106eb60048036038101906106e69190613df6565b611bda565b6040516106f89190614ff9565b60405180910390f35b61071b6004803603810190610716919061405c565b611c61565b6040516107289190614ff9565b60405180910390f35b61074b60048036038101906107469190613f5b565b611cba565b005b6107676004803603810190610762919061405c565b611fbb565b6040516107749190614ff9565b60405180910390f35b610785612015565b6040516107929190614bb7565b60405180910390f35b6107a36120ae565b6040516107b09190614ccb565b60405180910390f35b6107d360048036038101906107ce9190613dcd565b6120d4565b005b6107dd612280565b6040516107ea9190614ce6565b60405180910390f35b6107fb6122a6565b6040516108089190614d1c565b60405180910390f35b6108196122cc565b005b610823612397565b73ffffffffffffffffffffffffffffffffffffffff1661084161147c565b73ffffffffffffffffffffffffffffffffffffffff1614610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90614eb9565b60405180910390fd5b7fd0f7c999974ac5e720302e1a81f85f0e86835bd50d1cdd4086c839df9c123aab601354826040516108ca929190615096565b60405180910390a18060138190555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b505050505081565b60115481565b600061098d33848461239f565b6001905092915050565b60135481565b601260009054906101000a900460ff1681565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6109e5612397565b73ffffffffffffffffffffffffffffffffffffffff16610a0361147c565b73ffffffffffffffffffffffffffffffffffffffff1614610a59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5090614eb9565b60405180910390fd5b601260009054906101000a900460ff1615601260006101000a81548160ff0219169083151502179055507fd46852adf64681b12b81a308b01efd0a546667f68ab41ae5855c2bae7756380f601260009054906101000a900460ff16604051610ac19190614b9c565b60405180910390a1565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610bae57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ccc576000610be2856040518060600160405280602f815260200161545f602f91398461256a9092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cc29190614ff9565b60405180910390a3505b610cd78686866125c5565b6001925050509392505050565b6000610cef82611fbb565b90506000811115610e6557610d03816127e3565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d60929190614aa3565b602060405180830381600087803b158015610d7a57600080fd5b505af1158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db29190614033565b610df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de890614f99565b60405180910390fd5b610dfb33836128ba565b610e1081600754612a0890919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610e5c9190614ff9565b60405180910390a25b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610efc9796959493929190614a34565b600060405180830381600087803b158015610f1657600080fd5b505af1158015610f2a573d6000803e3d6000fd5b50505050610f3785612a52565b5050505050565b610f46612397565b73ffffffffffffffffffffffffffffffffffffffff16610f6461147c565b73ffffffffffffffffffffffffffffffffffffffff1614610fba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb190614eb9565b60405180910390fd5b60008111610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff490614dd9565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611043573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051611076929190614aa3565b60405180910390a150565b600e5481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110d8612397565b73ffffffffffffffffffffffffffffffffffffffff166110f661147c565b73ffffffffffffffffffffffffffffffffffffffff161461114c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114390614eb9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60075481565b60056020528060005260406000206000915090505481565b611233612397565b73ffffffffffffffffffffffffffffffffffffffff1661125161147c565b73ffffffffffffffffffffffffffffffffffffffff16146112a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129e90614eb9565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600f54826040516112da929190615096565b60405180910390a180600f8190555050565b6112f4612397565b73ffffffffffffffffffffffffffffffffffffffff1661131261147c565b73ffffffffffffffffffffffffffffffffffffffff1614611368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135f90614eb9565b60405180910390fd5b600081116113ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113a290614dd9565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016113e6929190614aa3565b602060405180830381600087803b15801561140057600080fd5b505af1158015611414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114389190614033565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28828260405161146a929190614b73565b60405180910390a15050565b60105481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561153c5780601f106115115761010080835404028352916020019161153c565b820191906000526020600020905b81548152906001019060200180831161151f57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b611573612397565b73ffffffffffffffffffffffffffffffffffffffff1661159161147c565b73ffffffffffffffffffffffffffffffffffffffff16146115e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115de90614eb9565b60405180910390fd5b6127106115ff60115483612c4690919063ffffffff16565b1115611640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163790614fd9565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f260105482604051611673929190615096565b60405180910390a18060108190555050565b60006116923384846125c5565b6001905092915050565b6116a581612a52565b50565b6000806116b36116fe565b9050600f5481106116ef576116e76127106116d960105484612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b9150506116f5565b60009150505b90565b600f5481565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de86b677600e54306040518363ffffffff1660e01b8152600401611760929190615014565b60206040518083038186803b15801561177857600080fd5b505afa15801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190614085565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161180f91906149e2565b60206040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190614085565b90506118748183612c4690919063ffffffff16565b9250505090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6118a9612397565b73ffffffffffffffffffffffffffffffffffffffff166118c761147c565b73ffffffffffffffffffffffffffffffffffffffff161461191d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191490614eb9565b60405180910390fd5b61271061193560105483612c4690919063ffffffff16565b1115611976576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196d90614f39565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601154826040516119a9929190615096565b60405180910390a18060118190555050565b428410156119fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119f590614e19565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505589604051602001611a8b96959493929190614bd2565b604051602081830303815290604052805190602001209050611ab08882868686612d55565b611abb88888861239f565b5050505050505050565b611acd612397565b73ffffffffffffffffffffffffffffffffffffffff16611aeb61147c565b73ffffffffffffffffffffffffffffffffffffffff1614611b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3890614eb9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e600e546040518263ffffffff1660e01b8152600401611b9e9190614ff9565b600060405180830381600087803b158015611bb857600080fd5b505af1158015611bcc573d6000803e3d6000fd5b505050506000600781905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600080611c7b600754600254612c9b90919063ffffffff16565b1415611c8957819050611cb5565b611cb2600754611ca460025485612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b90505b919050565b611cc2612397565b73ffffffffffffffffffffffffffffffffffffffff16611ce061147c565b73ffffffffffffffffffffffffffffffffffffffff1614611d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2d90614eb9565b60405180910390fd5b81518351148015611d48575080518351145b611d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d7e90614d99565b60405180910390fd5b60005b8351811015611fb5576000848281518110611da157fe5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30868681518110611dd657fe5b60200260200101516040518363ffffffff1660e01b8152600401611dfb929190614acc565b60206040518083038186803b158015611e1357600080fd5b505afa158015611e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4b9190614085565b9050848381518110611e5957fe5b60200260200101518114158015611eae57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81141580611ead57506000858481518110611ea357fe5b6020026020010151145b5b15611fa6578173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858581518110611edb57fe5b6020026020010151878681518110611eef57fe5b60200260200101516040518363ffffffff1660e01b8152600401611f14929190614b73565b602060405180830381600087803b158015611f2e57600080fd5b505af1158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190614033565b611fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9c90614e39565b60405180910390fd5b5b50508080600101915050611d8a565b50505050565b600080611fd5600754600254612c9b90919063ffffffff16565b1415611fe45760009050612010565b61200d600254611fff60075485612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161204a9190614994565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b61207e612e8c565b30604051602001612093959493929190614c33565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6120dc612397565b73ffffffffffffffffffffffffffffffffffffffff166120fa61147c565b73ffffffffffffffffffffffffffffffffffffffff1614612150576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214790614eb9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b790614d59565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461233a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161233190614f59565b60405180910390fd5b60006123446116fe565b9050600f5481101561238b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238290614e59565b60405180910390fd5b61239481612e99565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561240f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240690614ed9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561247f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161247690614fb9565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161255d9190614ff9565b60405180910390a3505050565b60008383111582906125b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a99190614d37565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612635576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262c90614ef9565b60405180910390fd5b6126a1816040518060600160405280602e81526020016154b5602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256a9092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061273681600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c4690919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516127d69190614ff9565b60405180910390a3505050565b60008111612826576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281d90614dd9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600e54836040518363ffffffff1660e01b8152600401612885929190615096565b600060405180830381600087803b15801561289f57600080fd5b505af11580156128b3573d6000803e3d6000fd5b5050505050565b6129268160405180606001604052806027815260200161548e60279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461256a9092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612998816040518060600160405280602781526020016154386027913960025461256a9092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516129fc9190614ff9565b60405180910390a35050565b6000612a4a83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061256a565b905092915050565b6002546007541015612a99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9090614f79565b60405180910390fd5b601260009054906101000a900460ff1615612acf576000612ab86116fe565b90506013548110612acd57612acc81612e99565b5b505b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612b2e939291906149fd565b602060405180830381600087803b158015612b4857600080fd5b505af1158015612b5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b809190614033565b612bbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb690614f19565b60405180910390fd5b612bc881613214565b612bda33612bd583611c61565b6132eb565b612bef81600754612c4690919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612c3b9190614ff9565b60405180910390a250565b600080828401905083811015612c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c8890614d79565b60405180910390fd5b8091505092915050565b600080831415612cae5760009050612d05565b6000828402905082848281612cbf57fe5b0414612d00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612cf790614e99565b60405180910390fd5b809150505b92915050565b6000612d4d83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613405565b905092915050565b6000612d5f612015565b85604051602001612d719291906149ab565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612dae9493929190614c86565b6020604051602081039080840390855afa158015612dd0573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612e4457508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612e83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e7a90614db9565b60405180910390fd5b50505050505050565b6000804690508091505090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e5460006040518363ffffffff1660e01b8152600401612ef992919061506d565b600060405180830381600087803b158015612f1357600080fd5b505af1158015612f27573d6000803e3d6000fd5b505050506000612f56612710612f4860115485612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b9050600081111561305757600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb612fa761147c565b836040518363ffffffff1660e01b8152600401612fc5929190614b73565b602060405180830381600087803b158015612fdf57600080fd5b505af1158015612ff3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130179190614033565b613056576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304d90614e79565b60405180910390fd5b5b600061308261271061307460105486612c9b90919063ffffffff16565b612d0b90919063ffffffff16565b9050600081111561317c57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016130ea929190614aa3565b602060405180830381600087803b15801561310457600080fd5b505af1158015613118573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313c9190614033565b61317b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317290614df9565b60405180910390fd5b5b60006131ab6131a6836131988688612a0890919063ffffffff16565b612a0890919063ffffffff16565b613466565b90506131b681613214565b6131cb81600754612c4690919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234600754600254604051613206929190615096565b60405180910390a150505050565b60008111613257576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161324e90614dd9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e54836040518363ffffffff1660e01b81526004016132b6929190615096565b600060405180830381600087803b1580156132d057600080fd5b505af11580156132e4573d6000803e3d6000fd5b5050505050565b61330081600254612c4690919063ffffffff16565b60028190555061335881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612c4690919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516133f99190614ff9565b60405180910390a35050565b6000808311829061344c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134439190614d37565b60405180910390fd5b50600083858161345857fe5b049050809150509392505050565b60008061347d600284612d0b90919063ffffffff16565b9050600081116134c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b990614dd9565b60405180910390fd5b6060600267ffffffffffffffff811180156134dc57600080fd5b5060405190808252806020026020018201604052801561350b5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061353e57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106135a857fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000829050816001815181106135f457fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061361f57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146137cf576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b81526004016136a192919061503d565b60006040518083038186803b1580156136b957600080fd5b505afa1580156136cd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906136f69190613ff2565b90508060018251038151811061370857fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b81526004016137759594939291906150bf565b600060405180830381600087803b15801561378f57600080fd5b505af11580156137a3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906137cc9190613ff2565b50505b6060600267ffffffffffffffff811180156137e957600080fd5b506040519080825280602002602001820160405280156138185781602001602082028036833780820191505090505b5090508260008151811061382857fe5b60200260200101518160008151811061383d57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106138a757fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000849050816001815181106138f357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061391e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613ace576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b81526004016139a092919061503d565b60006040518083038186803b1580156139b857600080fd5b505afa1580156139cc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139f59190613ff2565b905080600182510381518110613a0757fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b8152600401613a749594939291906150bf565b600060405180830381600087803b158015613a8e57600080fd5b505af1158015613aa2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613acb9190613ff2565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e3370086600181518110613b1b57fe5b602002602001015185600181518110613b3057fe5b6020026020010151878660008030426040518963ffffffff1660e01b8152600401613b62989796959493929190614af5565b606060405180830381600087803b158015613b7c57600080fd5b505af1158015613b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bb491906140ae565b92505050809650505050505050919050565b600081359050613bd5816153c4565b92915050565b600082601f830112613bec57600080fd5b8135613bff613bfa82615165565b615134565b91508181835260208401935060208101905083856020840282011115613c2457600080fd5b60005b83811015613c545781613c3a8882613bc6565b845260208401935060208301925050600181019050613c27565b5050505092915050565b600082601f830112613c6f57600080fd5b8135613c82613c7d82615191565b615134565b91508181835260208401935060208101905083856020840282011115613ca757600080fd5b60005b83811015613cd75781613cbd8882613d8e565b845260208401935060208301925050600181019050613caa565b5050505092915050565b600082601f830112613cf257600080fd5b8151613d05613d0082615191565b615134565b91508181835260208401935060208101905083856020840282011115613d2a57600080fd5b60005b83811015613d5a5781613d408882613da3565b845260208401935060208301925050600181019050613d2d565b5050505092915050565b600081519050613d73816153db565b92915050565b600081359050613d88816153f2565b92915050565b600081359050613d9d81615409565b92915050565b600081519050613db281615409565b92915050565b600081359050613dc781615420565b92915050565b600060208284031215613ddf57600080fd5b6000613ded84828501613bc6565b91505092915050565b60008060408385031215613e0957600080fd5b6000613e1785828601613bc6565b9250506020613e2885828601613bc6565b9150509250929050565b600080600060608486031215613e4757600080fd5b6000613e5586828701613bc6565b9350506020613e6686828701613bc6565b9250506040613e7786828701613d8e565b9150509250925092565b600080600080600080600060e0888a031215613e9c57600080fd5b6000613eaa8a828b01613bc6565b9750506020613ebb8a828b01613bc6565b9650506040613ecc8a828b01613d8e565b9550506060613edd8a828b01613d8e565b9450506080613eee8a828b01613db8565b93505060a0613eff8a828b01613d79565b92505060c0613f108a828b01613d79565b91505092959891949750929550565b60008060408385031215613f3257600080fd5b6000613f4085828601613bc6565b9250506020613f5185828601613d8e565b9150509250929050565b600080600060608486031215613f7057600080fd5b600084013567ffffffffffffffff811115613f8a57600080fd5b613f9686828701613bdb565b935050602084013567ffffffffffffffff811115613fb357600080fd5b613fbf86828701613c5e565b925050604084013567ffffffffffffffff811115613fdc57600080fd5b613fe886828701613bdb565b9150509250925092565b60006020828403121561400457600080fd5b600082015167ffffffffffffffff81111561401e57600080fd5b61402a84828501613ce1565b91505092915050565b60006020828403121561404557600080fd5b600061405384828501613d64565b91505092915050565b60006020828403121561406e57600080fd5b600061407c84828501613d8e565b91505092915050565b60006020828403121561409757600080fd5b60006140a584828501613da3565b91505092915050565b6000806000606084860312156140c357600080fd5b60006140d186828701613da3565b93505060206140e286828701613da3565b92505060406140f386828701613da3565b9150509250925092565b600080600080600060a0868803121561411557600080fd5b600061412388828901613d8e565b955050602061413488828901613d8e565b945050604061414588828901613db8565b935050606061415688828901613d79565b925050608061416788828901613d79565b9150509295509295909350565b6000614180838361419b565b60208301905092915050565b6141958161529c565b82525050565b6141a48161523d565b82525050565b6141b38161523d565b82525050565b60006141c4826151e2565b6141ce8185615205565b93506141d9836151bd565b8060005b8381101561420a5781516141f18882614174565b97506141fc836151f8565b9250506001810190506141dd565b5085935050505092915050565b6142208161524f565b82525050565b61422f8161525b565b82525050565b6142466142418261525b565b6153a7565b82525050565b600081546001811660008114614269576001811461428e576142d2565b607f600283041661427a8187615216565b955060ff19831686528086019350506142d2565b6002820461429c8187615216565b95506142a7856151cd565b60005b828110156142c9578154818901526001820191506020810190506142aa565b82880195505050505b505092915050565b6142e3816152ae565b82525050565b6142f2816152d2565b82525050565b614301816152f6565b82525050565b6143108161531a565b82525050565b61431f8161533e565b82525050565b6000614330826151ed565b61433a8185615221565b935061434a818560208601615374565b614353816153b3565b840191505092915050565b600061436b602683615221565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143d1600283615232565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000614411601b83615221565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000614451600f83615221565b91507f6e6f742073616d65206c656e67746800000000000000000000000000000000006000830152602082019050919050565b6000614491602483615221565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006144f7600e83615221565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b6000614537601c83615221565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b6000614577600f83615221565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b60006145b7600e83615221565b91507f617070726f7665206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006145f7601683615221565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b6000614637601983615221565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b6000614677602183615221565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006146dd602083615221565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600061471d601c83615221565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b600061475d603483615221565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b60006147c3601383615221565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b6000614803601283615221565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b6000614843600783615221565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000614883600e83615221565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006148c3600f83615221565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000614903601e83615221565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b6000614943601883615221565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b61497f81615285565b82525050565b61498e8161528f565b82525050565b60006149a0828461424c565b915081905092915050565b60006149b6826143c4565b91506149c28285614235565b6020820191506149d28284614235565b6020820191508190509392505050565b60006020820190506149f760008301846141aa565b92915050565b6000606082019050614a12600083018661418c565b614a1f60208301856141aa565b614a2c6040830184614976565b949350505050565b600060e082019050614a49600083018a61418c565b614a5660208301896141aa565b614a636040830188614976565b614a706060830187614976565b614a7d6080830186614985565b614a8a60a0830185614226565b614a9760c0830184614226565b98975050505050505050565b6000604082019050614ab8600083018561418c565b614ac56020830184614976565b9392505050565b6000604082019050614ae160008301856141aa565b614aee60208301846141aa565b9392505050565b600061010082019050614b0b600083018b6141aa565b614b18602083018a6141aa565b614b256040830189614976565b614b326060830188614976565b614b3f6080830187614316565b614b4c60a0830186614316565b614b5960c08301856141aa565b614b6660e0830184614976565b9998505050505050505050565b6000604082019050614b8860008301856141aa565b614b956020830184614976565b9392505050565b6000602082019050614bb16000830184614217565b92915050565b6000602082019050614bcc6000830184614226565b92915050565b600060c082019050614be76000830189614226565b614bf460208301886141aa565b614c0160408301876141aa565b614c0e6060830186614976565b614c1b6080830185614976565b614c2860a0830184614976565b979650505050505050565b600060a082019050614c486000830188614226565b614c556020830187614226565b614c626040830186614226565b614c6f6060830185614976565b614c7c60808301846141aa565b9695505050505050565b6000608082019050614c9b6000830187614226565b614ca86020830186614985565b614cb56040830185614226565b614cc26060830184614226565b95945050505050565b6000602082019050614ce060008301846142da565b92915050565b6000602082019050614cfb60008301846142e9565b92915050565b6000602082019050614d1660008301846142f8565b92915050565b6000602082019050614d316000830184614307565b92915050565b60006020820190508181036000830152614d518184614325565b905092915050565b60006020820190508181036000830152614d728161435e565b9050919050565b60006020820190508181036000830152614d9281614404565b9050919050565b60006020820190508181036000830152614db281614444565b9050919050565b60006020820190508181036000830152614dd281614484565b9050919050565b60006020820190508181036000830152614df2816144ea565b9050919050565b60006020820190508181036000830152614e128161452a565b9050919050565b60006020820190508181036000830152614e328161456a565b9050919050565b60006020820190508181036000830152614e52816145aa565b9050919050565b60006020820190508181036000830152614e72816145ea565b9050919050565b60006020820190508181036000830152614e928161462a565b9050919050565b60006020820190508181036000830152614eb28161466a565b9050919050565b60006020820190508181036000830152614ed2816146d0565b9050919050565b60006020820190508181036000830152614ef281614710565b9050919050565b60006020820190508181036000830152614f1281614750565b9050919050565b60006020820190508181036000830152614f32816147b6565b9050919050565b60006020820190508181036000830152614f52816147f6565b9050919050565b60006020820190508181036000830152614f7281614836565b9050919050565b60006020820190508181036000830152614f9281614876565b9050919050565b60006020820190508181036000830152614fb2816148b6565b9050919050565b60006020820190508181036000830152614fd2816148f6565b9050919050565b60006020820190508181036000830152614ff281614936565b9050919050565b600060208201905061500e6000830184614976565b92915050565b60006040820190506150296000830185614976565b61503660208301846141aa565b9392505050565b60006040820190506150526000830185614976565b818103602083015261506481846141b9565b90509392505050565b60006040820190506150826000830185614976565b61508f6020830184614316565b9392505050565b60006040820190506150ab6000830185614976565b6150b86020830184614976565b9392505050565b600060a0820190506150d46000830188614976565b6150e16020830187614976565b81810360408301526150f381866141b9565b905061510260608301856141aa565b61510f6080830184614976565b9695505050505050565b600060208201905061512e6000830184614985565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561515b5761515a6153b1565b5b8060405250919050565b600067ffffffffffffffff8211156151805761517f6153b1565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156151ac576151ab6153b1565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061524882615265565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006152a782615350565b9050919050565b60006152b9826152c0565b9050919050565b60006152cb82615265565b9050919050565b60006152dd826152e4565b9050919050565b60006152ef82615265565b9050919050565b600061530182615308565b9050919050565b600061531382615265565b9050919050565b60006153258261532c565b9050919050565b600061533782615265565b9050919050565b600061534982615285565b9050919050565b600061535b82615362565b9050919050565b600061536d82615265565b9050919050565b60005b83811015615392578082015181840152602081019050615377565b838111156153a1576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b6153cd8161523d565b81146153d857600080fd5b50565b6153e48161524f565b81146153ef57600080fd5b50565b6153fb8161525b565b811461540657600080fd5b50565b61541281615285565b811461541d57600080fd5b50565b6154298161528f565b811461543457600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212207e33d9a18b5ea5b2e1bb8be033522712084d9792d730c3d3f7b6754dbf30865464736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "details": "Staking rewards accurue to contract on each deposit/withdrawal",
        "returns": {
          "_0": "Unclaimed rewards, plus contract balance"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "emergencyWithdraw()": {
        "details": "Reward tokens are not automatically collectedNew deposits will be effectively disabled"
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "reinvest()": {
        "details": "This external function requires minimum tokens to be met"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenAllow(address[],uint256[],address[])": {
        "params": {
          "approvalAmounts": "approval amounts",
          "spenders": "address allowed to spend tokens",
          "tokensToApprove": "tokens to approve"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateMinTokensToReinvestBeforeDeposit(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateReinvestReward(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of receipt tokens to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "VERSION_HASH()": {
        "notice": "keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward token balance that can be reinvested"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "emergencyWithdraw()": {
        "notice": "Allows exit from Staking Contract without additional logic"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest rewards from staking contract to deposit tokens"
      },
      "tokenAllow(address[],uint256[],address[])": {
        "notice": "Set approvals for tokens"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest minimum threshold for external callers"
      },
      "updateMinTokensToReinvestBeforeDeposit(uint256)": {
        "notice": "Update reinvest minimum threshold before a deposit"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "updateRequireReinvestBeforeDeposit()": {
        "notice": "Toggle requirement to reinvest before deposit"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw LP tokens by redeeming receipt tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1151,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1154,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1159,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1165,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1169,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1185,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2332,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRouter)2301"
      },
      {
        "astId": 22,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPair)1921"
      },
      {
        "astId": 24,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "token0",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)1905"
      },
      {
        "astId": 26,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "token1",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1905"
      },
      {
        "astId": 28,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1905"
      },
      {
        "astId": 30,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "stakingContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IBambooChef)1804"
      },
      {
        "astId": 32,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "PID",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 35,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 38,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 41,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 46,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "REQUIRE_REINVEST_BEFORE_DEPOSIT",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 49,
        "contract": "contracts/BambooStrategyForLP.sol:BambooStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBambooChef)1804": {
        "encoding": "inplace",
        "label": "contract IBambooChef",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1905": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)1921": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)2301": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}