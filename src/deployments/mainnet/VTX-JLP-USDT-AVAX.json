{
  "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategyForLP.SwapPairs",
          "name": "_swapPairs",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPair",
              "type": "address"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.RewardSwapPairs[]",
          "name": "_rewardSwapPairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boosterFeeCollector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct VariableRewardsStrategy.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFeeCollector",
      "outputs": [
        {
          "internalType": "contract IBoosterFeeCollector",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateWithdrawFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "_r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collector",
          "type": "address"
        }
      ],
      "name": "updateBoosterFeeCollector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vectorMainStaking",
      "outputs": [
        {
          "internalType": "contract IVectorMainStakingJoe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
    "transactionIndex": 0,
    "gasUsed": "5178438",
    "logsBloom": "0x
    "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920",
    "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x0000000000000000000000006e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd000000000000000000000000454e67025631c065d3cfad6d71e6892f74487a15",
        "logIndex": 1,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x0000000000000000000000005817d4f0b62a59b17f75207da1848c2ce75e7af40000000000000000000000009ef0c12b787f90f59cbbe0b611b82d30cab92929",
        "logIndex": 2,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 3,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 4,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 5,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001f4",
        "logIndex": 6,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 14165717,
        "transactionHash": "0xa6a909e81f02267197225ab8680c95af391deee724bb32e1f54c88eba01ae345",
        "address": "0x6314c275A16D6A65D6e4d5541eAD8DABD7bEfc7a",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0xda5406a5eaacd198e03458f55dcd042e56faff2671dc9e9d678f2b9ff8a4a920"
      }
    ],
    "blockNumber": 14165717,
    "cumulativeGasUsed": "5178438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Vector x Trader Joe USDT-AVAX",
    "0xbb4646a764358ee93c2a9c4a147d5aDEd527ab73",
    {
      "token0": "0xbb4646a764358ee93c2a9c4a147d5aDEd527ab73",
      "token1": "0x0000000000000000000000000000000000000000"
    },
    [
      {
        "reward": "0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd",
        "swapPair": "0x454E67025631C065d3cFAD6d71E6892f74487a15"
      },
      {
        "reward": "0x5817D4F0b62A59b17f75207DA1848C2cE75e7AF4",
        "swapPair": "0x9ef0c12b787f90f59cbbe0b611b82d30cab92929"
      }
    ],
    "0x0E25c07748f727D6CCcD7D2711fD7bD13d13422d",
    "0xA1cfc90A52ba3453A78F460b8BE1FcDe068E29e7",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    {
      "minTokensToReinvest": "10000000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 500,
      "reinvestRewardBips": 500
    }
  ],
  "solcInputHash": "ae877bc66f4b7619b88ddcba72509af7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategyForLP.SwapPairs\",\"name\":\"_swapPairs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"internalType\":\"struct VariableRewardsStrategy.RewardSwapPairs[]\",\"name\":\"_rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boosterFeeCollector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct VariableRewardsStrategy.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFeeCollector\",\"outputs\":[{\"internalType\":\"contract IBoosterFeeCollector\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateDepositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateWithdrawFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collector\",\"type\":\"address\"}],\"name\":\"updateBoosterFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vectorMainStaking\",\"outputs\":[{\"internalType\":\"contract IVectorMainStakingJoe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"_amount\":\"Amount of tokens to deposit\",\"_deadline\":\"The time at which to expire the signature\",\"_r\":\"Half of the ECDSA signature pair\",\"_s\":\"Half of the ECDSA signature pair\",\"_v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Deprecated; approvals should be handled in context of staking\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/VectorStrategyForDexLP.sol\":\"VectorStrategyForDexLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x761751e4c7695848f01e6ebca020145de4b6f4d5e9b5a1f6fae21def20406762\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0xeaab679124488e8a2f6f3208a4ece97195d1d674b0935d56dc4ded963bfb67be\",\"license\":\"MIT\"},\"contracts/interfaces/IBoosterFeeCollector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IBoosterFeeCollector {\\n    function setBoostFee(address _strategy, uint256 _boostFeeBips) external;\\n\\n    function setPaused(bool _paused) external;\\n\\n    function calculateBoostFee(address _strategy, uint256 _amount) external view returns (uint256);\\n\\n    function compound() external;\\n\\n    function sweepTokens(address tokenAddress, uint256 tokenAmount) external;\\n}\\n\",\"keccak256\":\"0xc4af3062a58f5f6d1a39c2f4b0e839d7ba75259a1337b561929bdcbe1e702bdd\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x899cb9f43560de458f6576c1534e9ed1504115787f0db61c856d9f1b4658d1c0\",\"license\":\"MIT\"},\"contracts/interfaces/IVectorJoePoolHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IVectorJoePoolHelper {\\n    function balanceOf(address _address) external view returns (uint256);\\n\\n    function mainStakingJoe() external view returns (address);\\n\\n    function masterVtx() external view returns (address);\\n\\n    function stakingToken() external view returns (address);\\n\\n    function earned(address _token) external view returns (uint256 vtxAmount, uint256 tokenAmount);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function stake(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function getReward() external;\\n}\\n\",\"keccak256\":\"0xf335d33a2c4bd27d7df6936cc0e5dfba8edad0bdc394855276d2dc2e383aa4e9\",\"license\":\"MIT\"},\"contracts/interfaces/IVectorMainStakingJoe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IVectorMainStakingJoe {\\n    /// @notice Get the information of a pool\\n    /// @param _address the address of the deposit token to fetch information for\\n    /// @return pid the pid of the pool\\n    /// @return isActive true if the pool is active\\n    /// @return token the deposit Token\\n    /// @return receipt - the address of the receipt token of this pool\\n    /// @return rewardsAddr the address of the rewarder\\n    /// @return helper the address of the poolHelper\\n    function getPoolInfo(address _address)\\n        external\\n        view\\n        returns (\\n            uint256 pid,\\n            bool isActive,\\n            address token,\\n            address receipt,\\n            address rewardsAddr,\\n            address helper\\n        );\\n}\\n\",\"keccak256\":\"0xa4fb906a95d0ac58be1acd1ba9d7395fa0543b6f2b0c39be3c11050221c0bd82\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x13cd04fbe9326420082d6aa105322eded7cbe7d4848d652a15ffca307b51088c\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x0c300bb8b048c88d74d2a1e76ca9709b4dc1109cf9781d4afeaad3a7fe9518f8\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfc1bce446dad248893b01e2c3673129bb4a08f69053a3c0e6f2c8a57349f3a9d\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xc0e758ff3798955ec630efd36ac2f180c982d5a5aa52d65ddac3af249cbf17da\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0x5561e8a8e7df8c9c89a9782b1465cba09b75f2949696da28ed30d4d5458a3f7d\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa79bdc482a4a886790bbfecb531127ead361d3a82abd0aa1e175b7fc1733a6f6\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\n/**\\n * @notice VariableRewardsStrategy\\n */\\nabstract contract VariableRewardsStrategy is YakStrategyV2 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IWAVAX internal constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPairs {\\n        address reward;\\n        address swapPair;\\n    }\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 adminFeeBips;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => address) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        RewardSwapPairs[] memory _rewardSwapPairs,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    ) {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(address(WAVAX));\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n\\n        for (uint256 i = 0; i < _rewardSwapPairs.length; i++) {\\n            _addReward(_rewardSwapPairs[i].reward, _rewardSwapPairs[i].swapPair);\\n        }\\n\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateAdminFee(_strategySettings.adminFeeBips);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair);\\n    }\\n\\n    function _addReward(address _rewardToken, address _swapPair) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = _swapPair;\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount.add(1);\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount.sub(1);\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    function calculateDepositFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateDepositFee(_amount);\\n    }\\n\\n    function calculateWithdrawFee(uint256 _amount) public view returns (uint256) {\\n        return _calculateWithdrawFee(_amount);\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Deprecated; approvals should be handled in context of staking\\n     */\\n    function setAllowances() public override onlyOwner {\\n        revert(\\\"setAllowances::deprecated\\\");\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param _amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 _amount) external override {\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param _amount Amount of tokens to deposit\\n     * @param _deadline The time at which to expire the signature\\n     * @param _v The recovery byte of the signature\\n     * @param _r Half of the ECDSA signature pair\\n     * @param _s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 _amount,\\n        uint256 _deadline,\\n        uint8 _v,\\n        bytes32 _r,\\n        bytes32 _s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\\n        _deposit(msg.sender, _amount);\\n    }\\n\\n    function depositFor(address _account, uint256 _amount) external override {\\n        _deposit(_account, _amount);\\n    }\\n\\n    function _deposit(address _account, uint256 _amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"VariableRewardsStrategy::Deposits disabled\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            uint256 estimatedTotalReward = checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(true);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), _amount),\\n            \\\"VariableRewardsStrategy::Deposit token transfer failed\\\"\\n        );\\n        uint256 depositFee = _calculateDepositFee(_amount);\\n        _mint(_account, getSharesForDepositTokens(_amount.sub(depositFee)));\\n        _stakeDepositTokens(_amount);\\n        emit Deposit(_account, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     */\\n    function _getDepositFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate deposit fee of underlying farm\\n     * @dev Override if deposit fee is calculated dynamically\\n     */\\n    function _calculateDepositFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 depositFeeBips = _getDepositFeeBips();\\n        return _amount.mul(depositFeeBips).div(_bip());\\n    }\\n\\n    function withdraw(uint256 _amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(_amount);\\n        require(depositTokenAmount > 0, \\\"VariableRewardsStrategy::Withdraw amount too low\\\");\\n        uint256 withdrawAmount = _withdrawFromStakingContract(depositTokenAmount);\\n        uint256 withdrawFee = _calculateWithdrawFee(depositTokenAmount);\\n        depositToken.safeTransfer(msg.sender, withdrawAmount.sub(withdrawFee));\\n        _burn(msg.sender, _amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Withdraw fee bips from underlying farm\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _getWithdrawFeeBips() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Calculate withdraw fee of underlying farm\\n     * @dev Override if withdraw fee is calculated dynamically\\n     * @dev Important: Do not override if withdraw fee is deducted from the amount returned by _withdrawFromStakingContract\\n     */\\n    function _calculateWithdrawFee(uint256 _amount) internal view virtual returns (uint256) {\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips();\\n        return _amount.mul(withdrawFeeBips).div(_bip());\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        _reinvest(false);\\n    }\\n\\n    function _convertRewardsIntoWAVAX() private returns (uint256) {\\n        uint256 avaxAmount = WAVAX.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                    avaxAmount = avaxAmount.add(balance);\\n                }\\n                continue;\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward];\\n                if (swapPair > address(0)) {\\n                    avaxAmount = avaxAmount.add(DexLibrary.swap(amount, reward, address(rewardToken), IPair(swapPair)));\\n                }\\n            }\\n        }\\n        return avaxAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from the staking contract\\n     */\\n    function _reinvest(bool userDeposit) private {\\n        _getRewards();\\n        uint256 amount = _convertRewardsIntoWAVAX();\\n        if (!userDeposit) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount.sub(devFee).sub(reinvestFee));\\n\\n        _stakeDepositTokens(depositTokenAmount);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 _amount) private {\\n        require(_amount > 0, \\\"VariableRewardsStrategy::Stake amount too low\\\");\\n        _depositToStakingContract(_amount);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        Reward[] memory rewards = _pendingRewards();\\n        uint256 estimatedTotalReward = WAVAX.balanceOf(address(this));\\n        estimatedTotalReward.add(address(this).balance);\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i].reward;\\n            if (reward == address(WAVAX)) {\\n                estimatedTotalReward = estimatedTotalReward.add(rewards[i].amount);\\n            } else {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance.add(rewards[i].amount);\\n                address swapPair = rewardSwapPairs[rewards[i].reward];\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward = estimatedTotalReward.add(\\n                        DexLibrary.estimateConversionThroughPair(amount, reward, address(WAVAX), IPair(swapPair))\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFee = _calculateWithdrawFee(depositBalance);\\n        return depositBalance.sub(withdrawFee);\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 _minReturnAmountAccepted,\\n        bool /*_disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw();\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= _minReturnAmountAccepted,\\n            \\\"VariableRewardsStrategy::Emergency withdraw minimum return amount not reached\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    function _bip() internal view virtual returns (uint256) {\\n        return 10000;\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 _fromAmount) internal virtual returns (uint256 toAmount);\\n\\n    function _depositToStakingContract(uint256 _amount) internal virtual;\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal virtual returns (uint256 withdrawAmount);\\n\\n    function _emergencyWithdraw() internal virtual;\\n\\n    function _getRewards() internal virtual;\\n\\n    function _pendingRewards() internal view virtual returns (Reward[] memory);\\n}\\n\",\"keccak256\":\"0xe74e67960ede898477a182483b92de0f6363710934cedab995e7b2be36ff37e9\",\"license\":\"MIT\"},\"contracts/strategies/VariableRewardsStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./VariableRewardsStrategy.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for VariableRewardsStrategy with SA deposit.\\n */\\nabstract contract VariableRewardsStrategyForLP is VariableRewardsStrategy {\\n    struct SwapPairs {\\n        address token0;\\n        address token1;\\n    }\\n\\n    address private swapPairToken0;\\n    address private swapPairToken1;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        SwapPairs memory _swapPairs,\\n        RewardSwapPairs[] memory _rewardSwapPairs,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategy(_name, _depositToken, _rewardSwapPairs, _timelock, _strategySettings) {\\n        assignSwapPairSafely(_swapPairs);\\n    }\\n\\n    /**\\n     * @notice Initialization helper for Pair deposit tokens\\n     * @dev Checks that selected Pairs are valid for trading reward tokens\\n     * @dev Assigns values to IPair(swapPairToken0) and IPair(swapPairToken1)\\n     */\\n    function assignSwapPairSafely(SwapPairs memory _swapPairs) private {\\n        if (\\n            address(WAVAX) != IPair(address(depositToken)).token0() &&\\n            address(WAVAX) != IPair(address(depositToken)).token1()\\n        ) {\\n            // deployment checks for non-pool2\\n            require(_swapPairs.token0 > address(0), \\\"Swap pair 0 is necessary but not supplied\\\");\\n            require(_swapPairs.token1 > address(0), \\\"Swap pair 1 is necessary but not supplied\\\");\\n            swapPairToken0 = _swapPairs.token0;\\n            swapPairToken1 = _swapPairs.token1;\\n            require(\\n                IPair(swapPairToken0).token0() == address(WAVAX) || IPair(swapPairToken0).token1() == address(WAVAX),\\n                \\\"Swap pair supplied does not have the reward token as one of it's pair\\\"\\n            );\\n            require(\\n                IPair(swapPairToken0).token0() == IPair(address(depositToken)).token0() ||\\n                    IPair(swapPairToken0).token1() == IPair(address(depositToken)).token0(),\\n                \\\"Swap pair 0 supplied does not match the pair in question\\\"\\n            );\\n            require(\\n                IPair(swapPairToken1).token0() == IPair(address(depositToken)).token1() ||\\n                    IPair(swapPairToken1).token1() == IPair(address(depositToken)).token1(),\\n                \\\"Swap pair 1 supplied does not match the pair in question\\\"\\n            );\\n        } else if (address(WAVAX) == IPair(address(depositToken)).token0()) {\\n            swapPairToken1 = address(depositToken);\\n        } else if (address(WAVAX) == IPair(address(depositToken)).token1()) {\\n            swapPairToken0 = address(depositToken);\\n        }\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal override returns (uint256 toAmount) {\\n        toAmount = DexLibrary.convertRewardTokensToDepositTokens(\\n            fromAmount,\\n            address(rewardToken),\\n            address(depositToken),\\n            IPair(swapPairToken0),\\n            IPair(swapPairToken1)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1c98f97e51dff879607605fc7c1bd2685db33b210c0e731cfe6a9eb31457ccf5\",\"license\":\"MIT\"},\"contracts/strategies/VectorStrategyForDexLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.7.3;\\n\\nimport \\\"../interfaces/IVectorMainStakingJoe.sol\\\";\\nimport \\\"../interfaces/IVectorJoePoolHelper.sol\\\";\\nimport \\\"../interfaces/IBoosterFeeCollector.sol\\\";\\nimport \\\"./VariableRewardsStrategyForLP.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\ncontract VectorStrategyForDexLP is VariableRewardsStrategyForLP {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant JOE = IERC20(0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd);\\n    IERC20 private constant VTX = IERC20(0x5817D4F0b62A59b17f75207DA1848C2cE75e7AF4);\\n\\n    IVectorMainStakingJoe public immutable vectorMainStaking;\\n    IBoosterFeeCollector public boosterFeeCollector;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        SwapPairs memory _swapPairs,\\n        RewardSwapPairs[] memory _rewardSwapPairs,\\n        address _stakingContract,\\n        address _boosterFeeCollector,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    ) VariableRewardsStrategyForLP(_name, _depositToken, _swapPairs, _rewardSwapPairs, _timelock, _strategySettings) {\\n        vectorMainStaking = IVectorMainStakingJoe(_stakingContract);\\n        boosterFeeCollector = IBoosterFeeCollector(_boosterFeeCollector);\\n    }\\n\\n    function updateBoosterFeeCollector(address _collector) public onlyOwner {\\n        boosterFeeCollector = IBoosterFeeCollector(_collector);\\n    }\\n\\n    function _depositToStakingContract(uint256 _amount) internal override {\\n        IVectorJoePoolHelper vectorPoolHelper = _vectorPoolHelper();\\n        depositToken.approve(address(vectorPoolHelper), _amount);\\n        vectorPoolHelper.deposit(_amount);\\n        depositToken.approve(address(vectorPoolHelper), 0);\\n    }\\n\\n    function _withdrawFromStakingContract(uint256 _amount) internal override returns (uint256 _withdrawAmount) {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _vectorPoolHelper().withdraw(_amount);\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        return balanceAfter.sub(balanceBefore);\\n    }\\n\\n    function _emergencyWithdraw() internal override {\\n        IVectorJoePoolHelper vectorPoolHelper = _vectorPoolHelper();\\n        depositToken.approve(address(vectorPoolHelper), 0);\\n        vectorPoolHelper.withdraw(totalDeposits());\\n    }\\n\\n    function _pendingRewards() internal view override returns (Reward[] memory) {\\n        IVectorJoePoolHelper vectorPoolHelper = _vectorPoolHelper();\\n        uint256 count = rewardCount;\\n        Reward[] memory pendingRewards = new Reward[](count);\\n        (uint256 pendingVTX, uint256 pendingJOE) = vectorPoolHelper.earned(address(JOE));\\n        uint256 boostFee = boosterFeeCollector.calculateBoostFee(address(this), pendingJOE);\\n        pendingRewards[0] = Reward({reward: address(JOE), amount: pendingJOE.sub(boostFee)});\\n        pendingRewards[1] = Reward({reward: address(VTX), amount: pendingVTX});\\n        uint256 offset = 2;\\n        for (uint256 i = 0; i < count; i++) {\\n            address rewardToken = supportedRewards[i];\\n            if (rewardToken == address(JOE) || rewardToken == address(VTX)) {\\n                continue;\\n            }\\n            (, uint256 pendingAdditionalReward) = vectorPoolHelper.earned(address(rewardToken));\\n            pendingRewards[offset] = Reward({reward: rewardToken, amount: pendingAdditionalReward});\\n            offset++;\\n        }\\n        return pendingRewards;\\n    }\\n\\n    function _getRewards() internal override {\\n        uint256 joeBalanceBefore = JOE.balanceOf(address(this));\\n        _vectorPoolHelper().getReward();\\n        uint256 amount = JOE.balanceOf(address(this)).sub(joeBalanceBefore);\\n        uint256 boostFee = boosterFeeCollector.calculateBoostFee(address(this), amount);\\n        JOE.safeTransfer(address(boosterFeeCollector), boostFee);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        return _vectorPoolHelper().balanceOf(address(this));\\n    }\\n\\n    function _vectorPoolHelper() private view returns (IVectorJoePoolHelper) {\\n        (, , , , , address helper) = vectorMainStaking.getPoolInfo(address(depositToken));\\n        return IVectorJoePoolHelper(helper);\\n    }\\n}\\n\",\"keccak256\":\"0x16d04c1b11aa2270d35620899e8de2516c1e695ae408cc5d07b101ef46e10001\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103d05760003560e01c80638980f11f116101ff578063bd079f551161011a578063dd8ce4d6116100ad578063ed24911d1161007c578063ed24911d14610764578063f2fde38b1461076c578063f7c618c11461077f578063fdb5a03e14610787576103d0565b8063dd8ce4d614610718578063e21ac8251461072b578063e75ab0451461073e578063eab89a5a14610751576103d0565b8063d505accf116100e9578063d505accf146106e2578063da09c72c146106f5578063dbd9a4d4146106fd578063dd62ed3e14610705576103d0565b8063bd079f55146106b7578063c4b24a46146106bf578063c89039c5146106c7578063cff1b6ef146106cf576103d0565b8063a4d5e67c11610192578063ac0d31ff11610161578063ac0d31ff14610681578063b52a321f14610694578063b6b55f251461069c578063b9e57b80146106af576103d0565b8063a4d5e67c14610635578063a5534e7114610648578063a8ae2b7c1461065b578063a9059cbb1461066e576103d0565b80639291d563116101ce5780639291d563146105ff57806395d89b411461061257806399729ec11461061a5780639e4e73181461062d576103d0565b80638980f11f146105c95780638aff733d146105dc5780638b73e606146105e45780638da5cb5b146105f7576103d0565b8063483c2ef0116102ef578063715018a6116102825780637d882097116102515780637d882097146105935780637e08c1851461059b5780637ecebe00146105a357806381837230146105b6576103d0565b8063715018a614610568578063789139bc1461057057806379085425146105785780637ae2677314610580576103d0565b80634ebb7916116102be5780634ebb7916146105275780635ea682ea1461053a5780636c8b4b521461054257806370a0823114610555576103d0565b8063483c2ef0146104db5780634a970be7146104ee5780634bebd1e7146105015780634e77ace514610514576103d0565b806323b872dd1161036757806330adf81f1161033657806330adf81f146104a3578063313ce567146104ab5780633bdc6e72146104c057806340b47e1a146104c8576103d0565b806323b872dd14610468578063247d284b146104455780632e1a7d4d1461047b5780632f4f21e214610490576103d0565b80630fccc400116103a35780630fccc40014610430578063110560351461044557806318160ddd1461045857806320606b7014610460576103d0565b806306fdde03146103d557806307677111146103f3578063095ea7b3146104085780630f23475d14610428575b600080fd5b6103dd61078f565b6040516103ea9190614782565b60405180910390f35b6103fb61081d565b6040516103ea91906146fb565b61041b61041636600461436c565b610823565b6040516103ea91906146f0565b6103fb61083a565b610438610866565b6040516103ea9190614644565b6103fb61045336600461441d565b610875565b6103fb610888565b6103fb61088e565b61041b6104763660046142bf565b6108b2565b61048e61048936600461441d565b61099b565b005b61048e61049e36600461436c565b610a5d565b6103fb610a6b565b6104b3610a8f565b6040516103ea9190615088565b6103fb610a94565b61048e6104d6366004614287565b610a9a565b61041b6104e936600461424f565b610ace565b61048e6104fc366004614510565b610ae3565b61048e61050f36600461424f565b610b7b565b61048e610522366004614397565b610c5f565b61048e61053536600461441d565b610cfd565b6103fb610da9565b61048e61055036600461424f565b610daf565b6103fb61056336600461424f565b610e10565b61048e610e2b565b6103fb610eb4565b6103fb610eba565b61048e61058e366004614287565b610ec0565b6103fb610f89565b610438611013565b6103fb6105b136600461424f565b611037565b61048e6105c436600461441d565b611049565b61048e6105d736600461436c565b6110c8565b6103fb6111da565b61048e6105f236600461424f565b6111e0565b6104386112e6565b61048e61060d36600461424f565b6112f5565b6103dd611388565b61048e61062836600461441d565b6113e2565b6103fb611490565b61048e61064336600461424f565b6114b4565b61043861065636600461424f565b61163b565b61048e61066936600461441d565b611656565b61041b61067c36600461436c565b6116fe565b61048e61068f36600461444d565b61170b565b61041b6118e3565b61048e6106aa36600461441d565b6118ec565b6103fb6118f9565b6103fb611940565b6103fb611946565b610438611bbc565b61048e6106dd36600461441d565b611bcb565b61048e6106f03660046142ff565b611c73565b610438611d28565b61048e611d37565b6103fb610713366004614287565b611d8e565b6103fb61072636600461441d565b611db9565b61048e61073936600461441d565b611df3565b61043861074c36600461441d565b611e72565b6103fb61075f36600461441d565b611e99565b6103fb611eca565b61048e61077a36600461424f565b611f61565b610438612022565b61048e612031565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108155780601f106107ea57610100808354040283529160200191610815565b820191906000526020600020905b8154815290600101906020018083116107f857829003601f168201915b505050505081565b60105481565b60006108303384846122d2565b5060015b92915050565b600080610845610f89565b9050600061085282612386565b905061085e82826123a8565b925050505b90565b6017546001600160a01b031681565b600061088082612386565b90505b919050565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b0383166000818152600360209081526040808320338085529252822054919290919082148015906108ec57506000198114155b15610982576000610918856040518060600160405280602f815260200161510d602f91398491906123e6565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109789085906146fb565b60405180910390a3505b61098d868686612412565b6001925050505b9392505050565b60006109a682611e99565b9050600081116109d15760405162461bcd60e51b81526004016109c890614795565b60405180910390fd5b60006109dc826124f6565b905060006109e983612386565b9050610a0c336109f984846123a8565b6009546001600160a01b03169190612671565b610a1633856126f9565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484604051610a4f91906146fb565b60405180910390a250505050565b610a6782826127d3565b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b600b546001600160a01b03163314610ac45760405162461bcd60e51b81526004016109c890614df4565b610a678282612951565b60086020526000908152604090205460ff1681565b6009546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610b3890339030908a908a908a908a908a9060040161467c565b600060405180830381600087803b158015610b5257600080fd5b505af1158015610b66573d6000803e3d6000fd5b50505050610b7433866127d3565b5050505050565b610b83612a47565b6001600160a01b0316610b946112e6565b6001600160a01b031614610bba5760405162461bcd60e51b81526004016109c890614cf4565b6001600160a01b03811660009081526008602052604090205460ff1615610bf35760405162461bcd60e51b81526004016109c890614a8f565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610c25916122ad565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610c67612a47565b6001600160a01b0316610c786112e6565b6001600160a01b031614610c9e5760405162461bcd60e51b81526004016109c890614cf4565b600e5460ff1615158115151415610cb457600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610cf29083906146f0565b60405180910390a150565b610d05612a47565b6001600160a01b0316610d166112e6565b6001600160a01b031614610d3c5760405162461bcd60e51b81526004016109c890614cf4565b60008111610d4957600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610d76573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610cf29291906146bd565b60115481565b610db7612a47565b6001600160a01b0316610dc86112e6565b6001600160a01b031614610dee5760405162461bcd60e51b81526004016109c890614cf4565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526004602052604090205490565b610e33612a47565b6001600160a01b0316610e446112e6565b6001600160a01b031614610e6a5760405162461bcd60e51b81526004016109c890614cf4565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b600d5481565b60145481565b610ec8612a47565b6001600160a01b0316610ed96112e6565b6001600160a01b031614610eff5760405162461bcd60e51b81526004016109c890614cf4565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610f2e9084906000906004016146bd565b602060405180830381600087803b158015610f4857600080fd5b505af1158015610f5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8091906143b3565b610a6757600080fd5b6000610f93612a4b565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610fbe9190614644565b60206040518083038186803b158015610fd657600080fd5b505afa158015610fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100e9190614435565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60056020526000908152604090205481565b611051612a47565b6001600160a01b03166110626112e6565b6001600160a01b0316146110885760405162461bcd60e51b81526004016109c890614cf4565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c54826040516110bb929190615042565b60405180910390a1600c55565b6110d0612a47565b6001600160a01b03166110e16112e6565b6001600160a01b0316146111075760405162461bcd60e51b81526004016109c890614cf4565b6000811161111457600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb9061114290339085906004016146bd565b602060405180830381600087803b15801561115c57600080fd5b505af1158015611170573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119491906143b3565b61119d57600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516111ce9291906146bd565b60405180910390a15050565b600f5481565b6111e8612a47565b6001600160a01b03166111f96112e6565b6001600160a01b03161461121f5760405162461bcd60e51b81526004016109c890614cf4565b6000600754116112415760405162461bcd60e51b81526004016109c89061491b565b6001600160a01b03811660009081526008602052604090205460ff16151560011461127e5760405162461bcd60e51b81526004016109c890614b80565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546112ac9060016123a8565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b0316331461131f5760405162461bcd60e51b81526004016109c890614df4565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009161135e916001600160a01b039091169084906146d6565b60405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108155780601f106107ea57610100808354040283529160200191610815565b6113ea612a47565b6001600160a01b03166113fb6112e6565b6001600160a01b0316146114215760405162461bcd60e51b81526004016109c890614cf4565b612710611445600f5461143f601054856122ad90919063ffffffff16565b906122ad565b111561145057600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d65172613160115482604051611483929190615042565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600b546001600160a01b031633146114de5760405162461bcd60e51b81526004016109c890614df4565b6001600160a01b038116600090815260126020526040812080546001600160a01b0319169055805b6013548110156115af576013818154811061151d57fe5b6000918252602090912001546001600160a01b03848116911614156115a7576013805460019350600019810190811061155257fe5b600091825260209091200154601380546001600160a01b03909216918390811061157857fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101611506565b50806115cd5760405162461bcd60e51b81526004016109c890614bdd565b60138054806115d857fe5b600082815260209020810160001990810180546001600160a01b03191690550190556014546116089060016123a8565b6014556040517f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906111ce908490614644565b6012602052600090815260409020546001600160a01b031681565b61165e612a47565b6001600160a01b031661166f6112e6565b6001600160a01b0316146116955760405162461bcd60e51b81526004016109c890614cf4565b6127106116b360115461143f601054856122ad90919063ffffffff16565b11156116be57600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f54826040516116f1929190615042565b60405180910390a1600f55565b6000610830338484612412565b611713612a47565b6001600160a01b03166117246112e6565b6001600160a01b03161461174a5760405162461bcd60e51b81526004016109c890614cf4565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a082319061177b903090600401614644565b60206040518083038186803b15801561179357600080fd5b505afa1580156117a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cb9190614435565b90506117d5612b17565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611806903090600401614644565b60206040518083038186803b15801561181e57600080fd5b505afa158015611832573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118569190614435565b90508361186382846123a8565b10156118815760405162461bcd60e51b81526004016109c890614ac6565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346118aa610f89565b6002546040516118bb929190615042565b60405180910390a1600e5460ff161515600114156118dd576118dd6000610c5f565b50505050565b600e5460ff1681565b6118f633826127d3565b50565b600080611904611946565b9050600c5481106119385761193061271061192a600f5484612c0990919063ffffffff16565b90612c43565b915050610863565b600091505090565b600c5481565b60006060611952612c85565b6040516370a0823160e01b815290915060009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a082319061198f903090600401614644565b60206040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190614435565b90506119eb81476122ad565b5060005b8251811015611bb5576000838281518110611a0657fe5b602002602001015160000151905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b0316816001600160a01b03161415611a7357611a6c848381518110611a5157fe5b602002602001015160200151846122ad90919063ffffffff16565b9250611bac565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190611aa2903090600401614644565b60206040518083038186803b158015611aba57600080fd5b505afa158015611ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af29190614435565b90506000611b20868581518110611b0557fe5b602002602001015160200151836122ad90919063ffffffff16565b9050600060126000888781518110611b3457fe5b602090810291909101810151516001600160a01b03908116835290820192909252604001600020541690508115801590611b7657506001600160a01b03811615155b15611ba857611ba5611b9e838673b31f66aa3c1e785363f0875a1b74e27b85fd66c785613007565b87906122ad565b95505b5050505b506001016119ef565b5091505090565b6009546001600160a01b031681565b611bd3612a47565b6001600160a01b0316611be46112e6565b6001600160a01b031614611c0a5760405162461bcd60e51b81526004016109c890614cf4565b612710611c28600f5461143f601154856122ad90919063ffffffff16565b1115611c3357600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60105482604051611c66929190615042565b60405180910390a1601055565b42841015611c935760405162461bcd60e51b81526004016109c890614b49565b6001600160a01b03871660009081526005602090815260408083208054600181019091559051611cee927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101614704565b604051602081830303815290604052805190602001209050611d1388828686866130d4565b611d1e8888886122d2565b5050505050505050565b600b546001600160a01b031681565b611d3f612a47565b6001600160a01b0316611d506112e6565b6001600160a01b031614611d765760405162461bcd60e51b81526004016109c890614cf4565b60405162461bcd60e51b81526004016109c890614dbd565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6000611dcf611dc6610f89565b60025490612c09565b611dda575080610883565b610880611de5610f89565b60025461192a908590612c09565b611dfb612a47565b6001600160a01b0316611e0c6112e6565b6001600160a01b031614611e325760405162461bcd60e51b81526004016109c890614cf4565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d5482604051611e65929190615042565b60405180910390a1600d55565b60138181548110611e7f57fe5b6000918252602090912001546001600160a01b0316905081565b6000611ea6611dc6610f89565b611eb257506000610883565b61088060025461192a611ec3610f89565b8590612c09565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611eff919061459e565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611f316131aa565b30604051602001611f46959493929190614738565b60405160208183030381529060405280519060200120905090565b611f69612a47565b6001600160a01b0316611f7a6112e6565b6001600160a01b031614611fa05760405162461bcd60e51b81526004016109c890614cf4565b6001600160a01b038116611fc65760405162461bcd60e51b81526004016109c890614850565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b3233146120505760405162461bcd60e51b81526004016109c8906148ad565b61205a60006131ae565b565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561209757600080fd5b505afa1580156120ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120cf919061426b565b6001600160a01b0316836001600160a01b0316148061216f5750836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561212257600080fd5b505afa158015612136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061215a919061426b565b6001600160a01b0316836001600160a01b0316145b80156122875750836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156121af57600080fd5b505afa1580156121c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121e7919061426b565b6001600160a01b0316826001600160a01b031614806122875750836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561223a57600080fd5b505afa15801561224e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612272919061426b565b6001600160a01b0316826001600160a01b0316145b80156122a55750816001600160a01b0316836001600160a01b031614155b949350505050565b6000828201838110156109945760405162461bcd60e51b81526004016109c8906148e4565b6001600160a01b0383166122f85760405162461bcd60e51b81526004016109c890614d29565b6001600160a01b03821661231e5760405162461bcd60e51b81526004016109c890614fd6565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906123799085906146fb565b60405180910390a3505050565b6000806123916132d9565b905061099461239e6132de565b61192a8584612c09565b600061099483836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152505b6000818484111561240a5760405162461bcd60e51b81526004016109c89190614782565b505050900390565b6001600160a01b0382166124385760405162461bcd60e51b81526004016109c890614d60565b612475816040518060600160405280602e8152602001615163602e91396001600160a01b03861660009081526004602052604090205491906123e6565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546124a490826122ad565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906123799085906146fb565b6009546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061252b903090600401614644565b60206040518083038186803b15801561254357600080fd5b505afa158015612557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257b9190614435565b9050612585612a4b565b6001600160a01b0316632e1a7d4d846040518263ffffffff1660e01b81526004016125b091906146fb565b600060405180830381600087803b1580156125ca57600080fd5b505af11580156125de573d6000803e3d6000fd5b50506009546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190612615903090600401614644565b60206040518083038186803b15801561262d57600080fd5b505afa158015612641573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126659190614435565b90506122a581836123a8565b6126f48363a9059cbb60e01b84846040516024016126909291906146bd565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526132e4565b505050565b6127368160405180606001604052806027815260200161513c602791396001600160a01b03851660009081526004602052604090205491906123e6565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612786816040518060600160405280602781526020016150e66027913960025491906123e6565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906127c79085906146fb565b60405180910390a35050565b600e5460ff1615156001146127fa5760405162461bcd60e51b81526004016109c890614978565b600d541561282457600061280c611946565b9050600d548111156128225761282260016131ae565b505b6009546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd9061287190339030908690600401614658565b602060405180830381600087803b15801561288b57600080fd5b505af115801561289f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c391906143b3565b6128df5760405162461bcd60e51b81526004016109c890614f1c565b60006128ea82612386565b9050612902836128fd61072685856123a8565b613373565b61290b826133f5565b826001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8360405161294491906146fb565b60405180910390a2505050565b600a546001600160a01b0383811691161461299b57600a5461297f90829084906001600160a01b031661205c565b61299b5760405162461bcd60e51b81526004016109c8906147f2565b6001600160a01b03808316600081815260126020526040812080549385166001600160a01b03199485161790556013805460018181018355919092527f66de8ffda797e3de9c05e8fc57b3bf0ec28a930d40b0d285d93c06501cf6a0909091018054909316909117909155601454612a12916122ad565b6014556040517f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80906111ce90849084906146d6565b3390565b6009546040517f06bfa93800000000000000000000000000000000000000000000000000000000815260009182916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926306bfa93892612abc929190911690600401614644565b60c06040518083038186803b158015612ad457600080fd5b505afa158015612ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b0c9190614471565b965050505050505090565b6000612b21612a4b565b60095460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b390612b559084906000906004016146bd565b602060405180830381600087803b158015612b6f57600080fd5b505af1158015612b83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba791906143b3565b50806001600160a01b0316632e1a7d4d612bbf610f89565b6040518263ffffffff1660e01b8152600401612bdb91906146fb565b600060405180830381600087803b158015612bf557600080fd5b505af1158015610b74573d6000803e3d6000fd5b600082612c1857506000610834565b82820282848281612c2557fe5b04146109945760405162461bcd60e51b81526004016109c890614c97565b600061099483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061341e565b60606000612c91612a4b565b60145490915060608167ffffffffffffffff81118015612cb057600080fd5b50604051908082528060200260200182016040528015612cea57816020015b612cd7614210565b815260200190600190039081612ccf5790505b509050600080846001600160a01b0316628cc262736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd6040518263ffffffff1660e01b8152600401612d2f9190614644565b604080518083038186803b158015612d4657600080fd5b505afa158015612d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7e91906144ed565b601754604051633cb6bbcb60e21b81529294509092506000916001600160a01b039091169063f2daef2c90612db990309086906004016146bd565b60206040518083038186803b158015612dd157600080fd5b505afa158015612de5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e099190614435565b60408051808201909152736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd815290915060208101612e3b84846123a8565b81525084600081518110612e4b57fe5b60200260200101819052506040518060400160405280735817d4f0b62a59b17f75207da1848c2ce75e7af46001600160a01b031681526020018481525084600181518110612e9557fe5b6020908102919091010152600260005b86811015612ffa57600060138281548110612ebc57fe5b6000918252602090912001546001600160a01b03169050736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd811480612f1157506001600160a01b038116735817d4f0b62a59b17f75207da1848c2ce75e7af4145b15612f1c5750612ff2565b6040517e8cc2620000000000000000000000000000000000000000000000000000000081526000906001600160a01b038b1690628cc26290612f62908590600401614644565b604080518083038186803b158015612f7957600080fd5b505afa158015612f8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb191906144ed565b9150506040518060400160405280836001600160a01b0316815260200182815250888581518110612fde57fe5b602090810291909101015250506001909101905b600101612ea5565b5093965050505050505090565b6000806130148585613455565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561305357600080fd5b505afa158015613067573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061308b91906143cf565b5091509150866001600160a01b0316836001600160a01b0316146130ab57905b6130c888836001600160701b0316836001600160701b0316613486565b98975050505050505050565b60006130de611eca565b856040516020016130f092919061460e565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161312d9493929190614764565b6020604051602081039080840390855afa15801561314f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906131855750866001600160a01b0316816001600160a01b0316145b6131a15760405162461bcd60e51b81526004016109c8906149d5565b50505050505050565b4690565b6131b66134ce565b60006131c06136fb565b9050816131e957600c548110156131e95760405162461bcd60e51b81526004016109c890614e2b565b600061320661271061192a60115485612c0990919063ffffffff16565b9050801561322b57600b54600a5461322b916001600160a01b03918216911683612671565b600061324861271061192a600f5486612c0990919063ffffffff16565b9050801561326757600a54613267906001600160a01b03163383612671565b60006132856132808361327a87876123a8565b906123a8565b613944565b9050613290816133f5565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346132b9610f89565b6002546040516132ca929190615042565b60405180910390a15050505050565b600090565b61271090565b6060613339826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139739092919063ffffffff16565b8051909150156126f4578080602001905181019061335791906143b3565b6126f45760405162461bcd60e51b81526004016109c890614f79565b60025461338090826122ad565b6002556001600160a01b0382166000908152600460205260409020546133a690826122ad565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906127c79085906146fb565b600081116134155760405162461bcd60e51b81526004016109c890614e88565b6118f681613982565b6000818361343f5760405162461bcd60e51b81526004016109c89190614782565b50600083858161344b57fe5b0495945050505050565b600080826001600160a01b0316846001600160a01b03161061347857828461347b565b83835b915091509250929050565b600080613495856103e5612c09565b905060006134a38285612c09565b905060006134b78361143f886103e8612c09565b90506134c38282612c43565b979650505050505050565b6040516370a0823160e01b8152600090736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd906370a0823190613508903090600401614644565b60206040518083038186803b15801561352057600080fd5b505afa158015613534573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135589190614435565b9050613562612a4b565b6001600160a01b0316633d18b9126040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561359c57600080fd5b505af11580156135b0573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925061364491508390736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd906370a08231906135f4903090600401614644565b60206040518083038186803b15801561360c57600080fd5b505afa158015613620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061327a9190614435565b601754604051633cb6bbcb60e21b81529192506000916001600160a01b039091169063f2daef2c9061367c90309086906004016146bd565b60206040518083038186803b15801561369457600080fd5b505afa1580156136a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136cc9190614435565b6017549091506126f490736e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd906001600160a01b031683612671565b6040516370a0823160e01b8152600090819073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190613737903090600401614644565b60206040518083038186803b15801561374f57600080fd5b505afa158015613763573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137879190614435565b60135490915060005b8181101561393c576000601382815481106137a757fe5b6000918252602090912001546001600160a01b0316905073b31f66aa3c1e785363f0875a1b74e27b85fd66c78114156138665747801561385f5773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561383057600080fd5b505af1158015613844573d6000803e3d6000fd5b505050505061385c81866122ad90919063ffffffff16565b94505b5050613934565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190613895903090600401614644565b60206040518083038186803b1580156138ad57600080fd5b505afa1580156138c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e59190614435565b90508015613931576001600160a01b0380831660009081526012602052604090205416801561392f57600a5461392c90611b9e90849086906001600160a01b031685613b0e565b95505b505b50505b600101613790565b509091505090565b600a546009546015546016546000936108809386936001600160a01b0392831693918316929081169116613ca1565b60606122a58484600085613e1b565b600061398c612a4b565b60095460405163095ea7b360e01b81529192506001600160a01b03169063095ea7b3906139bf90849086906004016146bd565b602060405180830381600087803b1580156139d957600080fd5b505af11580156139ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a1191906143b3565b506040517fb6b55f250000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063b6b55f2590613a579085906004016146fb565b600060405180830381600087803b158015613a7157600080fd5b505af1158015613a85573d6000803e3d6000fd5b505060095460405163095ea7b360e01b81526001600160a01b03909116925063095ea7b39150613abc9084906000906004016146bd565b602060405180830381600087803b158015613ad657600080fd5b505af1158015613aea573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f491906143b3565b600080613b1b8585613455565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613b5a57600080fd5b505afa158015613b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b9291906143cf565b5091509150866001600160a01b0316836001600160a01b031614613bb257905b600080613bd28a856001600160701b0316856001600160701b0316613486565b9050886001600160a01b0316856001600160a01b031614613bef57905b613bfa89888c613ed1565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90613c529085908590309060248101615050565b600060405180830381600087803b158015613c6c57600080fd5b505af1158015613c80573d6000803e3d6000fd5b50505050818111613c915781613c93565b805b9a9950505050505050505050565b600080613caf876002612c43565b905060008111613cd15760405162461bcd60e51b81526004016109c890614c3a565b6000856001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015613d0c57600080fd5b505afa158015613d20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d44919061426b565b9050816001600160a01b0388811690831614613d6957613d6683898489613b0e565b90505b6000876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015613da457600080fd5b505afa158015613db8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ddc919061426b565b9050836001600160a01b038a811690831614613e0157613dfe858b848a613b0e565b90505b613e0c898483613f6d565b9b9a5050505050505050505050565b606082471015613e3d5760405162461bcd60e51b81526004016109c890614a32565b613e46856141c1565b613e625760405162461bcd60e51b81526004016109c890614ee5565b60006060866001600160a01b03168587604051613e7f9190614582565b60006040518083038185875af1925050503d8060008114613ebc576040519150601f19603f3d011682016040523d82523d6000602084013e613ec1565b606091505b50915091506134c38282866141c7565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90613eff90859085906004016146bd565b602060405180830381600087803b158015613f1957600080fd5b505af1158015613f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f5191906143b3565b6126f45760405162461bcd60e51b81526004016109c89061500d565b6000806000856001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613fab57600080fd5b505afa158015613fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fe391906143cf565b5091509150600061400786846001600160701b0316846001600160701b0316614200565b9050848111156140345784905061403185836001600160701b0316856001600160701b0316614200565b95505b6140af876001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561407057600080fd5b505afa158015614084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140a8919061426b565b8888613ed1565b61412a876001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156140eb57600080fd5b505afa1580156140ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614123919061426b565b8883613ed1565b6040517f6a6278420000000000000000000000000000000000000000000000000000000081526001600160a01b03881690636a6278429061416f903090600401614644565b602060405180830381600087803b15801561418957600080fd5b505af115801561419d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c39190614435565b3b151590565b606083156141d6575081610994565b8251156141e65782518084602001fd5b8160405162461bcd60e51b81526004016109c89190614782565b60006122a58361192a8685612c09565b604080518082019091526000808252602082015290565b80516001600160701b038116811461088357600080fd5b803560ff8116811461088357600080fd5b600060208284031215614260578081fd5b8135610994816150c2565b60006020828403121561427c578081fd5b8151610994816150c2565b60008060408385031215614299578081fd5b82356142a4816150c2565b915060208301356142b4816150c2565b809150509250929050565b6000806000606084860312156142d3578081fd5b83356142de816150c2565b925060208401356142ee816150c2565b929592945050506040919091013590565b600080600080600080600060e0888a031215614319578283fd5b8735614324816150c2565b96506020880135614334816150c2565b955060408801359450606088013593506143506080890161423e565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561437e578182fd5b8235614389816150c2565b946020939093013593505050565b6000602082840312156143a8578081fd5b8135610994816150d7565b6000602082840312156143c4578081fd5b8151610994816150d7565b6000806000606084860312156143e3578283fd5b6143ec84614227565b92506143fa60208501614227565b9150604084015163ffffffff81168114614412578182fd5b809150509250925092565b60006020828403121561442e578081fd5b5035919050565b600060208284031215614446578081fd5b5051919050565b6000806040838503121561445f578182fd5b8235915060208301356142b4816150d7565b60008060008060008060c08789031215614489578182fd5b86519550602087015161449b816150d7565b60408801519095506144ac816150c2565b60608801519094506144bd816150c2565b60808801519093506144ce816150c2565b60a08801519092506144df816150c2565b809150509295509295509295565b600080604083850312156144ff578182fd5b505080516020909101519092909150565b600080600080600060a08688031215614527578283fd5b853594506020860135935061453e6040870161423e565b94979396509394606081013594506080013592915050565b6000815180845261456e816020860160208601615096565b601f01601f19169290920160200192915050565b60008251614594818460208701615096565b9190910192915050565b60008083546001808216600081146145bd57600181146145d457614603565b60ff198316865260028304607f1686019350614603565b600283048786526020808720875b838110156145fb5781548a8201529085019082016145e2565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526109946020830184614556565b60208082526030908201527f5661726961626c655265776172647353747261746567793a3a5769746864726160408201527f7720616d6f756e7420746f6f206c6f7700000000000000000000000000000000606082015260800190565b602080825260409082018190527f5661726961626c655265776172647353747261746567793a3a53776170207061908201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b6020808252602a908201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460408201527f732064697361626c656400000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60408201527f722063616c6c0000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b6020808252604d908201527f5661726961626c655265776172647353747261746567793a3a456d657267656e60408201527f6379207769746864726177206d696e696d756d2072657475726e20616d6f756e60608201527f74206e6f74207265616368656400000000000000000000000000000000000000608082015260a00190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5661726961626c655265776172647353747261746567793a3a5265776172642060408201527f746f2064656c657465206e6f7420666f756e6421000000000000000000000000606082015260800190565b6020808252602f908201527f4465784c6962726172793a3a5f636f6e76657274526577617264546f6b656e7360408201527f546f4465706f736974546f6b656e730000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526019908201527f736574416c6c6f77616e6365733a3a6465707265636174656400000000000000604082015260600190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b60208082526030908201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360408201527f7420616d6f756e7420746f6f206c6f7700000000000000000000000000000000606082015260800190565b6020808252602d908201527f5661726961626c655265776172647353747261746567793a3a5374616b65206160408201527f6d6f756e7420746f6f206c6f7700000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526036908201527f5661726961626c655265776172647353747261746567793a3a4465706f73697460408201527f20746f6b656e207472616e73666572206661696c656400000000000000000000606082015260800190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b918252602082015260400190565b60008582528460208301526001600160a01b03841660408301526080606083015261507e6080830184614556565b9695505050505050565b60ff91909116815260200190565b60005b838110156150b1578181015183820152602001615099565b838111156118dd5750506000910152565b6001600160a01b03811681146118f657600080fd5b80151581146118f657600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212202701fdb3ab87ade61d9d708cfad4ec6d073761bf4eabf26672780be84204ad3f64736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "_amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "_amount": "Amount of tokens to deposit",
          "_deadline": "The time at which to expire the signature",
          "_r": "Half of the ECDSA signature pair",
          "_s": "Half of the ECDSA signature pair",
          "_v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Deprecated; approvals should be handled in context of staking"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6348,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6351,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6356,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6362,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6366,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6382,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22332,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 22445,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 22449,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7732,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)11786"
      },
      {
        "astId": 7734,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)11786"
      },
      {
        "astId": 7736,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7738,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7740,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7742,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 7744,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7746,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7748,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 111940,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 111943,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "19",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 111945,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "rewardCount",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 113008,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "swapPairToken0",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 113010,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "swapPairToken1",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 113397,
        "contract": "contracts/strategies/VectorStrategyForDexLP.sol:VectorStrategyForDexLP",
        "label": "boosterFeeCollector",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IBoosterFeeCollector)11319"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBoosterFeeCollector)11319": {
        "encoding": "inplace",
        "label": "contract IBoosterFeeCollector",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)11786": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}