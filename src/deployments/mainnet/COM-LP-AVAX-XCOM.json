{
  "address": "0xfd410034f88B99E4BeE8Bd7B51Fa323B6678Bf73",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getLPTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForLPTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract ISudoSu",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xfd410034f88B99E4BeE8Bd7B51Fa323B6678Bf73",
    "transactionIndex": 0,
    "gasUsed": "4716903",
    "logsBloom": "0x
    "blockHash": "0x432677ec7967dff2bf7f21ae48c3599e422f57da9d6cb0a32eee3c6828c1816b",
    "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 544072,
        "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
        "address": "0xfd410034f88B99E4BeE8Bd7B51Fa323B6678Bf73",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x432677ec7967dff2bf7f21ae48c3599e422f57da9d6cb0a32eee3c6828c1816b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 544072,
        "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
        "address": "0x3711c397B6c8F7173391361e27e67d72F252cAad",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fd410034f88b99e4bee8bd7b51fa323b6678bf73",
          "0x00000000000000000000000078c18e6be20df11f1f41b9635f3a18b8ad82ddd1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x432677ec7967dff2bf7f21ae48c3599e422f57da9d6cb0a32eee3c6828c1816b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 544072,
        "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
        "address": "0xa238B49BFc48E47533CF7b5488f8C9dA0EFbc843",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fd410034f88b99e4bee8bd7b51fa323b6678bf73",
          "0x00000000000000000000000078c18e6be20df11f1f41b9635f3a18b8ad82ddd1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x432677ec7967dff2bf7f21ae48c3599e422f57da9d6cb0a32eee3c6828c1816b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 544072,
        "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fd410034f88b99e4bee8bd7b51fa323b6678bf73",
          "0x00000000000000000000000078c18e6be20df11f1f41b9635f3a18b8ad82ddd1"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x432677ec7967dff2bf7f21ae48c3599e422f57da9d6cb0a32eee3c6828c1816b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 544072,
        "transactionHash": "0xa8797620c9935fe507d823b66b7354bf875fa8783854a3132249f390fcb72028",
        "address": "0x60b78d111382036ABc5EED987a709B07d52dF9D3",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000fd410034f88b99e4bee8bd7b51fa323b6678bf73",
          "0x000000000000000000000000a329d806fbc80a14415588334ae4b205813c6bb2"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x432677ec7967dff2bf7f21ae48c3599e422f57da9d6cb0a32eee3c6828c1816b"
      }
    ],
    "blockNumber": 544072,
    "cumulativeGasUsed": "4716903",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x60b78d111382036ABc5EED987a709B07d52dF9D3",
    "0x3711c397B6c8F7173391361e27e67d72F252cAad",
    "0xa329D806fbC80a14415588334ae4b205813C6BB2",
    "0x78c18E6BE20df11f1f41b9635F3A18B8AD82dDD1",
    "8"
  ],
  "solcInputHash": "e5be912cac2f82f90f0049ddafc1dc89",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLPTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForLPTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract ISudoSu\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"details\":\"Staking rewards accurue to contract on each deposit/withdrawal\",\"returns\":{\"_0\":\"Unclaimed rewards, plus contract balance\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of LP tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of LP tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getLPTokensForShares(uint256)\":{\"params\":{\"amount\":\"Snowball tokens\"},\"returns\":{\"_0\":\"LP tokens\"}},\"getSharesForLPTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of LP tokens\",\"params\":{\"amount\":\"LP tokens\"},\"returns\":{\"_0\":\"Snowball tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateReinvestReward(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of Snowball tokens to redeem\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward token balance that can be reinvested\"},\"deposit(uint256)\":{\"notice\":\"Deposit LP tokens to receive Snowball tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit LP tokens to receive Snowball tokens\"},\"emergencyWithdraw()\":{\"notice\":\"Allows exit from Staking Contract without additional logic\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getLPTokensForShares(uint256)\":{\"notice\":\"Calculate LP tokens for a given amount of Snowball tokens\"},\"getSharesForLPTokens(uint256)\":{\"notice\":\"Calculate Snowball tokens for a given amount of LP tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest rewards from staking contract to LP tokens\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest minimum threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw LP tokens by redeeming Snowball tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SuStrategyV2.sol\":\"SuStrategyV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SnowballERC20.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract SnowballERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Snowball\\\";\\n    string public symbol = \\\"SNOW\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0xa5a8e218daa55fdd26a731444fa88e32ada12df9c3454f69f7898600db2d5427\",\"license\":\"MIT\"},\"contracts/SuStrategyV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./SnowballERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/ISudoSu.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract SuStrategyV2 is SnowballERC20, Ownable {\\n  using SafeMath for uint;\\n\\n  uint public totalDeposits;\\n\\n  IRouter public router;\\n  IPair public lpToken;\\n  IERC20 private token0;\\n  IERC20 private token1;\\n  IERC20 public rewardToken;\\n  ISudoSu public stakingContract;\\n\\n  uint public PID;\\n  uint public MIN_TOKENS_TO_REINVEST = 20;\\n  uint public REINVEST_REWARD_BIPS = 500;\\n  uint public ADMIN_FEE_BIPS = 500;\\n  uint constant private BIPS_DIVISOR = 10000;\\n\\n  event Deposit(address account, uint amount);\\n  event Withdraw(address account, uint amount);\\n  event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n  event Recovered(address token, uint amount);\\n  event UpdateAdminFee(uint oldValue, uint newValue);\\n  event UpdateReinvestReward(uint oldValue, uint newValue);\\n  event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n\\n  constructor(\\n    address _lpToken, \\n    address _rewardToken, \\n    address _stakingContract,\\n    address _router,\\n    uint _pid\\n  ) {\\n    lpToken = IPair(_lpToken);\\n    rewardToken = IERC20(_rewardToken);\\n    stakingContract = ISudoSu(_stakingContract);\\n    router = IRouter(_router);\\n\\n    PID = _pid;\\n\\n    address _token0 = IPair(_lpToken).token0();\\n    address _token1 = IPair(_lpToken).token1();\\n    token0 = IERC20(_token0);\\n    token1 = IERC20(_token1);\\n\\n    IERC20(_rewardToken).approve(_router, uint(-1));\\n    IERC20(_token0).approve(_router, uint(-1));\\n    IERC20(_token1).approve(_router, uint(-1));\\n    IPair(_lpToken).approve(_stakingContract, uint(-1));\\n\\n    name = string(\\n      abi.encodePacked(\\n        \\\"Snowball: \\\",\\n        lpToken.symbol(), \\\" \\\",\\n        IERC20(_token0).symbol(), \\\"-\\\",\\n        IERC20(_token1).symbol()\\n      )\\n    );\\n  }\\n\\n  /**\\n    * @dev Throws if called by smart contract\\n    */\\n  modifier onlyEOA() {\\n      require(tx.origin == msg.sender, \\\"onlyEOA\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @notice Deposit LP tokens to receive Snowball tokens\\n   * @param amount Amount of LP tokens to deposit\\n   */\\n  function deposit(uint amount) external {\\n    _deposit(amount);\\n  }\\n\\n  /**\\n   * @notice Deposit LP tokens to receive Snowball tokens\\n   * @param amount Amount of LP tokens to deposit\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    lpToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    _deposit(amount);\\n  }\\n\\n  function _deposit(uint amount) internal {\\n    require(totalDeposits >= totalSupply, \\\"deposit failed\\\");\\n    require(lpToken.transferFrom(msg.sender, address(this), amount), \\\"transferFrom failed\\\");\\n    _stakeLpTokens(amount);\\n    _mint(msg.sender, getSharesForLPTokens(amount));\\n    totalDeposits = totalDeposits.add(amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw LP tokens by redeeming Snowball tokens\\n   * @param amount Amount of Snowball tokens to redeem\\n   */\\n  function withdraw(uint amount) external {\\n    uint lpTokenAmount = getLPTokensForShares(amount);\\n    if (lpTokenAmount > 0) {\\n      _withdrawLpTokens(lpTokenAmount);\\n      require(lpToken.transfer(msg.sender, lpTokenAmount), \\\"transfer failed\\\");\\n      _burn(msg.sender, amount);\\n      totalDeposits = totalDeposits.sub(lpTokenAmount);\\n      emit Withdraw(msg.sender, lpTokenAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate Snowball tokens for a given amount of LP tokens\\n   * @dev If contract is empty, use 1:1 ratio\\n   * @dev Could return zero shares for very low amounts of LP tokens\\n   * @param amount LP tokens\\n   * @return Snowball tokens\\n   */\\n  function getSharesForLPTokens(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return amount;\\n    }\\n    return amount.mul(totalSupply).div(totalDeposits);\\n  }\\n\\n  /**\\n   * @notice Calculate LP tokens for a given amount of Snowball tokens\\n   * @param amount Snowball tokens\\n   * @return LP tokens\\n   */\\n  function getLPTokensForShares(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return 0;\\n    }\\n    return amount.mul(totalDeposits).div(totalSupply);\\n  }\\n\\n  /**\\n   * @notice Reward token balance that can be reinvested\\n   * @dev Staking rewards accurue to contract on each deposit/withdrawal\\n   * @return Unclaimed rewards, plus contract balance\\n   */\\n  function checkReward() public view returns (uint) {\\n    uint pendingReward = stakingContract.pendingCom(PID, address(this));\\n    uint contractBalance = rewardToken.balanceOf(address(this));\\n    return pendingReward.add(contractBalance);\\n  }\\n\\n  /**\\n   * @notice Estimate reinvest reward for caller\\n   * @return Estimated rewards tokens earned for calling `reinvest()`\\n   */\\n  function estimateReinvestReward() external view returns (uint) {\\n    uint unclaimedRewards = checkReward();\\n    if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n      return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to LP tokens\\n   */\\n  function reinvest() external onlyEOA {\\n    uint unclaimedRewards = checkReward();\\n    require(unclaimedRewards >= MIN_TOKENS_TO_REINVEST, \\\"MIN_TOKENS_TO_REINVEST\\\");\\n    stakingContract.deposit(PID, 0);\\n\\n    uint adminFee = unclaimedRewards.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (adminFee > 0) {\\n      require(rewardToken.transfer(owner(), adminFee), \\\"admin fee transfer failed\\\");\\n    }\\n\\n    uint reinvestFee = unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    if (reinvestFee > 0) {\\n      require(rewardToken.transfer(msg.sender, reinvestFee), \\\"reinvest fee transfer failed\\\");\\n    }\\n\\n    uint lpTokenAmount = _convertRewardTokensToLpTokens(unclaimedRewards.sub(adminFee).sub(reinvestFee));\\n    _stakeLpTokens(lpTokenAmount);\\n    totalDeposits = totalDeposits.add(lpTokenAmount);\\n\\n    emit Reinvest(totalDeposits, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Converts entire reward token balance to LP tokens\\n   * @dev Always converts through router; there are no price checks enabled\\n   * @return LP tokens received\\n   */\\n  function _convertRewardTokensToLpTokens(uint amount) internal returns (uint) {\\n    uint amountIn = amount.div(2);\\n    require(amountIn > 0, \\\"amount too low\\\");\\n\\n    // swap to token0\\n    address[] memory path0 = new address[](2);\\n    path0[0] = address(rewardToken);\\n    path0[1] = address(token0);\\n\\n    uint amountOutToken0 = amountIn;\\n    if (path0[0] != path0[1]) {\\n      uint[] memory amountsOutToken0 = router.getAmountsOut(amountIn, path0);\\n      amountOutToken0 = amountsOutToken0[amountsOutToken0.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken0, path0, address(this), block.timestamp);\\n    }\\n\\n    // swap to token1\\n    address[] memory path1 = new address[](2);\\n    path1[0] = path0[0];\\n    path1[1] = address(token1);\\n\\n    uint amountOutToken1 = amountIn;\\n    if (path1[0] != path1[1]) {\\n      uint[] memory amountsOutToken1 = router.getAmountsOut(amountIn, path1);\\n      amountOutToken1 = amountsOutToken1[amountsOutToken1.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken1, path1, address(this), block.timestamp);\\n    }\\n\\n    (,,uint liquidity) = router.addLiquidity(\\n      path0[1], path1[1],\\n      amountOutToken0, amountOutToken1,\\n      0, 0,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return liquidity;\\n  }\\n\\n  /**\\n   * @notice Stakes LP tokens in Staking Contract\\n   * @param amount LP tokens to stake\\n   */\\n  function _stakeLpTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.deposit(PID, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraws LP tokens from Staking Contract\\n   * @dev Rewards are not automatically collected from the Staking Contract\\n   * @param amount LP tokens to remove;\\n   */\\n  function _withdrawLpTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.withdraw(PID, amount);\\n  }\\n\\n  /**\\n   * @notice Allows exit from Staking Contract without additional logic\\n   */\\n  function emergencyWithdraw() external onlyOwner {\\n    stakingContract.emergencyWithdraw(PID);\\n    totalDeposits = 0;\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvest(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n    MIN_TOKENS_TO_REINVEST = newValue;\\n  }\\n\\n  /**\\n   * @notice Update admin fee\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateAdminFee(uint newValue) external onlyOwner {\\n    require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR, \\\"admin fee too high\\\");\\n    emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n    ADMIN_FEE_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Update reinvest reward\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateReinvestReward(uint newValue) external onlyOwner {\\n    require(newValue.add(ADMIN_FEE_BIPS) <= BIPS_DIVISOR, \\\"reinvest reward too high\\\");\\n    emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n    REINVEST_REWARD_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Recover ERC20 from contract\\n   * @param tokenAddress token address\\n   * @param tokenAmount amount to recover\\n   */\\n  function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n    require(tokenAmount > 0, 'amount too low');\\n    IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Recover AVAX from contract\\n   * @param amount amount\\n   */\\n  function recoverAVAX(uint amount) external onlyOwner {\\n    require(amount > 0, 'amount too low');\\n    msg.sender.transfer(amount);\\n    emit Recovered(address(0), amount);\\n  }\\n}\",\"keccak256\":\"0xb2c9e258857ca63d065e484ca5a75ba13e1ecc09c90d9cb6e2581c078dd5939b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/interfaces/ISudoSu.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ISudoSu {\\n    function poolLength() external view returns (uint256);\\n    function setComPerBlock(uint256 _newPerBlock) external;\\n    function add(uint256 _allocPoint, address _lpToken, bool _withUpdate) external;\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n    function setMigrator(address _migrator) external;\\n    function migrate(uint256 _pid) external;\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n    function pendingCom(uint256 _pid, address _user) external view returns (uint256);\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function emergencyWithdraw(uint256 _pid) external;\\n    function dev(address _devaddr) external;\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n}\",\"keccak256\":\"0xd8620b5eff0843c11018ea8880ecb8cb66b0833dd50bec31a9ea58a5b13fcccb\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80638aff733d11610146578063cff1b6ef116100c3578063ed24911d11610087578063ed24911d146106c8578063ee99205c146106e6578063f2fde38b14610704578063f7c618c114610720578063f887ea401461073e578063fdb5a03e1461075c57610253565b8063cff1b6ef14610626578063d3bd0e0b14610642578063d505accf14610672578063db2e21bc1461068e578063dd62ed3e1461069857610253565b8063a9059cbb1161010a578063a9059cbb14610580578063b6b55f25146105b0578063b9e57b80146105cc578063bd079f55146105ea578063c4b24a461461060857610253565b80638aff733d146104ec5780638da5cb5b1461050a57806395d89b41146105285780639e4e731814610546578063a8ae2b7c1461056457610253565b80634ebb7916116101d45780637739524c116101985780637739524c146104365780637d882097146104665780637ecebe001461048457806381837230146104b45780638980f11f146104d057610253565b80634ebb7916146103a45780635eaec0e4146103c05780635fcbd285146103de57806370a08231146103fc578063715018a61461042c57610253565b806323b872dd1161021b57806323b872dd146103005780632e1a7d4d1461033057806330adf81f1461034c578063313ce5671461036a5780634a970be71461038857610253565b806306fdde03146102585780630767711114610276578063095ea7b31461029457806318160ddd146102c457806320606b70146102e2575b600080fd5b610260610766565b60405161026d9190614507565b60405180910390f35b61027e610804565b60405161028b9190614789565b60405180910390f35b6102ae60048036038101906102a9919061382f565b61080a565b6040516102bb919061436c565b60405180910390f35b6102cc610821565b6040516102d99190614789565b60405180910390f35b6102ea610827565b6040516102f79190614387565b60405180910390f35b61031a60048036038101906103159190613742565b61084e565b604051610327919061436c565b60405180910390f35b61034a600480360381019061034591906138d5565b610a67565b005b610354610bd7565b6040516103619190614387565b60405180910390f35b610372610bfe565b60405161037f91906148a9565b60405180910390f35b6103a2600480360381019061039d9190613976565b610c03565b005b6103be60048036038101906103b991906138d5565b610cac565b005b6103c8610def565b6040516103d59190614789565b60405180910390f35b6103e6610df5565b6040516103f391906144b6565b60405180910390f35b610416600480360381019061041191906136dd565b610e1b565b6040516104239190614789565b60405180910390f35b610434610e64565b005b610450600480360381019061044b91906138d5565b610fa1565b60405161045d9190614789565b60405180910390f35b61046e610ffa565b60405161047b9190614789565b60405180910390f35b61049e600480360381019061049991906136dd565b611000565b6040516104ab9190614789565b60405180910390f35b6104ce60048036038101906104c991906138d5565b611018565b005b6104ea60048036038101906104e5919061382f565b6110d9565b005b6104f4611263565b6040516105019190614789565b60405180910390f35b610512611269565b60405161051f91906141db565b60405180910390f35b610530611293565b60405161053d9190614507565b60405180910390f35b61054e611331565b60405161055b9190614387565b60405180910390f35b61057e600480360381019061057991906138d5565b611358565b005b61059a6004803603810190610595919061382f565b611472565b6040516105a7919061436c565b60405180910390f35b6105ca60048036038101906105c591906138d5565b611489565b005b6105d4611495565b6040516105e19190614789565b60405180910390f35b6105f26114e5565b6040516105ff9190614789565b60405180910390f35b6106106114eb565b60405161061d9190614789565b60405180910390f35b610640600480360381019061063b91906138d5565b611668565b005b61065c600480360381019061065791906138d5565b611782565b6040516106699190614789565b60405180910390f35b61068c60048036038101906106879190613791565b6117dc565b005b6106966118e6565b005b6106b260048036038101906106ad9190613706565b6119fb565b6040516106bf9190614789565b60405180910390f35b6106d0611a82565b6040516106dd9190614387565b60405180910390f35b6106ee611b1b565b6040516106fb91906144ec565b60405180910390f35b61071e600480360381019061071991906136dd565b611b41565b005b610728611ced565b604051610735919061449b565b60405180910390f35b610746611d13565b60405161075391906144d1565b60405180910390f35b610764611d39565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107fc5780601f106107d1576101008083540402835291602001916107fc565b820191906000526020600020905b8154815290600101906020018083116107df57829003601f168201915b505050505081565b60115481565b6000610817338484612173565b6001905092915050565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561093157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610a4f576000610965856040518060600160405280602f8152602001614bc3602f91398461233e9092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a459190614789565b60405180910390a3505b610a5a868686612399565b6001925050509392505050565b6000610a7282611782565b90506000811115610bd357610a86816125b7565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610ae392919061429c565b602060405180830381600087803b158015610afd57600080fd5b505af1158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3591906138ac565b610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b90614729565b60405180910390fd5b610b7e338361268e565b610b93816007546127dc90919063ffffffff16565b6007819055507f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643382604051610bca92919061429c565b60405180910390a15b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610c6a979695949392919061422d565b600060405180830381600087803b158015610c8457600080fd5b505af1158015610c98573d6000803e3d6000fd5b50505050610ca585612826565b5050505050565b610cb46129cf565b73ffffffffffffffffffffffffffffffffffffffff16610cd2611269565b73ffffffffffffffffffffffffffffffffffffffff1614610d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1f90614649565b60405180910390fd5b60008111610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6290614589565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610db1573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610de492919061429c565b60405180910390a150565b600e5481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610e6c6129cf565b73ffffffffffffffffffffffffffffffffffffffff16610e8a611269565b73ffffffffffffffffffffffffffffffffffffffff1614610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790614649565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600080610fbb6007546002546129d790919063ffffffff16565b1415610fc957819050610ff5565b610ff2600754610fe4600254856129d790919063ffffffff16565b612a4790919063ffffffff16565b90505b919050565b60075481565b60056020528060005260406000206000915090505481565b6110206129cf565b73ffffffffffffffffffffffffffffffffffffffff1661103e611269565b73ffffffffffffffffffffffffffffffffffffffff1614611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90614649565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600f54826040516110c7929190614826565b60405180910390a180600f8190555050565b6110e16129cf565b73ffffffffffffffffffffffffffffffffffffffff166110ff611269565b73ffffffffffffffffffffffffffffffffffffffff1614611155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161114c90614649565b60405180910390fd5b60008111611198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118f90614589565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016111d392919061429c565b602060405180830381600087803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122591906138ac565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051611257929190614343565b60405180910390a15050565b60105481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113295780601f106112fe57610100808354040283529160200191611329565b820191906000526020600020905b81548152906001019060200180831161130c57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b6113606129cf565b73ffffffffffffffffffffffffffffffffffffffff1661137e611269565b73ffffffffffffffffffffffffffffffffffffffff16146113d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cb90614649565b60405180910390fd5b6127106113ec60115483612a9190919063ffffffff16565b111561142d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142490614769565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f260105482604051611460929190614826565b60405180910390a18060108190555050565b600061147f338484612399565b6001905092915050565b61149281612826565b50565b6000806114a06114eb565b9050600f5481106114dc576114d46127106114c6601054846129d790919063ffffffff16565b612a4790919063ffffffff16565b9150506114e2565b60009150505b90565b600f5481565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327dae463600e54306040518363ffffffff1660e01b815260040161154d9291906147a4565b60206040518083038186803b15801561156557600080fd5b505afa158015611579573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159d91906138fe565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115fc91906141db565b60206040518083038186803b15801561161457600080fd5b505afa158015611628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164c91906138fe565b90506116618183612a9190919063ffffffff16565b9250505090565b6116706129cf565b73ffffffffffffffffffffffffffffffffffffffff1661168e611269565b73ffffffffffffffffffffffffffffffffffffffff16146116e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116db90614649565b60405180910390fd5b6127106116fc60105483612a9190919063ffffffff16565b111561173d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611734906146c9565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60115482604051611770929190614826565b60405180910390a18060118190555050565b60008061179c6007546002546129d790919063ffffffff16565b14156117ab57600090506117d7565b6117d46002546117c6600754856129d790919063ffffffff16565b612a4790919063ffffffff16565b90505b919050565b4284101561181f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611816906145c9565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055896040516020016118ac969594939291906143a2565b6040516020818303038152906040528051906020012090506118d18882868686612ae6565b6118dc888888612173565b5050505050505050565b6118ee6129cf565b73ffffffffffffffffffffffffffffffffffffffff1661190c611269565b73ffffffffffffffffffffffffffffffffffffffff1614611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195990614649565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e600e546040518263ffffffff1660e01b81526004016119bf9190614789565b600060405180830381600087803b1580156119d957600080fd5b505af11580156119ed573d6000803e3d6000fd5b505050506000600781905550565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611ab7919061418d565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b611aeb612c1d565b30604051602001611b00959493929190614403565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611b496129cf565b73ffffffffffffffffffffffffffffffffffffffff16611b67611269565b73ffffffffffffffffffffffffffffffffffffffff1614611bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb490614649565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611c2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2490614529565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614611da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9e906146e9565b60405180910390fd5b6000611db16114eb565b9050600f54811015611df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611def906145e9565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e5460006040518363ffffffff1660e01b8152600401611e589291906147fd565b600060405180830381600087803b158015611e7257600080fd5b505af1158015611e86573d6000803e3d6000fd5b505050506000611eb5612710611ea7601154856129d790919063ffffffff16565b612a4790919063ffffffff16565b90506000811115611fb657600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb611f06611269565b836040518363ffffffff1660e01b8152600401611f24929190614343565b602060405180830381600087803b158015611f3e57600080fd5b505af1158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7691906138ac565b611fb5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fac90614609565b60405180910390fd5b5b6000611fe1612710611fd3601054866129d790919063ffffffff16565b612a4790919063ffffffff16565b905060008111156120db57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161204992919061429c565b602060405180830381600087803b15801561206357600080fd5b505af1158015612077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209b91906138ac565b6120da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d1906145a9565b60405180910390fd5b5b600061210a612105836120f786886127dc90919063ffffffff16565b6127dc90919063ffffffff16565b612c2a565b90506121158161338a565b61212a81600754612a9190919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234600754600254604051612165929190614826565b60405180910390a150505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156121e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121da90614669565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612253576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224a90614749565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516123319190614789565b60405180910390a3505050565b6000838311158290612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161237d9190614507565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612409576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240090614689565b60405180910390fd5b612475816040518060600160405280602e8152602001614c19602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233e9092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061250a81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516125aa9190614789565b60405180910390a3505050565b600081116125fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f190614589565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600e54836040518363ffffffff1660e01b8152600401612659929190614826565b600060405180830381600087803b15801561267357600080fd5b505af1158015612687573d6000803e3d6000fd5b5050505050565b6126fa81604051806060016040528060278152602001614bf260279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461233e9092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061276c81604051806060016040528060278152602001614b9c6027913960025461233e9092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516127d09190614789565b60405180910390a35050565b600061281e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061233e565b905092915050565b600254600754101561286d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161286490614709565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016128cc939291906141f6565b602060405180830381600087803b1580156128e657600080fd5b505af11580156128fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061291e91906138ac565b61295d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612954906146a9565b60405180910390fd5b6129668161338a565b6129783361297383610fa1565b613461565b61298d81600754612a9190919063ffffffff16565b6007819055507fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c33826040516129c492919061429c565b60405180910390a150565b600033905090565b6000808314156129ea5760009050612a41565b60008284029050828482816129fb57fe5b0414612a3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3390614629565b60405180910390fd5b809150505b92915050565b6000612a8983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061357b565b905092915050565b600080828401905083811015612adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad390614549565b60405180910390fd5b8091505092915050565b6000612af0611a82565b85604051602001612b029291906141a4565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612b3f9493929190614456565b6020604051602081039080840390855afa158015612b61573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015612bd557508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b612c14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c0b90614569565b60405180910390fd5b50505050505050565b6000804690508091505090565b600080612c41600284612a4790919063ffffffff16565b905060008111612c86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c7d90614589565b60405180910390fd5b6060600267ffffffffffffffff81118015612ca057600080fd5b50604051908082528060200260200182016040528015612ccf5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110612d0257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110612d6c57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600082905081600181518110612db857fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1682600081518110612de357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614612f93576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b8152600401612e659291906147cd565b60006040518083038186803b158015612e7d57600080fd5b505afa158015612e91573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612eba919061386b565b905080600182510381518110612ecc57fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b8152600401612f3995949392919061484f565b600060405180830381600087803b158015612f5357600080fd5b505af1158015612f67573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612f90919061386b565b50505b6060600267ffffffffffffffff81118015612fad57600080fd5b50604051908082528060200260200182016040528015612fdc5781602001602082028036833780820191505090505b50905082600081518110612fec57fe5b60200260200101518160008151811061300157fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160018151811061306b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000849050816001815181106130b757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16826000815181106130e257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613292576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b81526004016131649291906147cd565b60006040518083038186803b15801561317c57600080fd5b505afa158015613190573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906131b9919061386b565b9050806001825103815181106131cb57fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b815260040161323895949392919061484f565b600060405180830381600087803b15801561325257600080fd5b505af1158015613266573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061328f919061386b565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e33700866001815181106132df57fe5b6020026020010151856001815181106132f457fe5b6020026020010151878660008030426040518963ffffffff1660e01b81526004016133269897969594939291906142c5565b606060405180830381600087803b15801561334057600080fd5b505af1158015613354573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133789190613927565b92505050809650505050505050919050565b600081116133cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133c490614589565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e54836040518363ffffffff1660e01b815260040161342c929190614826565b600060405180830381600087803b15801561344657600080fd5b505af115801561345a573d6000803e3d6000fd5b5050505050565b61347681600254612a9190919063ffffffff16565b6002819055506134ce81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612a9190919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161356f9190614789565b60405180910390a35050565b600080831182906135c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135b99190614507565b60405180910390fd5b5060008385816135ce57fe5b049050809150509392505050565b6000813590506135eb81614b28565b92915050565b600082601f83011261360257600080fd5b8151613615613610826148f5565b6148c4565b9150818183526020840193506020810190508385602084028201111561363a57600080fd5b60005b8381101561366a578161365088826136b3565b84526020840193506020830192505060018101905061363d565b5050505092915050565b60008151905061368381614b3f565b92915050565b60008135905061369881614b56565b92915050565b6000813590506136ad81614b6d565b92915050565b6000815190506136c281614b6d565b92915050565b6000813590506136d781614b84565b92915050565b6000602082840312156136ef57600080fd5b60006136fd848285016135dc565b91505092915050565b6000806040838503121561371957600080fd5b6000613727858286016135dc565b9250506020613738858286016135dc565b9150509250929050565b60008060006060848603121561375757600080fd5b6000613765868287016135dc565b9350506020613776868287016135dc565b92505060406137878682870161369e565b9150509250925092565b600080600080600080600060e0888a0312156137ac57600080fd5b60006137ba8a828b016135dc565b97505060206137cb8a828b016135dc565b96505060406137dc8a828b0161369e565b95505060606137ed8a828b0161369e565b94505060806137fe8a828b016136c8565b93505060a061380f8a828b01613689565b92505060c06138208a828b01613689565b91505092959891949750929550565b6000806040838503121561384257600080fd5b6000613850858286016135dc565b92505060206138618582860161369e565b9150509250929050565b60006020828403121561387d57600080fd5b600082015167ffffffffffffffff81111561389757600080fd5b6138a3848285016135f1565b91505092915050565b6000602082840312156138be57600080fd5b60006138cc84828501613674565b91505092915050565b6000602082840312156138e757600080fd5b60006138f58482850161369e565b91505092915050565b60006020828403121561391057600080fd5b600061391e848285016136b3565b91505092915050565b60008060006060848603121561393c57600080fd5b600061394a868287016136b3565b935050602061395b868287016136b3565b925050604061396c868287016136b3565b9150509250925092565b600080600080600060a0868803121561398e57600080fd5b600061399c8882890161369e565b95505060206139ad8882890161369e565b94505060406139be888289016136c8565b93505060606139cf88828901613689565b92505060806139e088828901613689565b9150509295509295909350565b60006139f98383613a14565b60208301905092915050565b613a0e81614a00565b82525050565b613a1d816149a1565b82525050565b613a2c816149a1565b82525050565b6000613a3d82614946565b613a478185614969565b9350613a5283614921565b8060005b83811015613a83578151613a6a88826139ed565b9750613a758361495c565b925050600181019050613a56565b5085935050505092915050565b613a99816149b3565b82525050565b613aa8816149bf565b82525050565b613abf613aba826149bf565b614b0b565b82525050565b600081546001811660008114613ae25760018114613b0757613b4b565b607f6002830416613af3818761497a565b955060ff1983168652808601935050613b4b565b60028204613b15818761497a565b9550613b2085614931565b60005b82811015613b4257815481890152600182019150602081019050613b23565b82880195505050505b505092915050565b613b5c81614a12565b82525050565b613b6b81614a36565b82525050565b613b7a81614a5a565b82525050565b613b8981614a7e565b82525050565b613b9881614aa2565b82525050565b6000613ba982614951565b613bb38185614985565b9350613bc3818560208601614ad8565b613bcc81614b17565b840191505092915050565b6000613be4602683614985565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613c4a600283614996565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000613c8a601b83614985565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b6000613cca602483614985565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613d30600e83614985565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b6000613d70601c83614985565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b6000613db0600f83614985565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b6000613df0601683614985565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b6000613e30601983614985565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b6000613e70602183614985565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613ed6602083614985565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000613f16601c83614985565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b6000613f56603483614985565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b6000613fbc601383614985565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b6000613ffc601283614985565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b600061403c600783614985565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b600061407c600e83614985565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006140bc600f83614985565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b60006140fc601e83614985565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b600061413c601883614985565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b614178816149e9565b82525050565b614187816149f3565b82525050565b60006141998284613ac5565b915081905092915050565b60006141af82613c3d565b91506141bb8285613aae565b6020820191506141cb8284613aae565b6020820191508190509392505050565b60006020820190506141f06000830184613a23565b92915050565b600060608201905061420b6000830186613a05565b6142186020830185613a23565b614225604083018461416f565b949350505050565b600060e082019050614242600083018a613a05565b61424f6020830189613a23565b61425c604083018861416f565b614269606083018761416f565b614276608083018661417e565b61428360a0830185613a9f565b61429060c0830184613a9f565b98975050505050505050565b60006040820190506142b16000830185613a05565b6142be602083018461416f565b9392505050565b6000610100820190506142db600083018b613a23565b6142e8602083018a613a23565b6142f5604083018961416f565b614302606083018861416f565b61430f6080830187613b8f565b61431c60a0830186613b8f565b61432960c0830185613a23565b61433660e083018461416f565b9998505050505050505050565b60006040820190506143586000830185613a23565b614365602083018461416f565b9392505050565b60006020820190506143816000830184613a90565b92915050565b600060208201905061439c6000830184613a9f565b92915050565b600060c0820190506143b76000830189613a9f565b6143c46020830188613a23565b6143d16040830187613a23565b6143de606083018661416f565b6143eb608083018561416f565b6143f860a083018461416f565b979650505050505050565b600060a0820190506144186000830188613a9f565b6144256020830187613a9f565b6144326040830186613a9f565b61443f606083018561416f565b61444c6080830184613a23565b9695505050505050565b600060808201905061446b6000830187613a9f565b614478602083018661417e565b6144856040830185613a9f565b6144926060830184613a9f565b95945050505050565b60006020820190506144b06000830184613b53565b92915050565b60006020820190506144cb6000830184613b62565b92915050565b60006020820190506144e66000830184613b71565b92915050565b60006020820190506145016000830184613b80565b92915050565b600060208201905081810360008301526145218184613b9e565b905092915050565b6000602082019050818103600083015261454281613bd7565b9050919050565b6000602082019050818103600083015261456281613c7d565b9050919050565b6000602082019050818103600083015261458281613cbd565b9050919050565b600060208201905081810360008301526145a281613d23565b9050919050565b600060208201905081810360008301526145c281613d63565b9050919050565b600060208201905081810360008301526145e281613da3565b9050919050565b6000602082019050818103600083015261460281613de3565b9050919050565b6000602082019050818103600083015261462281613e23565b9050919050565b6000602082019050818103600083015261464281613e63565b9050919050565b6000602082019050818103600083015261466281613ec9565b9050919050565b6000602082019050818103600083015261468281613f09565b9050919050565b600060208201905081810360008301526146a281613f49565b9050919050565b600060208201905081810360008301526146c281613faf565b9050919050565b600060208201905081810360008301526146e281613fef565b9050919050565b600060208201905081810360008301526147028161402f565b9050919050565b600060208201905081810360008301526147228161406f565b9050919050565b60006020820190508181036000830152614742816140af565b9050919050565b60006020820190508181036000830152614762816140ef565b9050919050565b600060208201905081810360008301526147828161412f565b9050919050565b600060208201905061479e600083018461416f565b92915050565b60006040820190506147b9600083018561416f565b6147c66020830184613a23565b9392505050565b60006040820190506147e2600083018561416f565b81810360208301526147f48184613a32565b90509392505050565b6000604082019050614812600083018561416f565b61481f6020830184613b8f565b9392505050565b600060408201905061483b600083018561416f565b614848602083018461416f565b9392505050565b600060a082019050614864600083018861416f565b614871602083018761416f565b81810360408301526148838186613a32565b90506148926060830185613a23565b61489f608083018461416f565b9695505050505050565b60006020820190506148be600083018461417e565b92915050565b6000604051905081810181811067ffffffffffffffff821117156148eb576148ea614b15565b5b8060405250919050565b600067ffffffffffffffff8211156149105761490f614b15565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006149ac826149c9565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614a0b82614ab4565b9050919050565b6000614a1d82614a24565b9050919050565b6000614a2f826149c9565b9050919050565b6000614a4182614a48565b9050919050565b6000614a53826149c9565b9050919050565b6000614a6582614a6c565b9050919050565b6000614a77826149c9565b9050919050565b6000614a8982614a90565b9050919050565b6000614a9b826149c9565b9050919050565b6000614aad826149e9565b9050919050565b6000614abf82614ac6565b9050919050565b6000614ad1826149c9565b9050919050565b60005b83811015614af6578082015181840152602081019050614adb565b83811115614b05576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b614b31816149a1565b8114614b3c57600080fd5b50565b614b48816149b3565b8114614b5357600080fd5b50565b614b5f816149bf565b8114614b6a57600080fd5b50565b614b76816149e9565b8114614b8157600080fd5b50565b614b8d816149f3565b8114614b9857600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220a6ed0483c1ac4b0e5117d5239b13fa3007c1573364eceeaa62d2fd2b6d2a020064736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "details": "Staking rewards accurue to contract on each deposit/withdrawal",
        "returns": {
          "_0": "Unclaimed rewards, plus contract balance"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of LP tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of LP tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getLPTokensForShares(uint256)": {
        "params": {
          "amount": "Snowball tokens"
        },
        "returns": {
          "_0": "LP tokens"
        }
      },
      "getSharesForLPTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of LP tokens",
        "params": {
          "amount": "LP tokens"
        },
        "returns": {
          "_0": "Snowball tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateReinvestReward(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of Snowball tokens to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "VERSION_HASH()": {
        "notice": "keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward token balance that can be reinvested"
      },
      "deposit(uint256)": {
        "notice": "Deposit LP tokens to receive Snowball tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit LP tokens to receive Snowball tokens"
      },
      "emergencyWithdraw()": {
        "notice": "Allows exit from Staking Contract without additional logic"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getLPTokensForShares(uint256)": {
        "notice": "Calculate LP tokens for a given amount of Snowball tokens"
      },
      "getSharesForLPTokens(uint256)": {
        "notice": "Calculate Snowball tokens for a given amount of LP tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest rewards from staking contract to LP tokens"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest minimum threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw LP tokens by redeeming Snowball tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 18,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 28,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 44,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2169,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 538,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 540,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRouter)2023"
      },
      {
        "astId": 542,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "lpToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPair)1643"
      },
      {
        "astId": 544,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "token0",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)1627"
      },
      {
        "astId": 546,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "token1",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1627"
      },
      {
        "astId": 548,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1627"
      },
      {
        "astId": 550,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "stakingContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(ISudoSu)2138"
      },
      {
        "astId": 552,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "PID",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 555,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 558,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 561,
        "contract": "contracts/SuStrategyV2.sol:SuStrategyV2",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1627": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)1643": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)2023": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_contract(ISudoSu)2138": {
        "encoding": "inplace",
        "label": "contract ISudoSu",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}