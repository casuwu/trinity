{
  "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairWavaxZap",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairCrvAvax",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct CurveStrategyForLPV1.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "enum CurveStrategyForLPV1.PoolType",
              "name": "poolType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "zapToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zapContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "zapTokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct CurveStrategyForLPV1.ZapSettings",
          "name": "_zapSettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "_calculateRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract ICurveRewardsGauge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "updateCrvAvaxSwapPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slippageBips",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
    "transactionIndex": 0,
    "gasUsed": "4572289",
    "logsBloom": "0x
    "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747",
    "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x1337BedC9D22ecbe766dF105c9623922A27963EC",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000056454e27580caeaffaa3ec25102218cd8d87feb2",
          "0x0000000000000000000000005b5cfe992adac0c9d48e05854b2d91c73a003858"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0xc7198437980c041c805A1EDcbA50c1Ce5db95118",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000056454e27580caeaffaa3ec25102218cd8d87feb2",
          "0x0000000000000000000000007f90122bf0700f9e7e1f688fe926940e8839f353"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 3,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 4,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 6,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x0000000000000000000000008d36c5c6947adccd25ef49ea1aac2ceacfff0bd7"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5972691,
        "transactionHash": "0x3a6ded0ae6712c30e4a50db093a6aaea7cc165a161464f758505c4139ef5d218",
        "address": "0x56454e27580caEAFFAA3EC25102218CD8d87fEB2",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0x408d37be28d514fb2dc20832f918d3a08c7a0ace6d588283b572cfbbf331d747"
      }
    ],
    "blockNumber": 5972691,
    "cumulativeGasUsed": "4572289",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Curve av3CRV",
    "0x1337BedC9D22ecbe766dF105c9623922A27963EC",
    "0x5B5CFE992AdAC0C9D48E05854B2d91C73a003858",
    "0xed8cbd9f0ce3c6986b22002f03c6475ceb7a6256",
    "0x4cf3e498e9f191332badef0b09314ef3d1075e4e",
    "0x8d36C5c6947ADCcd25Ef49Ea1aAC2ceACFff0bD7",
    {
      "minTokensToReinvest": "100000000000000",
      "adminFeeBips": 700,
      "devFeeBips": 0,
      "reinvestRewardBips": 100
    },
    {
      "poolType": 0,
      "zapToken": "0xc7198437980c041c805a1edcba50c1ce5db95118",
      "zapContract": "0x7f90122BF0700F9E7e1F688fe926940E8839F353",
      "zapTokenIndex": 2,
      "maxSlippage": 50
    }
  ],
  "solcInputHash": "38aa2b827f102604feae445a90576ade",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairWavaxZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairCrvAvax\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveStrategyForLPV1.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum CurveStrategyForLPV1.PoolType\",\"name\":\"poolType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"zapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"zapTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct CurveStrategyForLPV1.ZapSettings\",\"name\":\"_zapSettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"_calculateRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract ICurveRewardsGauge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"updateCrvAvaxSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippageBips\",\"type\":\"uint256\"}],\"name\":\"updateMaxSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"details\":\"Must mint receipt tokens to `msg.sender`\",\"params\":{\"amount\":\"deposit tokens\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Should revert for tokens without Permit\",\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit and deploy deposits tokens to the strategy\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimated deposit token balance deployed by strategy, excluding balance\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"notice\":\"Strategy for Curve LP\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/CurveStrategyForLPV1.sol\":\"CurveStrategyForLPV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9d569919319add1e8ee2020ad24e1cba09c67094b58a40f825522d1f7729de64\",\"license\":\"MIT\"},\"contracts/YakStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategy is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n    uint public totalDeposits;\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits);\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0xc8079f3ce38053872c911b875421b2218a1690136a5224e0e4ef7ca20e42f3ae\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveCryptoSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ICurveCryptoSwap {\\n    function calc_token_amount(uint256[5] memory _amounts, bool _is_deposit) external view returns(uint);\\n    function add_liquidity(uint256[5] memory _amounts, uint256 _min_mint_amount) external;\\n    function underlying_coins(uint index) external view returns(address);\\n}\",\"keccak256\":\"0xb59db837965909440040ba8472d40db5a3cd5d5fd7eb26ec96e922f6e67973d8\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveRewardsClaimer.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nlibrary DataTypes {\\n    struct RewardToken {\\n        address distributor;\\n        uint256 period_finish;\\n        uint256 rate;\\n        uint256 duration;\\n        uint256 received;\\n        uint256 paid;\\n    }\\n}\\n\\ninterface ICurveRewardsClaimer {\\n    function reward_data(address reward) external view returns(DataTypes.RewardToken memory);\\n    function last_update_time() external view returns(uint);\\n    function get_reward() external;\\n}\",\"keccak256\":\"0x9be5113cecc089ac2424e388d59e02d982e41078f713358c53eb053e9d114147\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveRewardsGauge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ICurveRewardsGauge {\\n    function deposit(uint256 _amount) external;\\n    function withdraw(uint256 _amount) external;\\n    function balanceOf(address _address) external view returns(uint);\\n    function totalSupply() external view returns(uint);\\n    function reward_contract() external view returns(address);\\n    function reward_tokens(uint token) external view returns(address);\\n    function reward_balances(address token) external view returns(uint);\\n    function reward_integral(address token) external view returns(uint);\\n    function reward_integral_for(address token, address user) external view returns(uint);\\n    function claimable_reward_write(address user, address token) external returns(uint);\\n    function claimable_reward(address user, address token) external view returns(uint);\\n    function claim_rewards() external;\\n    function claim_sig() external view returns(bytes memory);\\n}\",\"keccak256\":\"0xf481389520529fa61b627cceb8f5817dba275e5309aaace9b8722a026770850e\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveStableSwapAave.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface ICurveStableSwapAave {\\n    function calc_token_amount(uint256[3] memory _amounts, bool _is_deposit) external view returns(uint);\\n    function add_liquidity(uint256[3] memory _amounts, uint256 _min_mint_amount, bool _use_underlying) external returns(uint);\\n    function underlying_coins(uint index) external view returns(address);\\n}\",\"keccak256\":\"0x4fd0ecf498ea92d1d90d872d0398083e33135b343699e8682fbb2f863f10fe9b\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xffc66e7958e75c670c60c085052bcbdd23b794477bf483e805d23a6f25e5ca9d\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0xf32787e609bf7d28e7ea925b3d0f4b48d8f4ebde9a7fa41e3441756394eb393c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2b4fa4eb579d1a4dab58d5a1fadc1338e2a8313707b29ec447335b9b8f2b39dc\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0xf20805a7ca92edda58e5812cf5cfe20b0f2698bbd8215af57a00e04c27ca7e3f\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/CurveStrategyForLPV1.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../YakStrategy.sol\\\";\\nimport \\\"../interfaces/ICurveStableSwapAave.sol\\\";\\nimport \\\"../interfaces/ICurveCryptoSwap.sol\\\";\\nimport \\\"../interfaces/ICurveRewardsGauge.sol\\\";\\nimport \\\"../interfaces/ICurveRewardsClaimer.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\n\\n/**\\n * @notice Strategy for Curve LP\\n */\\ncontract CurveStrategyForLPV1 is YakStrategy {\\n    using SafeMath for uint256;\\n\\n    enum PoolType {\\n        AAVE,\\n        CRYPTO\\n    }\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 adminFeeBips;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    struct ZapSettings {\\n        PoolType poolType;\\n        address zapToken;\\n        address zapContract;\\n        uint256 zapTokenIndex;\\n        uint256 maxSlippage;\\n    }\\n\\n    ICurveRewardsGauge public stakingContract;\\n    IPair private swapPairWavaxZap;\\n    address private swapPairCrvAvax = address(0);\\n    function(uint256) internal returns (uint256) _zapToDepositToken;\\n    address private constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address private constant CRV = 0x249848BeCA43aC405b8102Ec90Dd5F22CA513c06;\\n    ZapSettings private zapSettings;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _stakingContract,\\n        address _swapPairWavaxZap,\\n        address _swapPairCrvAvax,\\n        address _timelock,\\n        StrategySettings memory _strategySettings,\\n        ZapSettings memory _zapSettings\\n    ) {\\n        name = _name;\\n        devAddr = msg.sender;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(WAVAX);\\n        stakingContract = ICurveRewardsGauge(_stakingContract);\\n\\n        swapPairCrvAvax = _swapPairCrvAvax;\\n        require(\\n            _swapPairWavaxZap > address(0),\\n            \\\"Swap pair 0 is necessary but not supplied\\\"\\n        );\\n        require(\\n            IPair(_swapPairWavaxZap).token0() == _zapSettings.zapToken ||\\n                IPair(_swapPairWavaxZap).token1() == _zapSettings.zapToken,\\n            \\\"Swap pair supplied does not have the reward token as one of it's pair\\\"\\n        );\\n        swapPairWavaxZap = IPair(_swapPairWavaxZap);\\n        if (_zapSettings.poolType == PoolType.AAVE) {\\n            require(\\n                _zapSettings.zapToken ==\\n                    ICurveStableSwapAave(_zapSettings.zapContract).underlying_coins(\\n                        _zapSettings.zapTokenIndex\\n                    ),\\n                \\\"Wrong zap token index\\\"\\n            );\\n            _zapToDepositToken = _zapToAaveLP;\\n        } else if (_zapSettings.poolType == PoolType.CRYPTO) {\\n            require(\\n                _zapSettings.zapToken ==\\n                    ICurveCryptoSwap(_zapSettings.zapContract).underlying_coins(\\n                        _zapSettings.zapTokenIndex\\n                    ),\\n                \\\"Wrong zap token index\\\"\\n            );\\n            _zapToDepositToken = _zapToCryptoLP;\\n        }\\n        zapSettings = _zapSettings;\\n\\n        setAllowances();\\n        updateMaxSwapSlippage(_zapSettings.maxSlippage);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateAdminFee(_strategySettings.adminFeeBips);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function setAllowances() public override onlyOwner {\\n        depositToken.approve(address(stakingContract), type(uint256).max);\\n        IERC20(zapSettings.zapToken).approve(zapSettings.zapContract, type(uint256).max);\\n    }\\n\\n    function updateCrvAvaxSwapPair(address swapPair) public onlyDev {\\n        swapPairCrvAvax = swapPair;\\n    }\\n\\n    function updateMaxSwapSlippage(uint256 slippageBips) public onlyDev {\\n        zapSettings.maxSlippage = slippageBips;\\n    }\\n\\n    function _zapToAaveLP(uint256 amount) private returns (uint256) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            amount,\\n            WAVAX,\\n            zapSettings.zapToken,\\n            swapPairWavaxZap\\n        );\\n        uint256[3] memory amounts = [uint256(0), uint256(0), uint256(0)];\\n        amounts[zapSettings.zapTokenIndex] = zapTokenAmount;\\n        uint256 expectedAmount = ICurveStableSwapAave(zapSettings.zapContract)\\n            .calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        return\\n            ICurveStableSwapAave(zapSettings.zapContract).add_liquidity(\\n                amounts,\\n                expectedAmount.sub(slippage),\\n                true\\n            );\\n    }\\n\\n    function _zapToCryptoLP(uint256 amount) private returns (uint256) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            amount,\\n            WAVAX,\\n            zapSettings.zapToken,\\n            swapPairWavaxZap\\n        );\\n        uint256[5] memory amounts = [\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0),\\n            uint256(0)\\n        ];\\n        amounts[zapSettings.zapTokenIndex] = zapTokenAmount;\\n        uint256 expectedAmount = ICurveCryptoSwap(zapSettings.zapContract)\\n            .calc_token_amount(amounts, true);\\n        uint256 slippage = expectedAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        ICurveCryptoSwap(zapSettings.zapContract).add_liquidity(\\n            amounts,\\n            expectedAmount.sub(slippage)\\n        );\\n        return depositToken.balanceOf(address(this));\\n    }\\n\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) private onlyAllowedDeposits {\\n        require(DEPOSITS_ENABLED == true, \\\"CurveStrategyForAv3CRVV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (uint256 pendingAvaxRewards, uint256 pendingCrvRewards) = _claimRewards();\\n            uint256 unclaimedRewards = _estimateRewardConvertedToAvax(\\n                pendingAvaxRewards,\\n                pendingCrvRewards\\n            );\\n            if (unclaimedRewards > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(pendingAvaxRewards, pendingCrvRewards);\\n            }\\n        }\\n        require(depositToken.transferFrom(msg.sender, address(this), amount));\\n        _stakeDepositTokens(amount);\\n        _mint(account, getSharesForDepositTokens(amount));\\n        totalDeposits = totalDeposits.add(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        if (depositTokenAmount > 0) {\\n            _withdrawDepositTokens(depositTokenAmount);\\n            _safeTransfer(address(depositToken), msg.sender, depositTokenAmount);\\n            _burn(msg.sender, amount);\\n            totalDeposits = totalDeposits.sub(depositTokenAmount);\\n            emit Withdraw(msg.sender, depositTokenAmount);\\n        }\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"CurveStrategyForAv3CRVV1::_withdrawDepositTokens\\\");\\n        stakingContract.withdraw(amount);\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        (uint256 avaxAmount, uint256 crvAmount) = _claimRewards();\\n        uint256 unclaimedRewards = _estimateRewardConvertedToAvax(avaxAmount, crvAmount);\\n        require(\\n            unclaimedRewards >= MIN_TOKENS_TO_REINVEST,\\n            \\\"CurveStrategyForAv3CRVV1::reinvest\\\"\\n        );\\n        _reinvest(avaxAmount, crvAmount);\\n    }\\n\\n    function _claimRewards() private returns (uint256 _avaxAmount, uint256 _crvAmount) {\\n        ICurveRewardsClaimer(stakingContract.reward_contract()).get_reward();\\n        stakingContract.claim_rewards();\\n        uint256 avaxAmount = IERC20(WAVAX).balanceOf(address(this));\\n        uint256 crvAmount = IERC20(CRV).balanceOf(address(this));\\n        return (avaxAmount, crvAmount);\\n    }\\n\\n    function _estimateRewardConvertedToAvax(uint256 avaxAmount, uint256 crvAmount)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        uint256 estimatedWAVAX = 0;\\n        if (swapPairCrvAvax > address(0)) {\\n            estimatedWAVAX = DexLibrary.estimateConversionThroughPair(\\n                crvAmount,\\n                address(CRV),\\n                address(WAVAX),\\n                IPair(swapPairCrvAvax)\\n            );\\n        }\\n        return avaxAmount.add(estimatedWAVAX);\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `stableSwap`\\n     */\\n    function _reinvest(uint256 avaxAmount, uint256 crvAmount) private {\\n        uint256 amount = avaxAmount.add(_convertRewardIntoWAVAX(crvAmount));\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (adminFee > 0) {\\n            _safeTransfer(address(rewardToken), owner(), adminFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _zapToDepositToken(\\n            amount.sub(devFee).sub(adminFee).sub(reinvestFee)\\n        );\\n\\n        _stakeDepositTokens(depositTokenAmount);\\n        totalDeposits = totalDeposits.add(depositTokenAmount);\\n\\n        emit Reinvest(totalDeposits, totalSupply);\\n    }\\n\\n    function _convertRewardIntoWAVAX(uint256 crvAmount) private returns (uint256) {\\n        if (swapPairCrvAvax > address(0)) {\\n            return\\n                DexLibrary.swap(\\n                    crvAmount,\\n                    address(CRV),\\n                    address(WAVAX),\\n                    IPair(swapPairCrvAvax)\\n                );\\n        }\\n        return 0;\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"CurveStrategyForAv3CRVV1::_stakeDepositTokens\\\");\\n        stakingContract.deposit(amount);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymosu ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(\\n            IERC20(token).transfer(to, value),\\n            \\\"CurveStrategyForAv3CRVV1::TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        uint256 pendingAvaxRewards = _calculateRewards(WAVAX);\\n        uint256 pendingCrvRewards = _calculateRewards(CRV);\\n\\n        return _estimateRewardConvertedToAvax(pendingAvaxRewards, pendingCrvRewards);\\n    }\\n\\n    function _calculateRewards(address _rewardToken) public view returns (uint256) {\\n        uint256 strategyLpDeposits = stakingContract.balanceOf(address(this));\\n        uint256 lastRewardUpdateTime = ICurveRewardsClaimer(\\n            stakingContract.reward_contract()\\n        ).last_update_time();\\n        DataTypes.RewardToken memory rewardToken = ICurveRewardsClaimer(\\n            stakingContract.reward_contract()\\n        ).reward_data(_rewardToken);\\n\\n        uint256 gaugeBalance = IERC20(_rewardToken).balanceOf(address(stakingContract));\\n        uint256 unclaimedTotal = (block.timestamp - lastRewardUpdateTime) *\\n            rewardToken.rate;\\n        uint256 tokenBalance = gaugeBalance.add(unclaimedTotal);\\n\\n        uint256 dI = uint256(10e18)\\n            .mul(tokenBalance.sub(stakingContract.reward_balances(_rewardToken)))\\n            .div(stakingContract.totalSupply());\\n        uint256 integral = stakingContract.reward_integral(_rewardToken) + dI;\\n        uint256 integralFor = stakingContract.reward_integral_for(\\n            _rewardToken,\\n            address(this)\\n        );\\n\\n        uint256 strategyUnclaimed = 0;\\n        if (integralFor < integral) {\\n            strategyUnclaimed = strategyLpDeposits.mul(integral.sub(integralFor)).div(\\n                10e18\\n            );\\n        }\\n        uint256 strategyClaimed = stakingContract.claimable_reward(\\n            address(this),\\n            _rewardToken\\n        );\\n        return strategyClaimed.add(strategyUnclaimed);\\n    }\\n\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        return stakingContract.balanceOf(address(this));\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        stakingContract.withdraw(stakingContract.balanceOf(address(this)));\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"CurveStrategyForAv3CRVV1::rescueDeployedFunds\\\"\\n        );\\n        totalDeposits = balanceAfter;\\n        emit Reinvest(totalDeposits, totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3ed46ba30fda76f2d36d6bbd418d36d74b25747ce2a12829178fbd458677c0dc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c80638b73e606116101de578063c4b24a461161010f578063dd8ce4d6116100ad578063ee99205c1161007c578063ee99205c146106d9578063f2fde38b146106e1578063f7c618c1146106f4578063fdb5a03e146106fc5761038e565b8063dd8ce4d614610698578063e21ac825146106ab578063eab89a5a146106be578063ed24911d146106d15761038e565b8063d505accf116100e9578063d505accf14610662578063da09c72c14610675578063dbd9a4d41461067d578063dd62ed3e146106855761038e565b8063c4b24a461461063f578063c89039c514610647578063cff1b6ef1461064f5761038e565b8063a9059cbb1161017c578063b52a321f11610156578063b52a321f14610614578063b6b55f251461061c578063b9e57b801461062f578063bd079f55146106375761038e565b8063a9059cbb146105db578063abff1963146105ee578063ac0d31ff146106015761038e565b806395d89b41116101b857806395d89b41146105a557806399729ec1146105ad5780639e4e7318146105c0578063a8ae2b7c146105c85761038e565b80638b73e6061461056a5780638da5cb5b1461057d5780639291d563146105925761038e565b80634a970be7116102c3578063715018a6116102615780637ecebe00116102305780637ecebe0014610529578063818372301461053c5780638980f11f1461054f5780638aff733d146105625761038e565b8063715018a6146104fe578063789139bc146105065780637ae267731461050e5780637d882097146105215761038e565b80634ebb79161161029d5780634ebb7916146104bd5780635ea682ea146104d05780636687039c146104d857806370a08231146104eb5761038e565b80634a970be7146104845780634bebd1e7146104975780634e77ace5146104aa5761038e565b806323b872dd1161033057806330adf81f1161030a57806330adf81f1461044c578063313ce567146104545780633bdc6e7214610469578063483c2ef0146104715761038e565b806323b872dd146104135780632e1a7d4d146104265780632f4f21e2146104395761038e565b80630f23475d1161036c5780630f23475d146103e657806318160ddd146103ee57806320606b70146103f6578063231f9a04146103fe5761038e565b806306fdde031461039357806307677111146103b1578063095ea7b3146103c6575b600080fd5b61039b610704565b6040516103a89190613f3e565b60405180910390f35b6103b9610792565b6040516103a89190613eb7565b6103d96103d4366004613a89565b610798565b6040516103a89190613eac565b6103b96107af565b6103b9610836565b6103b961083c565b61041161040c36600461396c565b610860565b005b6103d96104213660046139dc565b6108c2565b610411610434366004613bb6565b6109a9565b610411610447366004613a89565b610a35565b6103b9610a3f565b61045c610a63565b6040516103a89190614631565b6103b9610a68565b6103d961047f36600461396c565b610a6e565b610411610492366004613c0a565b610a83565b6104116104a536600461396c565b610b1b565b6104116104b8366004613ab4565b610bff565b6104116104cb366004613bb6565b610c9d565b6103b9610d49565b6103b96104e636600461396c565b610d4f565b6103b96104f936600461396c565b6113de565b6104116113f9565b6103b961148f565b61041161051c3660046139a4565b611495565b6103b961155e565b6103b961053736600461396c565b611564565b61041161054a366004613bb6565b611576565b61041161055d366004613a89565b6115f5565b6103b9611707565b61041161057836600461396c565b61170d565b610585611813565b6040516103a89190613d87565b6104116105a036600461396c565b611822565b61039b6118c2565b6104116105bb366004613bb6565b61191c565b6103b96119ca565b6104116105d6366004613bb6565b6119ee565b6103d96105e9366004613a89565b611a96565b6104116105fc366004613bb6565b611aa3565b61041161060f366004613be6565b611ad2565b6103d9611d86565b61041161062a366004613bb6565b611d8f565b6103b9611d9c565b6103b9611ddd565b6103b9611de3565b610585611e37565b61041161065d366004613bb6565b611e46565b610411610670366004613a1c565b611eee565b610585611fa3565b610411611fb2565b6103b96106933660046139a4565b61210b565b6103b96106a6366004613bb6565b612136565b6104116106b9366004613bb6565b612175565b6103b96106cc366004613bb6565b6121f4565b6103b9612234565b6105856122cb565b6104116106ef36600461396c565b6122da565b6105856123a8565b6104116123b7565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561078a5780601f1061075f5761010080835404028352916020019161078a565b820191906000526020600020905b81548152906001019060200180831161076d57829003601f168201915b505050505081565b60115481565b60006107a5338484612a9e565b5060015b92915050565b6013546040516370a0823160e01b81526000916001600160a01b0316906370a08231906107e0903090600401613d87565b60206040518083038186803b1580156107f857600080fd5b505afa15801561080c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108309190613bce565b90505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600c546001600160a01b031633146108935760405162461bcd60e51b815260040161088a9061443b565b60405180910390fd5b6015805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0383166000818152600360209081526040808320338085529252822054919290919082148015906108fc57506000198114155b15610992576000610928856040518060600160405280602f815260200161468a602f9139849190612b52565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610988908590613eb7565b60405180910390a3505b61099d868686612b7e565b50600195945050505050565b60006109b4826121f4565b90508015610a31576109c581612c62565b600a546109dc906001600160a01b03163383612cf9565b6109e63383612d95565b6009546109f39082612a37565b60095560405133907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436490610a28908490613eb7565b60405180910390a25b5050565b610a318282612e6f565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b600a546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610ad890339030908a908a908a908a908a90600401613dbf565b600060405180830381600087803b158015610af257600080fd5b505af1158015610b06573d6000803e3d6000fd5b50505050610b143386612e6f565b5050505050565b610b2361301d565b6001600160a01b0316610b34611813565b6001600160a01b031614610b5a5760405162461bcd60e51b815260040161088a90614315565b6001600160a01b03811660009081526008602052604090205460ff1615610b935760405162461bcd60e51b815260040161088a90614190565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610bc591612a79565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610c0761301d565b6001600160a01b0316610c18611813565b6001600160a01b031614610c3e5760405162461bcd60e51b815260040161088a90614315565b600f5460ff1615158115151415610c5457600080fd5b600f805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610c92908390613eac565b60405180910390a150565b610ca561301d565b6001600160a01b0316610cb6611813565b6001600160a01b031614610cdc5760405162461bcd60e51b815260040161088a90614315565b60008111610ce957600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610d16573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610c92929190613e00565b60125481565b6013546040516370a0823160e01b815260009182916001600160a01b03909116906370a0823190610d84903090600401613d87565b60206040518083038186803b158015610d9c57600080fd5b505afa158015610db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd49190613bce565b90506000601360009054906101000a90046001600160a01b03166001600160a01b031663bf88a6ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e2657600080fd5b505afa158015610e3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5e9190613988565b6001600160a01b031663629d46c26040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9657600080fd5b505afa158015610eaa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ece9190613bce565b9050610ed86138c0565b601360009054906101000a90046001600160a01b03166001600160a01b031663bf88a6ff6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2657600080fd5b505afa158015610f3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5e9190613988565b6001600160a01b03166348e9c65e866040518263ffffffff1660e01b8152600401610f899190613d87565b60c06040518083038186803b158015610fa157600080fd5b505afa158015610fb5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd99190613aec565b6013546040516370a0823160e01b81529192506000916001600160a01b03888116926370a08231926110119290911690600401613d87565b60206040518083038186803b15801561102957600080fd5b505afa15801561103d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110619190613bce565b60408301519091504284900302600061107a8383612a79565b905060006111ba601360009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110cf57600080fd5b505afa1580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190613bce565b6111b46111a5601360009054906101000a90046001600160a01b03166001600160a01b031663fe9e21788e6040518263ffffffff1660e01b815260040161114e9190613d87565b60206040518083038186803b15801561116657600080fd5b505afa15801561117a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119e9190613bce565b8690612a37565b678ac7230489e80000906129b4565b906129f5565b6013546040517f73861fb300000000000000000000000000000000000000000000000000000000815291925060009183916001600160a01b0316906373861fb390611209908e90600401613d87565b60206040518083038186803b15801561122157600080fd5b505afa158015611235573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112599190613bce565b6013546040517ff05cc0580000000000000000000000000000000000000000000000000000000081529190920192506000916001600160a01b03169063f05cc058906112ab908e903090600401613e19565b60206040518083038186803b1580156112c357600080fd5b505afa1580156112d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fb9190613bce565b905060008282101561132a57611327678ac7230489e800006111b46113208686612a37565b8d906129b4565b90505b6000601360009054906101000a90046001600160a01b03166001600160a01b03166333fd6f74308f6040518363ffffffff1660e01b815260040161136f929190613e19565b60206040518083038186803b15801561138757600080fd5b505afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190613bce565b90506113cb8183612a79565b9b5050505050505050505050505b919050565b6001600160a01b031660009081526004602052604090205490565b61140161301d565b6001600160a01b0316611412611813565b6001600160a01b0316146114385760405162461bcd60e51b815260040161088a90614315565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600e5481565b61149d61301d565b6001600160a01b03166114ae611813565b6001600160a01b0316146114d45760405162461bcd60e51b815260040161088a90614315565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390611503908490600090600401613e00565b602060405180830381600087803b15801561151d57600080fd5b505af1158015611531573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115559190613ad0565b610a3157600080fd5b60095481565b60056020526000908152604090205481565b61157e61301d565b6001600160a01b031661158f611813565b6001600160a01b0316146115b55760405162461bcd60e51b815260040161088a90614315565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600d54826040516115e89291906145f5565b60405180910390a1600d55565b6115fd61301d565b6001600160a01b031661160e611813565b6001600160a01b0316146116345760405162461bcd60e51b815260040161088a90614315565b6000811161164157600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb9061166f9033908590600401613e00565b602060405180830381600087803b15801561168957600080fd5b505af115801561169d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c19190613ad0565b6116ca57600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516116fb929190613e00565b60405180910390a15050565b60105481565b61171561301d565b6001600160a01b0316611726611813565b6001600160a01b03161461174c5760405162461bcd60e51b815260040161088a90614315565b60006007541161176e5760405162461bcd60e51b815260040161088a906140d6565b6001600160a01b03811660009081526008602052604090205460ff1615156001146117ab5760405162461bcd60e51b815260040161088a906141fe565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546117d9906001612a37565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600c546001600160a01b0316331461184c5760405162461bcd60e51b815260040161088a9061443b565b600c546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009161188b916001600160a01b03909116908490613e19565b60405180910390a1600c805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561078a5780601f1061075f5761010080835404028352916020019161078a565b61192461301d565b6001600160a01b0316611935611813565b6001600160a01b03161461195b5760405162461bcd60e51b815260040161088a90614315565b61271061197f60105461197960115485612a7990919063ffffffff16565b90612a79565b111561198a57600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131601254826040516119bd9291906145f5565b60405180910390a1601255565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6119f661301d565b6001600160a01b0316611a07611813565b6001600160a01b031614611a2d5760405162461bcd60e51b815260040161088a90614315565b612710611a4b60125461197960115485612a7990919063ffffffff16565b1115611a5657600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f260105482604051611a899291906145f5565b60405180910390a1601055565b60006107a5338484612b7e565b600c546001600160a01b03163314611acd5760405162461bcd60e51b815260040161088a9061443b565b601955565b611ada61301d565b6001600160a01b0316611aeb611813565b6001600160a01b031614611b115760405162461bcd60e51b815260040161088a90614315565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b42903090600401613d87565b60206040518083038186803b158015611b5a57600080fd5b505afa158015611b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b929190613bce565b6013546040516370a0823160e01b81529192506001600160a01b031690632e1a7d4d9082906370a0823190611bcb903090600401613d87565b60206040518083038186803b158015611be357600080fd5b505afa158015611bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c1b9190613bce565b6040518263ffffffff1660e01b8152600401611c379190613eb7565b600060405180830381600087803b158015611c5157600080fd5b505af1158015611c65573d6000803e3d6000fd5b5050600a546040516370a0823160e01b8152600093506001600160a01b0390911691506370a0823190611c9c903090600401613d87565b60206040518083038186803b158015611cb457600080fd5b505afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190613bce565b905083611cf98284612a37565b1015611d175760405162461bcd60e51b815260040161088a90614472565b60098190556002546040517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23491611d50918491906145f5565b60405180910390a1600f5460ff1615156001148015611d7157506001831515145b15611d8057611d806000610bff565b50505050565b600f5460ff1681565b611d993382612e6f565b50565b600080611da7611de3565b9050600d548110611dd557611dcd6127106111b4601054846129b490919063ffffffff16565b915050610833565b600091505090565b600d5481565b600080611e0373b31f66aa3c1e785363f0875a1b74e27b85fd66c7610d4f565b90506000611e2473249848beca43ac405b8102ec90dd5f22ca513c06610d4f565b9050611e308282613021565b9250505090565b600a546001600160a01b031681565b611e4e61301d565b6001600160a01b0316611e5f611813565b6001600160a01b031614611e855760405162461bcd60e51b815260040161088a90614315565b612710611ea360105461197960125485612a7990919063ffffffff16565b1115611eae57600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60115482604051611ee19291906145f5565b60405180910390a1601155565b42841015611f0e5760405162461bcd60e51b815260040161088a906141c7565b6001600160a01b03871660009081526005602090815260408083208054600181019091559051611f69927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101613ec0565b604051602081830303815290604052805190602001209050611f8e888286868661308f565b611f99888888612a9e565b5050505050505050565b600c546001600160a01b031681565b611fba61301d565b6001600160a01b0316611fcb611813565b6001600160a01b031614611ff15760405162461bcd60e51b815260040161088a90614315565b600a5460135460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926120299291169060001990600401613e00565b602060405180830381600087803b15801561204357600080fd5b505af1158015612057573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061207b9190613ad0565b5060165460175460405163095ea7b360e01b81526001600160a01b0361010090930483169263095ea7b3926120b99291169060001990600401613e00565b602060405180830381600087803b1580156120d357600080fd5b505af11580156120e7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d999190613ad0565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061214f6009546002546129b490919063ffffffff16565b61215a5750806113d9565b6107a96009546111b4600254856129b490919063ffffffff16565b61217d61301d565b6001600160a01b031661218e611813565b6001600160a01b0316146121b45760405162461bcd60e51b815260040161088a90614315565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600e54826040516121e79291906145f5565b60405180910390a1600e55565b600061220d6009546002546129b490919063ffffffff16565b612219575060006113d9565b6107a96002546111b4600954856129b490919063ffffffff16565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b60006040516122699190613ce1565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661229b613165565b306040516020016122b0959493929190613ef4565b60405160208183030381529060405280519060200120905090565b6013546001600160a01b031681565b6122e261301d565b6001600160a01b03166122f3611813565b6001600160a01b0316146123195760405162461bcd60e51b815260040161088a90614315565b6001600160a01b03811661233f5760405162461bcd60e51b815260040161088a90613f51565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600b546001600160a01b031681565b3233146123d65760405162461bcd60e51b815260040161088a90613fae565b6000806123e1613169565b9150915060006123f18383613021565b9050600d548110156124155760405162461bcd60e51b815260040161088a90613fe5565b61241f83836133ce565b505050565b601654601454600091829161246291859173b31f66aa3c1e785363f0875a1b74e27b85fd66c7916001600160a01b0361010090910481169116612813565b905061246c6138ff565b604051806060016040528060008152602001600081526020016000815250905081816016600201546003811061249e57fe5b60200201526017546040517f3883e1190000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690633883e119906124f0908590600190600401613e33565b60206040518083038186803b15801561250857600080fd5b505afa15801561251c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125409190613bce565b905060006125626127106111b4601660030154856129b490919063ffffffff16565b6017549091506001600160a01b0316632b6e993a846125818585612a37565b60016040518463ffffffff1660e01b81526004016125a193929190613e50565b602060405180830381600087803b1580156125bb57600080fd5b505af11580156125cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125f39190613bce565b9695505050505050565b601654601454600091829161263b91859173b31f66aa3c1e785363f0875a1b74e27b85fd66c7916001600160a01b0361010090910481169116612813565b905061264561391d565b6040518060a00160405280600081526020016000815260200160008152602001600081526020016000815250905081816016600201546005811061268557fe5b60200201526017546040517f7ede89c50000000000000000000000000000000000000000000000000000000081526000916001600160a01b031690637ede89c5906126d7908590600190600401613e74565b60206040518083038186803b1580156126ef57600080fd5b505afa158015612703573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127279190613bce565b905060006127496127106111b4601660030154856129b490919063ffffffff16565b6017549091506001600160a01b03166384738499846127688585612a37565b6040518363ffffffff1660e01b8152600401612785929190613e91565b600060405180830381600087803b15801561279f57600080fd5b505af11580156127b3573d6000803e3d6000fd5b5050600a546040516370a0823160e01b81526001600160a01b0390911692506370a0823191506127e7903090600401613d87565b60206040518083038186803b1580156127ff57600080fd5b505afa1580156125cf573d6000803e3d6000fd5b6000806128208585613548565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561285f57600080fd5b505afa158015612873573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128979190613b68565b5091509150866001600160a01b0316836001600160a01b0316146128b757905b6000806128e58a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613579565b9050886001600160a01b0316856001600160a01b03161461290257905b61290d89888c6135c1565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f906129659085908590309060248101614603565b600060405180830381600087803b15801561297f57600080fd5b505af1158015612993573d6000803e3d6000fd5b505050508181116129a457816129a6565b805b9a9950505050505050505050565b6000826129c3575060006107a9565b828202828482816129d057fe5b04146129ee5760405162461bcd60e51b815260040161088a906142b8565b9392505050565b60006129ee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061365d565b60006129ee83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612b52565b6000828201838110156129ee5760405162461bcd60e51b815260040161088a90614042565b6001600160a01b038316612ac45760405162461bcd60e51b815260040161088a906143a7565b6001600160a01b038216612aea5760405162461bcd60e51b815260040161088a9061452c565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590612b45908590613eb7565b60405180910390a3505050565b60008184841115612b765760405162461bcd60e51b815260040161088a9190613f3e565b505050900390565b6001600160a01b038216612ba45760405162461bcd60e51b815260040161088a906143de565b612be1816040518060600160405280602e81526020016146e0602e91396001600160a01b0386166000908152600460205260409020549190612b52565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612c109082612a79565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612b45908590613eb7565b60008111612c825760405162461bcd60e51b815260040161088a906144cf565b6013546040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632e1a7d4d90612ccb908490600401613eb7565b600060405180830381600087803b158015612ce557600080fd5b505af1158015610b14573d6000803e3d6000fd5b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90612d279085908590600401613e00565b602060405180830381600087803b158015612d4157600080fd5b505af1158015612d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d799190613ad0565b61241f5760405162461bcd60e51b815260040161088a9061434a565b612dd2816040518060600160405280602781526020016146b9602791396001600160a01b0385166000908152600460205260409020549190612b52565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612e2281604051806060016040528060278152602001614663602791396002549190612b52565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612e63908590613eb7565b60405180910390a35050565b60075415612eab573360009081526008602052604090205460ff161515600114612eab5760405162461bcd60e51b815260040161088a90614079565b600f5460ff161515600114612ed25760405162461bcd60e51b815260040161088a90614563565b600e5415612f0f57600080612ee5613169565b915091506000612ef58383613021565b9050600e54811115612f0b57612f0b83836133ce565b5050505b600a546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd90612f5c90339030908690600401613d9b565b602060405180830381600087803b158015612f7657600080fd5b505af1158015612f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fae9190613ad0565b612fb757600080fd5b612fc081613694565b612fd282612fcd83612136565b6136fd565b600954612fdf9082612a79565b6009556040516001600160a01b038316907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90610a28908490613eb7565b3390565b60155460009081906001600160a01b03161561307d5760155461307a90849073249848beca43ac405b8102ec90dd5f22ca513c069073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906001600160a01b031661377f565b90505b6130878482612a79565b949350505050565b6000613099612234565b856040516020016130ab929190613d51565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516130e89493929190613f20565b6020604051602081039080840390855afa15801561310a573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906131405750866001600160a01b0316816001600160a01b0316145b61315c5760405162461bcd60e51b815260040161088a90614133565b50505050505050565b4690565b600080601360009054906101000a90046001600160a01b03166001600160a01b031663bf88a6ff6040518163ffffffff1660e01b815260040160206040518083038186803b1580156131ba57600080fd5b505afa1580156131ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f29190613988565b6001600160a01b0316631afe22a66040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561322c57600080fd5b505af1158015613240573d6000803e3d6000fd5b50505050601360009054906101000a90046001600160a01b03166001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561329457600080fd5b505af11580156132a8573d6000803e3d6000fd5b50506040516370a0823160e01b81526000925073b31f66aa3c1e785363f0875a1b74e27b85fd66c791506370a08231906132e6903090600401613d87565b60206040518083038186803b1580156132fe57600080fd5b505afa158015613312573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133369190613bce565b6040516370a0823160e01b815290915060009073249848beca43ac405b8102ec90dd5f22ca513c06906370a0823190613373903090600401613d87565b60206040518083038186803b15801561338b57600080fd5b505afa15801561339f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133c39190613bce565b919350909150509091565b60006133e36133dc8361385a565b8490612a79565b905060006134026127106111b4601254856129b490919063ffffffff16565b9050801561342757600b54600c54613427916001600160a01b03908116911683612cf9565b60006134446127106111b4601154866129b490919063ffffffff16565b9050801561346a57600b5461346a906001600160a01b0316613464611813565b83612cf9565b60006134876127106111b4601054876129b490919063ffffffff16565b905080156134a657600b546134a6906001600160a01b03163383612cf9565b60006134e76134c1836134bb86818a8a612a37565b90612a37565b601560149054906101000a9004801561393b021767ffffffffffffffff1663ffffffff16565b90506134f281613694565b6009546134ff9082612a79565b60098190556002546040517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234926135379290916145f5565b60405180910390a150505050505050565b600080826001600160a01b0316846001600160a01b03161061356b57828461356e565b83835b915091509250929050565b600080613588856103e56129b4565b9050600061359682856129b4565b905060006135aa83611979886103e86129b4565b90506135b682826129f5565b979650505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906135ef9085908590600401613e00565b602060405180830381600087803b15801561360957600080fd5b505af115801561361d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136419190613ad0565b61241f5760405162461bcd60e51b815260040161088a906145c0565b6000818361367e5760405162461bcd60e51b815260040161088a9190613f3e565b50600083858161368a57fe5b0495945050505050565b600081116136b45760405162461bcd60e51b815260040161088a9061425b565b6013546040517fb6b55f250000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063b6b55f2590612ccb908490600401613eb7565b60025461370a9082612a79565b6002556001600160a01b0382166000908152600460205260409020546137309082612a79565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90612e63908590613eb7565b60008061378c8585613548565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156137cb57600080fd5b505afa1580156137df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138039190613b68565b5091509150866001600160a01b0316836001600160a01b03161461382357905b61384e88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613579565b98975050505050505050565b6015546000906001600160a01b0316156138b8576015546138b190839073249848beca43ac405b8102ec90dd5f22ca513c069073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906001600160a01b0316612813565b90506113d9565b506000919050565b6040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b60405180606001604052806003906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565bfe5b80516dffffffffffffffffffffffffffff811681146113d957600080fd5b803560ff811681146113d957600080fd5b60006020828403121561397d578081fd5b81356129ee8161463f565b600060208284031215613999578081fd5b81516129ee8161463f565b600080604083850312156139b6578081fd5b82356139c18161463f565b915060208301356139d18161463f565b809150509250929050565b6000806000606084860312156139f0578081fd5b83356139fb8161463f565b92506020840135613a0b8161463f565b929592945050506040919091013590565b600080600080600080600060e0888a031215613a36578283fd5b8735613a418161463f565b96506020880135613a518161463f565b95506040880135945060608801359350613a6d6080890161395b565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613a9b578182fd5b8235613aa68161463f565b946020939093013593505050565b600060208284031215613ac5578081fd5b81356129ee81614654565b600060208284031215613ae1578081fd5b81516129ee81614654565b600060c08284031215613afd578081fd5b60405160c0810181811067ffffffffffffffff82111715613b1a57fe5b6040528251613b288161463f565b808252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b600080600060608486031215613b7c578283fd5b613b858461393d565b9250613b936020850161393d565b9150604084015163ffffffff81168114613bab578182fd5b809150509250925092565b600060208284031215613bc7578081fd5b5035919050565b600060208284031215613bdf578081fd5b5051919050565b60008060408385031215613bf8578182fd5b8235915060208301356139d181614654565b600080600080600060a08688031215613c21578283fd5b8535945060208601359350613c386040870161395b565b94979396509394606081013594506080013592915050565b8060005b6003811015611d80578151845260209384019390910190600101613c54565b8060005b6005811015611d80578151845260209384019390910190600101613c77565b60008151808452815b81811015613cbb57602081850181015186830182015201613c9f565b81811115613ccc5782602083870101525b50601f01601f19169290920160200192915050565b6000808354600180821660008114613d005760018114613d1757613d46565b60ff198316865260028304607f1686019350613d46565b600283048786526020808720875b83811015613d3e5781548a820152908501908201613d25565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b60808101613e418285613c50565b82151560608301529392505050565b60a08101613e5e8286613c50565b8360608301528215156080830152949350505050565b60c08101613e828285613c73565b82151560a08301529392505050565b60c08101613e9f8285613c73565b8260a08301529392505050565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b6000602082526129ee6020830184613c96565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b60208082526022908201527f43757276655374726174656779466f7241763343525656313a3a7265696e766560408201527f7374000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602e908201527f5065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f73697460408201527f732c206e6f7420616c6c6f776564000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b6020808252602d908201527f43757276655374726174656779466f7241763343525656313a3a5f7374616b6560408201527f4465706f736974546f6b656e7300000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f43757276655374726174656779466f7241763343525656313a3a5452414e534660408201527f45525f46524f4d5f4641494c4544000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b6020808252602d908201527f43757276655374726174656779466f7241763343525656313a3a72657363756560408201527f4465706c6f79656446756e647300000000000000000000000000000000000000606082015260800190565b60208082526030908201527f43757276655374726174656779466f7241763343525656313a3a5f776974686460408201527f7261774465706f736974546f6b656e7300000000000000000000000000000000606082015260800190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b60208082526022908201527f43757276655374726174656779466f7241763343525656313a3a5f6465706f7360408201527f6974000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b918252602082015260400190565b60008582528460208301526001600160a01b0384166040830152608060608301526125f36080830184613c96565b60ff91909116815260200190565b6001600160a01b0381168114611d9957600080fd5b8015158114611d9957600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220dade27a5b789ef0e3bd0f2ab71feadd692ef83e57ad912c6c2b0a5a1142e444164736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "details": "Must mint receipt tokens to `msg.sender`",
        "params": {
          "amount": "deposit tokens"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Should revert for tokens without Permit",
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit and deploy deposits tokens to the strategy"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimated deposit token balance deployed by strategy, excluding balance"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "notice": "Strategy for Curve LP",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11375,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11378,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11383,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11389,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11393,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11409,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20425,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 20538,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20542,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12014,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12016,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "depositToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)14990"
      },
      {
        "astId": 12018,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "rewardToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)14990"
      },
      {
        "astId": 12020,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "devAddr",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 12022,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12024,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 12026,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 12028,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12030,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12032,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 36778,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "stakingContract",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ICurveRewardsGauge)14786"
      },
      {
        "astId": 36780,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "swapPairWavaxZap",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IPair)16992"
      },
      {
        "astId": 36786,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "swapPairCrvAvax",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 36794,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "_zapToDepositToken",
        "offset": 20,
        "slot": "21",
        "type": "t_function_internal_nonpayable(t_uint256)returns(t_uint256)"
      },
      {
        "astId": 36802,
        "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
        "label": "zapSettings",
        "offset": 0,
        "slot": "22",
        "type": "t_struct(ZapSettings)36776_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICurveRewardsGauge)14786": {
        "encoding": "inplace",
        "label": "contract ICurveRewardsGauge",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)14990": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)16992": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_enum(PoolType)36756": {
        "encoding": "inplace",
        "label": "enum CurveStrategyForLPV1.PoolType",
        "numberOfBytes": "1"
      },
      "t_function_internal_nonpayable(t_uint256)returns(t_uint256)": {
        "encoding": "inplace",
        "label": "function (uint256) returns (uint256)",
        "numberOfBytes": "8"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ZapSettings)36776_storage": {
        "encoding": "inplace",
        "label": "struct CurveStrategyForLPV1.ZapSettings",
        "members": [
          {
            "astId": 36767,
            "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
            "label": "poolType",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(PoolType)36756"
          },
          {
            "astId": 36769,
            "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
            "label": "zapToken",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 36771,
            "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
            "label": "zapContract",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 36773,
            "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
            "label": "zapTokenIndex",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 36775,
            "contract": "contracts/strategies/CurveStrategyForLPV1.sol:CurveStrategyForLPV1",
            "label": "maxSlippage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}