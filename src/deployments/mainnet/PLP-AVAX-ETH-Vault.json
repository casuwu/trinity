{
  "address": "0xd335117acC6BF8B829Fa0687776FE99B3888fbFD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "TransferStrategyUpdaterRole",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deployStrategyFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositOnBehalfOf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "revokeDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "sweepTokensFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrategyUpdater",
          "type": "address"
        }
      ],
      "name": "transferStrategyUpdaterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrategy",
          "type": "address"
        }
      ],
      "name": "updateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x62537c19e2d3d3153f4a546a6c759facc78f808792f57916ace3c3bc020ad88c",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xd335117acC6BF8B829Fa0687776FE99B3888fbFD",
    "transactionIndex": 0,
    "gasUsed": "4961381",
    "logsBloom": "0x
    "blockHash": "0x3c754c11a6088c5dcce3d89b8440792af3a5b3ccef387aa92e7abbcd2ae29699",
    "transactionHash": "0x62537c19e2d3d3153f4a546a6c759facc78f808792f57916ace3c3bc020ad88c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 978739,
        "transactionHash": "0x62537c19e2d3d3153f4a546a6c759facc78f808792f57916ace3c3bc020ad88c",
        "address": "0xd335117acC6BF8B829Fa0687776FE99B3888fbFD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x3c754c11a6088c5dcce3d89b8440792af3a5b3ccef387aa92e7abbcd2ae29699"
      }
    ],
    "blockNumber": 978739,
    "cumulativeGasUsed": "4961381",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: PLP AVAX-ETH",
    "0x083E14c8C0E122E374E4c6fF2169D8DB7e6728BE"
  ],
  "solcInputHash": "39624fda0f2de236bf9e30f63ea6e460",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"TransferStrategyUpdaterRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deployStrategyFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositOnBehalfOf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"sweepTokensFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategyUpdater\",\"type\":\"address\"}],\"name\":\"transferStrategyUpdaterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"Reward token balance that can be reinvested\"}},\"deployStrategyFunds(uint256)\":{\"details\":\"Intended for use as part of an upgrade processDoes not affect `totalDeposits` nor mint receipt tokens\"},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositOnBehalfOf(address,uint256)\":{\"params\":{\"account\":\"address to receipt receipt tokens\",\"amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount to recover\"}},\"recoverERC20(address,uint256)\":{\"details\":\"Cannot be used to recover deposit tokens\",\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"details\":\"Restricted to owner to avoid griefing attacks\",\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"revokeDeployedFunds(address)\":{\"params\":{\"strategy\":\"address\"}},\"sweepTokensFrom(address,address[])\":{\"params\":{\"strategy\":\"address\",\"tokens\":\"list of token addresses\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferStrategyUpdaterRole(address)\":{\"details\":\"Set value to address(0) to disable the role and prevent future transfers\",\"params\":{\"newStrategyUpdater\":\"address of new strategy updater\"}},\"updateStrategy(address)\":{\"details\":\"Checks for matching `vault` and `depositToken` values\",\"params\":{\"newStrategy\":\"contract address of new strategy\"}},\"withdraw(uint256)\":{\"details\":\"If strategy is set, tries to withdraw from strategyIf strategy is NOT set, tries to withdraw from vault\",\"params\":{\"amount\":\"receipt tokens to redeem\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,uint256)\":{\"notice\":\"Event emitted after successful `deposit()`\"},\"Recovered(address,uint256)\":{\"notice\":\"Event emitted when Vault tokens are recovered\"},\"Reinvest(uint256,uint256)\":{\"notice\":\"Event emitted after reinvest. Used to track growth\"},\"TransferStrategyUpdaterRole(address,address)\":{\"notice\":\"Event emitted when `strategyUpdater` is updated\"},\"UpdateStrategy(address,address)\":{\"notice\":\"Event emitted when `strategyContract` is updated\"},\"Withdraw(address,uint256)\":{\"notice\":\"Event emitted after successful `withdraw()`\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward token balance that can be reinvested\"},\"deployStrategyFunds(uint256)\":{\"notice\":\"Deploy funds from Vault into a Strategy\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositOnBehalfOf(address,uint256)\":{\"notice\":\"Deposit on behalf of another address\"},\"depositToken()\":{\"notice\":\"Deposit token\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from Vault\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from Vault\"},\"reinvest()\":{\"notice\":\"Reinvest rewards from staking contract to deposit tokens\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"revokeDeployedFunds(address)\":{\"notice\":\"Revoke deployed `depositTokens` back into Vault\"},\"revokeStrategy()\":{\"notice\":\"Revokes current strategy\"},\"strategyContract()\":{\"notice\":\"Strategy contract\"},\"strategyUpdater()\":{\"notice\":\"Admin role to update strategy (separate to `owner`)\"},\"sweepTokensFrom(address,address[])\":{\"notice\":\"Sweeps tokens from Strategy to Vault\"},\"totalDeposits()\":{\"notice\":\"Total amount of `depositToken` managed by Vault\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"transferStrategyUpdaterRole(address)\":{\"notice\":\"Transfer admin role `strategyUpdater`\"},\"updateStrategy(address)\":{\"notice\":\"Updates strategy contract\"},\"version()\":{\"notice\":\"Vault version number\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw deposit tokens by redeeming receipt tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./strategies/BaseStrategy.sol\\\";\\nimport \\\"./interfaces/IStakingRewards.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\ncontract Vault is YakERC20, Ownable {\\n    using SafeMath for uint;\\n\\n    /// @notice Vault version number\\n    string public constant version = \\\"0.0.1\\\";\\n\\n    /// @notice Total amount of `depositToken` managed by Vault\\n    uint public totalDeposits;\\n\\n    /// @notice Deposit token\\n    IERC20 public depositToken;\\n\\n    /// @notice Strategy contract\\n    address public strategyContract;\\n\\n    /// @notice Admin role to update strategy (separate to `owner`)\\n    address public strategyUpdater;\\n\\n    /// @notice Event emitted after successful `deposit()`\\n    event Deposit(address indexed account, uint amount);\\n\\n    /// @notice Event emitted after successful `withdraw()`\\n    event Withdraw(address indexed account, uint amount);\\n\\n    /// @notice Event emitted after reinvest. Used to track growth\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n\\n    /// @notice Event emitted when Vault tokens are recovered\\n    event Recovered(address indexed token, uint amount);\\n\\n    /// @notice Event emitted when `strategyContract` is updated\\n    event UpdateStrategy(address indexed oldValue, address indexed newValue);\\n\\n    /// @notice Event emitted when `strategyUpdater` is updated\\n    event TransferStrategyUpdaterRole(address indexed oldValue, address indexed newValue);\\n\\n    constructor (\\n        string memory _name,\\n        address _depositToken\\n    ) {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n\\n        strategyUpdater = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"Vault::onlyEOA, invalid msg.sender\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev May only be called by `strategyUpdater`\\n     */\\n    modifier onlyStrategyUpdater() {\\n        require(msg.sender != address(0), \\\"Vault::onlyStrategyUpdater, invalid msg.sender\\\");\\n        require(msg.sender == strategyUpdater, \\\"Vault::onlyStrategyUpdater, not strategy updater\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @dev Restricted to owner to avoid griefing attacks\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param amount Amount of tokens to deposit\\n     */\\n    function deposit(uint amount) external {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit on behalf of another address\\n     * @param account address to receipt receipt tokens\\n     * @param amount Amount of tokens to deposit\\n     */\\n    function depositOnBehalfOf(address account, uint amount) external {\\n        _deposit(account, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Private function to handle user deposits\\n     * @dev If there is no strategy, deposits are held in Vault\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens to deposit\\n     */\\n    function _deposit(address account, uint amount) private {\\n        require(amount > 0, \\\"Vault::_deposit, amount too low\\\");\\n        require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"Vault::_deposit, transferFrom failed\\\");\\n        if (strategyContract != address(0)) {\\n            BaseStrategy(strategyContract).deposit(amount);\\n        }\\n        _mint(account, getSharesForDepositTokens(amount));\\n        totalDeposits = totalDeposits.add(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw deposit tokens by redeeming receipt tokens\\n     * @dev If strategy is set, tries to withdraw from strategy\\n     * @dev If strategy is NOT set, tries to withdraw from vault\\n     * @param amount receipt tokens to redeem\\n     */\\n    function withdraw(uint amount) external {\\n        require(amount > 0, \\\"Vault::withdraw, amount too low\\\");\\n        uint depositTokenAmount = getDepositTokensForShares(amount);\\n        require(depositTokenAmount > 0, \\\"Vault::withdraw, deposit amount too low\\\");\\n        if (strategyContract != address(0)) {\\n            BaseStrategy(strategyContract).withdraw(msg.sender, depositTokenAmount);\\n        }\\n        else if (depositToken.balanceOf(address(this)) >= depositTokenAmount) {\\n            require(depositToken.transfer(msg.sender, depositTokenAmount), \\\"Vault::withdraw, transfer failed\\\");\\n        }\\n        else {\\n            revert(\\\"Vault::withdraw, failed\\\");\\n        }\\n        _burn(msg.sender, amount);\\n        totalDeposits = totalDeposits.sub(depositTokenAmount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     */\\n    function reinvest() external onlyEOA {\\n        require(strategyContract != address(0), \\\"Vault::reinvest, no strategy\\\");\\n        uint depositTokensAdded = BaseStrategy(strategyContract).reinvest();\\n        require(depositTokensAdded > 0, \\\"Vault::reinvest, not enough deposit tokens\\\");\\n        totalDeposits = totalDeposits.add(depositTokensAdded);\\n        emit Reinvest(totalDeposits, totalSupply);\\n    }\\n\\n    /**\\n     * @notice Estimate reinvest reward for caller\\n     * @return Estimated rewards tokens earned for calling `reinvest()`\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        if (strategyContract == address(0)) {\\n            return 0;\\n        }\\n        return BaseStrategy(strategyContract).estimateReinvestReward();\\n    }\\n\\n    /**\\n     * @notice Reward token balance that can be reinvested\\n     * @return Reward token balance that can be reinvested\\n     */\\n    function checkReward() external view returns (uint) {\\n        if (strategyContract == address(0)) {\\n            return 0;\\n        }\\n        return BaseStrategy(strategyContract).checkReward();\\n    }\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits);\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Revoke deployed `depositTokens` back into Vault\\n     * @param strategy address\\n     */\\n    function revokeDeployedFunds(address strategy) external onlyOwner {\\n        BaseStrategy(strategy).rescueDeployedFunds();\\n        BaseStrategy(strategy).recoverERC20(\\n            address(depositToken), depositToken.balanceOf(strategy)\\n        );\\n    }\\n\\n    /**\\n     * @notice Sweeps tokens from Strategy to Vault\\n     * @param strategy address\\n     * @param tokens list of token addresses\\n     */\\n    function sweepTokensFrom(address strategy, address[] calldata tokens) external onlyOwner {\\n        for(uint i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == address(0)) {\\n                BaseStrategy(strategy).recoverAVAX(\\n                    address(this).balance\\n                );\\n            }\\n            else {\\n                IERC20 token = IERC20(tokens[i]);\\n                BaseStrategy(strategy).recoverERC20(\\n                    tokens[i], \\n                    token.balanceOf(strategy)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Deploy funds from Vault into a Strategy\\n     * @dev Intended for use as part of an upgrade process\\n     * @dev Does not affect `totalDeposits` nor mint receipt tokens\\n     */\\n    function deployStrategyFunds(uint amount) external onlyStrategyUpdater {\\n        require(strategyContract != address(0), \\\"Vault::deployStrategyFunds, no strategy\\\");\\n        BaseStrategy(strategyContract).deposit(amount);\\n    }\\n\\n    /**\\n     * @notice Revokes current strategy\\n     */\\n    function revokeStrategy() external onlyStrategyUpdater {\\n        require(strategyContract != address(0), \\\"Vault::revokeStrategy, no strategy\\\");\\n        require(depositToken.approve(strategyContract, 0));\\n        emit UpdateStrategy(strategyContract, address(0));\\n        strategyContract = address(0);\\n    }\\n\\n    /**\\n     * @notice Updates strategy contract\\n     * @dev Checks for matching `vault` and `depositToken` values\\n     * @param newStrategy contract address of new strategy\\n     */\\n    function updateStrategy(address newStrategy) external onlyStrategyUpdater {\\n        require(newStrategy != address(0), \\\"Vault::updateStrategy, use revokeStrategy() instead\\\");\\n        require(\\n            BaseStrategy(newStrategy).vault() == address(this)\\n            && BaseStrategy(newStrategy).depositToken() == depositToken,\\n            \\\"Vault::updateStrategy, incompatible strategy\\\");\\n        require(depositToken.approve(newStrategy, uint256(-1)));\\n        emit UpdateStrategy(strategyContract, newStrategy);\\n        strategyContract = newStrategy;\\n    }\\n\\n    /**\\n     * @notice Transfer admin role `strategyUpdater`\\n     * @dev Set value to address(0) to disable the role and prevent future transfers\\n     * @param newStrategyUpdater address of new strategy updater\\n     */\\n    function transferStrategyUpdaterRole(address newStrategyUpdater) external onlyStrategyUpdater {\\n        emit TransferStrategyUpdaterRole(strategyUpdater, newStrategyUpdater);\\n        strategyUpdater = newStrategyUpdater;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from Vault\\n     * @dev Cannot be used to recover deposit tokens\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAddress != address(depositToken), \\\"Vault::recoverERC20, cannot recover deposit token\\\");\\n        require(tokenAmount > 0, \\\"Vault::recoverERC20, amount too low\\\");\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount), \\\"Vault::recoverERC20, transfer failed\\\");\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from Vault\\n     * @param amount amount to recover\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0, \\\"Vault::recoverAVAX, amount too low\\\");\\n        require(amount <= address(this).balance, \\\"Vault::recoverAVAX, amount too high\\\");\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n        \\n}\",\"keccak256\":\"0x39ba1a57e1d8c45f03d0f4aa9a71a7de0133e04dc62111b58dd89616a83e558a\",\"license\":\"MIT\"},\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9668eb9a3b98c068430dc416d38c28fde029ec001f3478f910a6ba7d0912810a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IStakingRewards {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function getRewardForDuration() external view returns (uint256);\\n    function stake(uint256 amount) external;\\n    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    function withdraw(uint256 amount) external;\\n    function getReward() external;\\n    function exit() external;\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\",\"keccak256\":\"0x9676b12193d43245e7d016ce33557b15fd0acae70d91067e9d5cc83877397cff\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract BaseStrategy {\\n    using SafeMath for uint;\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public vault;\\n    address public strategyManager;\\n    string public name;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal UINT_MAX = uint256(-1);\\n\\n    /**\\n     * @dev May only be called by `vault`\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vault, \\\"onlyVault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev May only be called by `strategyManager`\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == strategyManager, \\\"onlyManager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev May only be called by `strategyManager` or `vault`\\n     */\\n    modifier onlyManagerOrVault() {\\n        require(\\n            msg.sender == strategyManager\\n            || msg.sender == vault\\n            , \\\"onlyManagerOrVault\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Restricted to avoid griefing attacks\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @dev Restricted to avoid griefing attacks\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyManager {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposits `depositToken` to strategy\\n     * @param amount deposit tokens to deposit to strategy\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n     * @notice Withdraws `depositTokens` from strategy\\n     * @param account account to receive deposit tokens\\n     * @param amount deposit tokens to withdraw from strategy\\n     */\\n    function withdraw(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvests `rewardToken` to `depositToken`\\n     * @return deposit tokens received\\n     */\\n    function reinvest() external virtual returns (uint);\\n\\n    /**\\n     * @notice Estimate reinvest reward for caller\\n     * @return Estimated rewards tokens earned for calling `reinvest()`\\n     */\\n    function estimateReinvestReward() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Reward token balance that can be reinvested\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Helper function to get the current balance deployed by strategy\\n     * @dev This must NOT include the strategy contract balance\\n     * @return deposit tokens\\n     */\\n    function getDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @dev This is should NOT transfer tokens out of the strategy contract\\n     */\\n    function rescueDeployedFunds() external virtual;\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyVault {\\n        require(tokenAmount > 0, 'Strategy::recoverERC20, amount too low');\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyVault {\\n        require(amount > 0, 'Strategy::recoverAVAX, amount too low');\\n        require(amount <= address(this).balance, \\\"Strategy::recoverAVAX, amount too high\\\");\\n        msg.sender.transfer(amount);\\n    }\\n\\n}\",\"keccak256\":\"0xe8a8029d752949f38f21ed584f3bc6535f0e40474fb74b40ac041ef1be29921d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80638980f11f11610146578063c4b24a46116100c3578063dd8ce4d611610087578063dd8ce4d61461069e578063eab89a5a146106ce578063ed24911d146106fe578063edfc3d331461071c578063f2fde38b14610738578063fdb5a03e1461075457610253565b8063c4b24a46146105fa578063c89039c514610618578063d505accf14610636578063daccaf6314610652578063dd62ed3e1461066e57610253565b8063a0e4af9a1161010a578063a0e4af9a1461056a578063a4514f4814610574578063a9059cbb14610590578063b6b55f25146105c0578063b9e57b80146105dc57610253565b80638980f11f146104d85780638da5cb5b146104f4578063953841eb1461051257806395d89b411461052e5780639e4e73181461054c57610253565b806332ea3b3e116101d457806370a082311161019857806370a0823114610434578063715018a6146104645780637ae267731461046e5780637d8820971461048a5780637ecebe00146104a857610253565b806332ea3b3e146103a45780633ca4d9f4146103c25780634a970be7146103de5780634ebb7916146103fa57806354fd4d501461041657610253565b806320606b701161021b57806320606b70146102fe57806323b872dd1461031c5780632e1a7d4d1461034c57806330adf81f14610368578063313ce5671461038657610253565b806306fdde0314610258578063095ea7b3146102765780630e04d23a146102a657806318160ddd146102c45780631e1becdf146102e2575b600080fd5b61026061075e565b60405161026d9190614fdd565b60405180910390f35b610290600480360381019061028b919061400a565b6107fc565b60405161029d9190614e93565b60405180910390f35b6102ae610813565b6040516102bb9190614d57565b60405180910390f35b6102cc610839565b6040516102d9919061539f565b60405180910390f35b6102fc60048036038101906102f79190613e37565b61083f565b005b6103066109ff565b6040516103139190614eae565b60405180910390f35b61033660048036038101906103319190613ec5565b610a26565b6040516103439190614e93565b60405180910390f35b61036660048036038101906103619190614098565b610c3f565b005b610370611013565b60405161037d9190614eae565b60405180910390f35b61038e61103a565b60405161039b91906153e3565b60405180910390f35b6103ac61103f565b6040516103b99190614d57565b60405180910390f35b6103dc60048036038101906103d7919061400a565b611065565b005b6103f860048036038101906103f391906140ea565b611073565b005b610414600480360381019061040f9190614098565b61111d565b005b61041e6112b8565b60405161042b9190614fdd565b60405180910390f35b61044e60048036038101906104499190613e37565b6112f1565b60405161045b919061539f565b60405180910390f35b61046c61133a565b005b61048860048036038101906104839190613e89565b611477565b005b61049261158e565b60405161049f919061539f565b60405180910390f35b6104c260048036038101906104bd9190613e37565b611594565b6040516104cf919061539f565b60405180910390f35b6104f260048036038101906104ed919061400a565b6115ac565b005b6104fc61181a565b6040516105099190614d57565b60405180910390f35b61052c60048036038101906105279190614098565b611844565b005b610536611a66565b6040516105439190614fdd565b60405180910390f35b610554611b04565b6040516105619190614eae565b60405180910390f35b610572611b2b565b005b61058e60048036038101906105899190613e37565b611e59565b005b6105aa60048036038101906105a5919061400a565b612071565b6040516105b79190614e93565b60405180910390f35b6105da60048036038101906105d59190614098565b612088565b005b6105e4612095565b6040516105f1919061539f565b60405180910390f35b61060261219c565b60405161060f919061539f565b60405180910390f35b6106206122a3565b60405161062d9190614fc2565b60405180910390f35b610650600480360381019061064b9190613f14565b6122c9565b005b61066c60048036038101906106679190613e37565b6123d3565b005b61068860048036038101906106839190613e89565b61289c565b604051610695919061539f565b60405180910390f35b6106b860048036038101906106b39190614098565b612923565b6040516106c5919061539f565b60405180910390f35b6106e860048036038101906106e39190614098565b61297c565b6040516106f5919061539f565b60405180910390f35b6107066129d6565b6040516107139190614eae565b60405180910390f35b61073660048036038101906107319190613fb2565b612a6f565b005b610752600480360381019061074d9190613e37565b612d0d565b005b61075c612eb9565b005b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107f45780601f106107c9576101008083540402835291602001916107f4565b820191906000526020600020905b8154815290600101906020018083116107d757829003601f168201915b505050505081565b60006108093384846130fd565b6001905092915050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156108af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a6906151bf565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461093f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093690614fff565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f98ed873eef9b39bbb806c14e9a927e13cb8bddea97c3bfe76faf36a4c2ec461460405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b0957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610c27576000610b3d856040518060600160405280602f8152602001615622602f9139846132c89092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610c1d919061539f565b60405180910390a3505b610c32868686613323565b6001925050509392505050565b60008111610c82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c799061515f565b60405180910390fd5b6000610c8d8261297c565b905060008111610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc99061503f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dbc57600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a333836040518363ffffffff1660e01b8152600401610d85929190614e18565b600060405180830381600087803b158015610d9f57600080fd5b505af1158015610db3573d6000803e3d6000fd5b50505050610f9c565b80600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e189190614d57565b60206040518083038186803b158015610e3057600080fd5b505afa158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6891906140c1565b10610f6057600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610eca929190614e18565b602060405180830381600087803b158015610ee457600080fd5b505af1158015610ef8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1c9190614046565b610f5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f529061531f565b60405180910390fd5b610f9b565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f929061507f565b60405180910390fd5b5b610fa63383613541565b610fbb8160075461368f90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051611007919061539f565b60405180910390a25050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61106f82826136d9565b5050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b81526004016110da9796959493929190614da9565b600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b5050505061111633866136d9565b5050505050565b61112561396f565b73ffffffffffffffffffffffffffffffffffffffff1661114361181a565b73ffffffffffffffffffffffffffffffffffffffff1614611199576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111909061521f565b60405180910390fd5b600081116111dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d3906150bf565b60405180910390fd5b4781111561121f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112169061533f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611265573d6000803e3d6000fd5b50600073ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28826040516112ad919061539f565b60405180910390a250565b6040518060400160405280600581526020017f302e302e3100000000000000000000000000000000000000000000000000000081525081565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b61134261396f565b73ffffffffffffffffffffffffffffffffffffffff1661136061181a565b73ffffffffffffffffffffffffffffffffffffffff16146113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad9061521f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61147f61396f565b73ffffffffffffffffffffffffffffffffffffffff1661149d61181a565b73ffffffffffffffffffffffffffffffffffffffff16146114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea9061521f565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff1660e01b815260040161152f929190614e41565b602060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115819190614046565b61158a57600080fd5b5050565b60075481565b60056020528060005260406000206000915090505481565b6115b461396f565b73ffffffffffffffffffffffffffffffffffffffff166115d261181a565b73ffffffffffffffffffffffffffffffffffffffff1614611628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161161f9061521f565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b09061527f565b60405180910390fd5b600081116116fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116f3906152ff565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611737929190614e18565b602060405180830381600087803b15801561175157600080fd5b505af1158015611765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117899190614046565b6117c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117bf906152df565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288260405161180e919061539f565b60405180910390a25050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156118b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ab906151bf565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611944576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193b90614fff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156119d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119cd9061535f565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b8152600401611a31919061539f565b600060405180830381600087803b158015611a4b57600080fd5b505af1158015611a5f573d6000803e3d6000fd5b5050505050565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611afc5780601f10611ad157610100808354040283529160200191611afc565b820191906000526020600020905b815481529060010190602001808311611adf57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b92906151bf565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2290614fff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611cbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb4906151df565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006040518363ffffffff1660e01b8152600401611d3d929190614e41565b602060405180830381600087803b158015611d5757600080fd5b505af1158015611d6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8f9190614046565b611d9857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1e0f9bc8b0f77d9ae5d0ad2b0a996f775d47a5d0b473e464166e7d559f38473460405160405180910390a36000600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b611e6161396f565b73ffffffffffffffffffffffffffffffffffffffff16611e7f61181a565b73ffffffffffffffffffffffffffffffffffffffff1614611ed5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ecc9061521f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e0dac4356040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611f1d57600080fd5b505af1158015611f31573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16638980f11f600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611fcf9190614d57565b60206040518083038186803b158015611fe757600080fd5b505afa158015611ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201f91906140c1565b6040518363ffffffff1660e01b815260040161203c929190614e6a565b600060405180830381600087803b15801561205657600080fd5b505af115801561206a573d6000803e3d6000fd5b5050505050565b600061207e338484613323565b6001905092915050565b61209233826136d9565b50565b60008073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156120f65760009050612199565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9e57b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561215e57600080fd5b505afa158015612172573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219691906140c1565b90505b90565b60008073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156121fd57600090506122a0565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4b24a466040518163ffffffff1660e01b815260040160206040518083038186803b15801561226557600080fd5b505afa158015612279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229d91906140c1565b90505b90565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b4284101561230c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123039061517f565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558960405160200161239996959493929190614ec9565b6040516020818303038152906040528051906020012090506123be8882868686613977565b6123c98888886130fd565b5050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415612443576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161243a906151bf565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146124d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ca90614fff565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612543576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161253a9061523f565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663fbfa77cf6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125a057600080fd5b505afa1580156125b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d89190613e60565b73ffffffffffffffffffffffffffffffffffffffff161480156126c55750600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1663c89039c56040518163ffffffff1660e01b815260040160206040518083038186803b15801561267557600080fd5b505afa158015612689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126ad919061406f565b73ffffffffffffffffffffffffffffffffffffffff16145b612704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fb9061513f565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612781929190614e6a565b602060405180830381600087803b15801561279b57600080fd5b505af11580156127af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d39190614046565b6127dc57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f1e0f9bc8b0f77d9ae5d0ad2b0a996f775d47a5d0b473e464166e7d559f38473460405160405180910390a380600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008061293d600754600254613aae90919063ffffffff16565b141561294b57819050612977565b61297460075461296660025485613aae90919063ffffffff16565b613b1e90919063ffffffff16565b90505b919050565b600080612996600754600254613aae90919063ffffffff16565b14156129a557600090506129d1565b6129ce6002546129c060075485613aae90919063ffffffff16565b613b1e90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051612a0b9190614d09565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b612a3f613b68565b30604051602001612a54959493929190614f2a565b60405160208183030381529060405280519060200120905090565b612a7761396f565b73ffffffffffffffffffffffffffffffffffffffff16612a9561181a565b73ffffffffffffffffffffffffffffffffffffffff1614612aeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ae29061521f565b60405180910390fd5b60005b82829050811015612d0757600073ffffffffffffffffffffffffffffffffffffffff16838383818110612b1d57fe5b9050602002016020810190612b329190613e37565b73ffffffffffffffffffffffffffffffffffffffff161415612bbe578373ffffffffffffffffffffffffffffffffffffffff16634ebb7916476040518263ffffffff1660e01b8152600401612b87919061539f565b600060405180830381600087803b158015612ba157600080fd5b505af1158015612bb5573d6000803e3d6000fd5b50505050612cfa565b6000838383818110612bcc57fe5b9050602002016020810190612be19190613e37565b90508473ffffffffffffffffffffffffffffffffffffffff16638980f11f858585818110612c0b57fe5b9050602002016020810190612c209190613e37565b8373ffffffffffffffffffffffffffffffffffffffff166370a08231896040518263ffffffff1660e01b8152600401612c599190614d57565b60206040518083038186803b158015612c7157600080fd5b505afa158015612c85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ca991906140c1565b6040518363ffffffff1660e01b8152600401612cc6929190614e6a565b600060405180830381600087803b158015612ce057600080fd5b505af1158015612cf4573d6000803e3d6000fd5b50505050505b8080600101915050612aee565b50505050565b612d1561396f565b73ffffffffffffffffffffffffffffffffffffffff16612d3361181a565b73ffffffffffffffffffffffffffffffffffffffff1614612d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d809061521f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612df09061505f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614612f27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f1e9061501f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612fb9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fb09061511f565b60405180910390fd5b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fdb5a03e6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561302557600080fd5b505af1158015613039573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061305d91906140c1565b9050600081116130a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130999061519f565b60405180910390fd5b6130b781600754613b7590919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346007546002546040516130f29291906153ba565b60405180910390a150565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561316d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131649061529f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156131dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d49061537f565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516132bb919061539f565b60405180910390a3505050565b6000838311158290613310576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133079190614fdd565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613393576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161338a906152bf565b60405180910390fd5b6133ff816040518060600160405280602e8152602001615678602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132c89092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061349481600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613b7590919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613534919061539f565b60405180910390a3505050565b6135ad8160405180606001604052806027815260200161565160279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546132c89092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061361f816040518060600160405280602781526020016155fb602791396002546132c89092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613683919061539f565b60405180910390a35050565b60006136d183836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506132c8565b905092915050565b6000811161371c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613713906150df565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161377b93929190614d72565b602060405180830381600087803b15801561379557600080fd5b505af11580156137a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137cd9190614046565b61380c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138039061525f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146138f057600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b6b55f25826040518263ffffffff1660e01b81526004016138bd919061539f565b600060405180830381600087803b1580156138d757600080fd5b505af11580156138eb573d6000803e3d6000fd5b505050505b613902826138fd83612923565b613bca565b61391781600754613b7590919063ffffffff16565b6007819055508173ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051613963919061539f565b60405180910390a25050565b600033905090565b60006139816129d6565b85604051602001613993929190614d20565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516139d09493929190614f7d565b6020604051602081039080840390855afa1580156139f2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015613a6657508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b613aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a9c906150ff565b60405180910390fd5b50505050505050565b600080831415613ac15760009050613b18565b6000828402905082848281613ad257fe5b0414613b13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b0a906151ff565b60405180910390fd5b809150505b92915050565b6000613b6083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613ce4565b905092915050565b6000804690508091505090565b600080828401905083811015613bc0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bb79061509f565b60405180910390fd5b8091505092915050565b613bdf81600254613b7590919063ffffffff16565b600281905550613c3781600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613b7590919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613cd8919061539f565b60405180910390a35050565b60008083118290613d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d229190614fdd565b60405180910390fd5b506000838581613d3757fe5b049050809150509392505050565b600081359050613d5481615570565b92915050565b600081519050613d6981615570565b92915050565b60008083601f840112613d8157600080fd5b8235905067ffffffffffffffff811115613d9a57600080fd5b602083019150836020820283011115613db257600080fd5b9250929050565b600081519050613dc881615587565b92915050565b600081359050613ddd8161559e565b92915050565b600081519050613df2816155b5565b92915050565b600081359050613e07816155cc565b92915050565b600081519050613e1c816155cc565b92915050565b600081359050613e31816155e3565b92915050565b600060208284031215613e4957600080fd5b6000613e5784828501613d45565b91505092915050565b600060208284031215613e7257600080fd5b6000613e8084828501613d5a565b91505092915050565b60008060408385031215613e9c57600080fd5b6000613eaa85828601613d45565b9250506020613ebb85828601613d45565b9150509250929050565b600080600060608486031215613eda57600080fd5b6000613ee886828701613d45565b9350506020613ef986828701613d45565b9250506040613f0a86828701613df8565b9150509250925092565b600080600080600080600060e0888a031215613f2f57600080fd5b6000613f3d8a828b01613d45565b9750506020613f4e8a828b01613d45565b9650506040613f5f8a828b01613df8565b9550506060613f708a828b01613df8565b9450506080613f818a828b01613e22565b93505060a0613f928a828b01613dce565b92505060c0613fa38a828b01613dce565b91505092959891949750929550565b600080600060408486031215613fc757600080fd5b6000613fd586828701613d45565b935050602084013567ffffffffffffffff811115613ff257600080fd5b613ffe86828701613d6f565b92509250509250925092565b6000806040838503121561401d57600080fd5b600061402b85828601613d45565b925050602061403c85828601613df8565b9150509250929050565b60006020828403121561405857600080fd5b600061406684828501613db9565b91505092915050565b60006020828403121561408157600080fd5b600061408f84828501613de3565b91505092915050565b6000602082840312156140aa57600080fd5b60006140b884828501613df8565b91505092915050565b6000602082840312156140d357600080fd5b60006140e184828501613e0d565b91505092915050565b600080600080600060a0868803121561410257600080fd5b600061411088828901613df8565b955050602061412188828901613df8565b945050604061413288828901613e22565b935050606061414388828901613dce565b925050608061415488828901613dce565b9150509295509295909350565b61416a816154b6565b82525050565b61417981615445565b82525050565b61418881615457565b82525050565b61419781615463565b82525050565b6141ae6141a982615463565b615555565b82525050565b6000815460018116600081146141d157600181146141f65761423a565b607f60028304166141e2818761541e565b955060ff198316865280860193505061423a565b60028204614204818761541e565b955061420f856153fe565b60005b8281101561423157815481890152600182019150602081019050614212565b82880195505050505b505092915050565b61424b816154c8565b82525050565b61425a816154ec565b82525050565b600061426b82615413565b6142758185615429565b9350614285818560208601615522565b61428e8161555f565b840191505092915050565b60006142a6603083615429565b91507f5661756c743a3a6f6e6c795374726174656779557064617465722c206e6f742060008301527f73747261746567792075706461746572000000000000000000000000000000006020830152604082019050919050565b600061430c602283615429565b91507f5661756c743a3a6f6e6c79454f412c20696e76616c6964206d73672e73656e6460008301527f65720000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614372602783615429565b91507f5661756c743a3a77697468647261772c206465706f73697420616d6f756e742060008301527f746f6f206c6f77000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006143d8602683615429565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061443e601783615429565b91507f5661756c743a3a77697468647261772c206661696c65640000000000000000006000830152602082019050919050565b600061447e60028361543a565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006144be601b83615429565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006144fe602283615429565b91507f5661756c743a3a7265636f766572415641582c20616d6f756e7420746f6f206c60008301527f6f770000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614564601f83615429565b91507f5661756c743a3a5f6465706f7369742c20616d6f756e7420746f6f206c6f77006000830152602082019050919050565b60006145a4602483615429565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061460a601c83615429565b91507f5661756c743a3a7265696e766573742c206e6f207374726174656779000000006000830152602082019050919050565b600061464a602c83615429565b91507f5661756c743a3a75706461746553747261746567792c20696e636f6d7061746960008301527f626c6520737472617465677900000000000000000000000000000000000000006020830152604082019050919050565b60006146b0601f83615429565b91507f5661756c743a3a77697468647261772c20616d6f756e7420746f6f206c6f77006000830152602082019050919050565b60006146f0600f83615429565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b6000614730602a83615429565b91507f5661756c743a3a7265696e766573742c206e6f7420656e6f756768206465706f60008301527f73697420746f6b656e73000000000000000000000000000000000000000000006020830152604082019050919050565b6000614796602e83615429565b91507f5661756c743a3a6f6e6c795374726174656779557064617465722c20696e766160008301527f6c6964206d73672e73656e6465720000000000000000000000000000000000006020830152604082019050919050565b60006147fc602283615429565b91507f5661756c743a3a7265766f6b6553747261746567792c206e6f2073747261746560008301527f67790000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614862602183615429565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006148c8602083615429565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614908603383615429565b91507f5661756c743a3a75706461746553747261746567792c20757365207265766f6b60008301527f655374726174656779282920696e7374656164000000000000000000000000006020830152604082019050919050565b600061496e602483615429565b91507f5661756c743a3a5f6465706f7369742c207472616e7366657246726f6d20666160008301527f696c6564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006149d4603183615429565b91507f5661756c743a3a7265636f76657245524332302c2063616e6e6f74207265636f60008301527f766572206465706f73697420746f6b656e0000000000000000000000000000006020830152604082019050919050565b6000614a3a601c83615429565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b6000614a7a603483615429565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b6000614ae0602483615429565b91507f5661756c743a3a7265636f76657245524332302c207472616e7366657220666160008301527f696c6564000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614b46602383615429565b91507f5661756c743a3a7265636f76657245524332302c20616d6f756e7420746f6f2060008301527f6c6f7700000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bac602083615429565b91507f5661756c743a3a77697468647261772c207472616e73666572206661696c65646000830152602082019050919050565b6000614bec602383615429565b91507f5661756c743a3a7265636f766572415641582c20616d6f756e7420746f6f206860008301527f69676800000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614c52602783615429565b91507f5661756c743a3a6465706c6f79537472617465677946756e64732c206e6f207360008301527f74726174656779000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614cb8601e83615429565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b614cf48161549f565b82525050565b614d03816154a9565b82525050565b6000614d1582846141b4565b915081905092915050565b6000614d2b82614471565b9150614d37828561419d565b602082019150614d47828461419d565b6020820191508190509392505050565b6000602082019050614d6c6000830184614170565b92915050565b6000606082019050614d876000830186614161565b614d946020830185614170565b614da16040830184614ceb565b949350505050565b600060e082019050614dbe600083018a614161565b614dcb6020830189614170565b614dd86040830188614ceb565b614de56060830187614ceb565b614df26080830186614cfa565b614dff60a083018561418e565b614e0c60c083018461418e565b98975050505050505050565b6000604082019050614e2d6000830185614161565b614e3a6020830184614ceb565b9392505050565b6000604082019050614e566000830185614170565b614e636020830184614251565b9392505050565b6000604082019050614e7f6000830185614170565b614e8c6020830184614ceb565b9392505050565b6000602082019050614ea8600083018461417f565b92915050565b6000602082019050614ec3600083018461418e565b92915050565b600060c082019050614ede600083018961418e565b614eeb6020830188614170565b614ef86040830187614170565b614f056060830186614ceb565b614f126080830185614ceb565b614f1f60a0830184614ceb565b979650505050505050565b600060a082019050614f3f600083018861418e565b614f4c602083018761418e565b614f59604083018661418e565b614f666060830185614ceb565b614f736080830184614170565b9695505050505050565b6000608082019050614f92600083018761418e565b614f9f6020830186614cfa565b614fac604083018561418e565b614fb9606083018461418e565b95945050505050565b6000602082019050614fd76000830184614242565b92915050565b60006020820190508181036000830152614ff78184614260565b905092915050565b6000602082019050818103600083015261501881614299565b9050919050565b60006020820190508181036000830152615038816142ff565b9050919050565b6000602082019050818103600083015261505881614365565b9050919050565b60006020820190508181036000830152615078816143cb565b9050919050565b6000602082019050818103600083015261509881614431565b9050919050565b600060208201905081810360008301526150b8816144b1565b9050919050565b600060208201905081810360008301526150d8816144f1565b9050919050565b600060208201905081810360008301526150f881614557565b9050919050565b6000602082019050818103600083015261511881614597565b9050919050565b60006020820190508181036000830152615138816145fd565b9050919050565b600060208201905081810360008301526151588161463d565b9050919050565b60006020820190508181036000830152615178816146a3565b9050919050565b60006020820190508181036000830152615198816146e3565b9050919050565b600060208201905081810360008301526151b881614723565b9050919050565b600060208201905081810360008301526151d881614789565b9050919050565b600060208201905081810360008301526151f8816147ef565b9050919050565b6000602082019050818103600083015261521881614855565b9050919050565b60006020820190508181036000830152615238816148bb565b9050919050565b60006020820190508181036000830152615258816148fb565b9050919050565b6000602082019050818103600083015261527881614961565b9050919050565b60006020820190508181036000830152615298816149c7565b9050919050565b600060208201905081810360008301526152b881614a2d565b9050919050565b600060208201905081810360008301526152d881614a6d565b9050919050565b600060208201905081810360008301526152f881614ad3565b9050919050565b6000602082019050818103600083015261531881614b39565b9050919050565b6000602082019050818103600083015261533881614b9f565b9050919050565b6000602082019050818103600083015261535881614bdf565b9050919050565b6000602082019050818103600083015261537881614c45565b9050919050565b6000602082019050818103600083015261539881614cab565b9050919050565b60006020820190506153b46000830184614ceb565b92915050565b60006040820190506153cf6000830185614ceb565b6153dc6020830184614ceb565b9392505050565b60006020820190506153f86000830184614cfa565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006154508261547f565b9050919050565b60008115159050919050565b6000819050919050565b600061547882615445565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006154c1826154fe565b9050919050565b60006154d3826154da565b9050919050565b60006154e58261547f565b9050919050565b60006154f78261549f565b9050919050565b600061550982615510565b9050919050565b600061551b8261547f565b9050919050565b60005b83811015615540578082015181840152602081019050615525565b8381111561554f576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b61557981615445565b811461558457600080fd5b50565b61559081615457565b811461559b57600080fd5b50565b6155a781615463565b81146155b257600080fd5b50565b6155be8161546d565b81146155c957600080fd5b50565b6155d58161549f565b81146155e057600080fd5b50565b6155ec816154a9565b81146155f757600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a264697066735822122083db3af7db4b73288147a6933d7562934681de1db55c3f991cc5371fc6be407364736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "Reward token balance that can be reinvested"
        }
      },
      "deployStrategyFunds(uint256)": {
        "details": "Intended for use as part of an upgrade processDoes not affect `totalDeposits` nor mint receipt tokens"
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositOnBehalfOf(address,uint256)": {
        "params": {
          "account": "address to receipt receipt tokens",
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount to recover"
        }
      },
      "recoverERC20(address,uint256)": {
        "details": "Cannot be used to recover deposit tokens",
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "details": "Restricted to owner to avoid griefing attacks",
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "revokeDeployedFunds(address)": {
        "params": {
          "strategy": "address"
        }
      },
      "sweepTokensFrom(address,address[])": {
        "params": {
          "strategy": "address",
          "tokens": "list of token addresses"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferStrategyUpdaterRole(address)": {
        "details": "Set value to address(0) to disable the role and prevent future transfers",
        "params": {
          "newStrategyUpdater": "address of new strategy updater"
        }
      },
      "updateStrategy(address)": {
        "details": "Checks for matching `vault` and `depositToken` values",
        "params": {
          "newStrategy": "contract address of new strategy"
        }
      },
      "withdraw(uint256)": {
        "details": "If strategy is set, tries to withdraw from strategyIf strategy is NOT set, tries to withdraw from vault",
        "params": {
          "amount": "receipt tokens to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,uint256)": {
        "notice": "Event emitted after successful `deposit()`"
      },
      "Recovered(address,uint256)": {
        "notice": "Event emitted when Vault tokens are recovered"
      },
      "Reinvest(uint256,uint256)": {
        "notice": "Event emitted after reinvest. Used to track growth"
      },
      "TransferStrategyUpdaterRole(address,address)": {
        "notice": "Event emitted when `strategyUpdater` is updated"
      },
      "UpdateStrategy(address,address)": {
        "notice": "Event emitted when `strategyContract` is updated"
      },
      "Withdraw(address,uint256)": {
        "notice": "Event emitted after successful `withdraw()`"
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "VERSION_HASH()": {
        "notice": "keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward token balance that can be reinvested"
      },
      "deployStrategyFunds(uint256)": {
        "notice": "Deploy funds from Vault into a Strategy"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositOnBehalfOf(address,uint256)": {
        "notice": "Deposit on behalf of another address"
      },
      "depositToken()": {
        "notice": "Deposit token"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from Vault"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from Vault"
      },
      "reinvest()": {
        "notice": "Reinvest rewards from staking contract to deposit tokens"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "revokeDeployedFunds(address)": {
        "notice": "Revoke deployed `depositTokens` back into Vault"
      },
      "revokeStrategy()": {
        "notice": "Revokes current strategy"
      },
      "strategyContract()": {
        "notice": "Strategy contract"
      },
      "strategyUpdater()": {
        "notice": "Admin role to update strategy (separate to `owner`)"
      },
      "sweepTokensFrom(address,address[])": {
        "notice": "Sweeps tokens from Strategy to Vault"
      },
      "totalDeposits()": {
        "notice": "Total amount of `depositToken` managed by Vault"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "transferStrategyUpdaterRole(address)": {
        "notice": "Transfer admin role `strategyUpdater`"
      },
      "updateStrategy(address)": {
        "notice": "Updates strategy contract"
      },
      "version()": {
        "notice": "Vault version number"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw deposit tokens by redeeming receipt tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 861,
        "contract": "contracts/Vault.sol:Vault",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 864,
        "contract": "contracts/Vault.sol:Vault",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 869,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 875,
        "contract": "contracts/Vault.sol:Vault",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 879,
        "contract": "contracts/Vault.sol:Vault",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 895,
        "contract": "contracts/Vault.sol:Vault",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2140,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 27,
        "contract": "contracts/Vault.sol:Vault",
        "label": "depositToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)1615"
      },
      {
        "astId": 30,
        "contract": "contracts/Vault.sol:Vault",
        "label": "strategyContract",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 33,
        "contract": "contracts/Vault.sol:Vault",
        "label": "strategyUpdater",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1615": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}