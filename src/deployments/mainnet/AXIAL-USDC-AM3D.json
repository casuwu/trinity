{
  "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolRewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairPoolReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairExtraReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenCount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenIndex",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "swapPairRewardZap",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zapToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "zapContract",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxSlippage",
              "type": "uint256"
            }
          ],
          "internalType": "struct AxialStrategyForMetapoolLP.ZapSettings",
          "name": "_zapSettings",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct MasterChefStrategy.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "axialChef",
      "outputs": [
        {
          "internalType": "contract IAxialChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_extraTokenSwapPair",
          "type": "address"
        }
      ],
      "name": "setExtraRewardSwapPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPairExtraReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxSlippageBips",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
    "transactionIndex": 22,
    "gasUsed": "4279127",
    "logsBloom": "0x
    "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55",
    "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 50,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 51,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 52,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000384",
        "logIndex": 53,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 54,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 55,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000302404cb8f34713a8b8dbf9b4989a41252332068"
        ],
        "data": "0x",
        "logIndex": 56,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0x291cf692552bca17f75C40B6B89d74E9c4cB60D9",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 57,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      },
      {
        "transactionIndex": 22,
        "blockNumber": 10643977,
        "transactionHash": "0x514d92bd98d7556ea6c66590256250dbd8ba967b358553b646eee30064705030",
        "address": "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000291cf692552bca17f75c40b6b89d74e9c4cb60d9",
          "0x000000000000000000000000ba5f105a3e3d7c0eaa36aaa1e3be11d77f1a6162"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 58,
        "blockHash": "0xb689b20940093ff9d9e95ce6b5ba77481288e8ada1533b5f7c6a4bf725728b55"
      }
    ],
    "blockNumber": 10643977,
    "cumulativeGasUsed": "6585826",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Axial USDC-AM3D",
    "0xA57E0D32Aa27D3b1D5AFf6a8A786C6A4DADb818F",
    "0xcf8419a615c57511807236751c0af38db4ba3351",
    "0x5305A6c4DA88391F4A9045bF2ED57F4BF0cF4f62",
    "0x0000000000000000000000000000000000000000",
    "0x958C0d0baA8F220846d3966742D4Fb5edc5493D3",
    {
      "tokenCount": 4,
      "tokenIndex": 3,
      "swapPairRewardZap": "0x87dee1cc9ffd464b79e058ba20387c1984aed86a",
      "zapToken": "0xd586e7f844cea2f87f50152665bcbc2c279d8d70",
      "zapContract": "0xba5f105A3E3D7C0eAa36AAa1e3BE11D77F1A6162",
      "maxSlippage": 300
    },
    "5",
    "0x302404cb8F34713A8B8DBF9b4989A41252332068",
    {
      "minTokensToReinvest": "10000000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 900,
      "reinvestRewardBips": 100
    }
  ],
  "solcInputHash": "9446afd2bde40b18a0267ab747d9b11f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairPoolReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairExtraReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapPairRewardZap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"zapContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippage\",\"type\":\"uint256\"}],\"internalType\":\"struct AxialStrategyForMetapoolLP.ZapSettings\",\"name\":\"_zapSettings\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct MasterChefStrategy.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"axialChef\",\"outputs\":[{\"internalType\":\"contract IAxialChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extraTokenSwapPair\",\"type\":\"address\"}],\"name\":\"setExtraRewardSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPairExtraReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSlippageBips\",\"type\":\"uint256\"}],\"name\":\"updateMaxSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Deprecated; approvals should be handled in context of staking\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AxialStrategyForMetapoolLP.sol\":\"AxialStrategyForMetapoolLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x761751e4c7695848f01e6ebca020145de4b6f4d5e9b5a1f6fae21def20406762\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0xeaab679124488e8a2f6f3208a4ece97195d1d674b0935d56dc4ded963bfb67be\",\"license\":\"MIT\"},\"contracts/interfaces/IAxialChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IAxialChef {\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingAxial,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function userInfo(uint256 _pid, address _user) external view returns (uint256 amount, uint256 rewardDebt);\\n}\\n\",\"keccak256\":\"0xa61e3d5cabde1d596c30a3b8c4b23378bde779b202c12d9ff1be57e656129e61\",\"license\":\"MIT\"},\"contracts/interfaces/IAxialSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IAxialSwap {\\n    /**\\n     * @dev Assumes amounts to be 18 decimals. Use token with 18 decimals to addLiquidity or convert amount before!\\n     */\\n    function addLiquidity(\\n        uint256[] calldata amounts,\\n        uint256 minToMint,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function getTokenIndex(address tokenAddress) external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xf10de06c974595d01c05c6a447b35eb694c0b576d45c854829eaefd92aa0f344\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x899cb9f43560de458f6576c1534e9ed1504115787f0db61c856d9f1b4658d1c0\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x13cd04fbe9326420082d6aa105322eded7cbe7d4848d652a15ffca307b51088c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x0c300bb8b048c88d74d2a1e76ca9709b4dc1109cf9781d4afeaad3a7fe9518f8\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfc1bce446dad248893b01e2c3673129bb4a08f69053a3c0e6f2c8a57349f3a9d\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xc0e758ff3798955ec630efd36ac2f180c982d5a5aa52d65ddac3af249cbf17da\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0x5561e8a8e7df8c9c89a9782b1465cba09b75f2949696da28ed30d4d5458a3f7d\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/AxialStrategyForMetapoolLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma experimental ABIEncoderV2;\\npragma solidity 0.7.3;\\n\\nimport \\\"../interfaces/IAxialChef.sol\\\";\\nimport \\\"../interfaces/IAxialSwap.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"./MasterChefStrategy.sol\\\";\\n\\ncontract AxialStrategyForMetapoolLP is MasterChefStrategy {\\n    using SafeMath for uint256;\\n\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    IAxialChef public axialChef;\\n    ZapSettings private zapSettings;\\n\\n    /**\\n     * @dev IAxialSwap assumes amounts to be 18 decimals. Use token with 18 decimals!\\n     */\\n    struct ZapSettings {\\n        uint256 tokenCount;\\n        uint256 tokenIndex;\\n        address swapPairRewardZap;\\n        address zapToken;\\n        address zapContract;\\n        uint256 maxSlippage;\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward,\\n        address _swapPairExtraReward,\\n        address _stakingContract,\\n        ZapSettings memory _zapSettings,\\n        uint256 _pid,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    )\\n        MasterChefStrategy(\\n            _name,\\n            _depositToken,\\n            address(WAVAX), /*rewardToken=*/\\n            _poolRewardToken,\\n            _swapPairPoolReward,\\n            _swapPairExtraReward,\\n            _timelock,\\n            _pid,\\n            _strategySettings\\n        )\\n    {\\n        axialChef = IAxialChef(_stakingContract);\\n        zapSettings = _zapSettings;\\n        IERC20(zapSettings.zapToken).approve(zapSettings.zapContract, type(uint256).max);\\n    }\\n\\n    function _depositMasterchef(uint256 _pid, uint256 _amount) internal override {\\n        depositToken.approve(address(axialChef), _amount);\\n        axialChef.deposit(_pid, _amount);\\n    }\\n\\n    function _withdrawMasterchef(uint256 _pid, uint256 _amount) internal override {\\n        axialChef.withdraw(_pid, _amount);\\n    }\\n\\n    function _emergencyWithdraw(uint256 _pid) internal override {\\n        axialChef.emergencyWithdraw(_pid);\\n        depositToken.approve(address(axialChef), 0);\\n    }\\n\\n    function _pendingRewards(uint256 _pid, address _user)\\n        internal\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        )\\n    {\\n        (uint256 pendingAxial, address bonusTokenAddress, , uint256 pendingBonusToken) = axialChef.pendingTokens(\\n            _pid,\\n            _user\\n        );\\n        return (pendingAxial, pendingBonusToken, bonusTokenAddress);\\n    }\\n\\n    function _getRewards(uint256 _pid) internal override {\\n        axialChef.withdraw(_pid, 0);\\n    }\\n\\n    function _getDepositBalance(uint256 pid, address user) internal view override returns (uint256 amount) {\\n        (amount, ) = axialChef.userInfo(pid, user);\\n    }\\n\\n    function updateMaxSwapSlippage(uint256 _maxSlippageBips) external onlyDev {\\n        zapSettings.maxSlippage = _maxSlippageBips;\\n    }\\n\\n    function _getDepositFeeBips(\\n        uint256 /* pid */\\n    ) internal pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _getWithdrawFeeBips(\\n        uint256 /* pid */\\n    ) internal pure override returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _bip() internal pure override returns (uint256) {\\n        return 10000;\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal override returns (uint256 toAmount) {\\n        uint256 zapTokenAmount = DexLibrary.swap(\\n            fromAmount,\\n            address(rewardToken),\\n            zapSettings.zapToken,\\n            IPair(zapSettings.swapPairRewardZap)\\n        );\\n        uint256[] memory amounts = new uint256[](zapSettings.tokenCount);\\n        amounts[zapSettings.tokenIndex] = zapTokenAmount;\\n        uint256 slippage = zapTokenAmount.mul(zapSettings.maxSlippage).div(BIPS_DIVISOR);\\n        return\\n            IAxialSwap(zapSettings.zapContract).addLiquidity(amounts, zapTokenAmount.sub(slippage), type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0x1384c414f935f0cc8fd3c802acb694575bd1e5a8528b59b4575317117b75bd6f\",\"license\":\"MIT\"},\"contracts/strategies/MasterChefStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\n\\n/**\\n * @notice Adapter strategy for MasterChef.\\n */\\nabstract contract MasterChefStrategy is YakStrategyV2 {\\n    using SafeMath for uint256;\\n\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 adminFeeBips;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    uint256 public immutable PID;\\n    address private poolRewardToken;\\n    IPair private swapPairPoolReward;\\n    address public swapPairExtraReward;\\n    address public extraToken;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward,\\n        address _swapPairExtraReward,\\n        address _timelock,\\n        uint256 _pid,\\n        StrategySettings memory _strategySettings\\n    ) {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(_ecosystemToken);\\n        PID = _pid;\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n\\n        assignSwapPairSafely(_ecosystemToken, _poolRewardToken, _swapPairPoolReward);\\n        _setExtraRewardSwapPair(_swapPairExtraReward);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateAdminFee(_strategySettings.adminFeeBips);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    /**\\n     * @notice Initialization helper for Pair deposit tokens\\n     * @dev Checks that selected Pairs are valid for trading reward tokens\\n     * @dev Assigns values to IPair(swapPairToken0) and IPair(swapPairToken1)\\n     */\\n    function assignSwapPairSafely(\\n        address _ecosystemToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward\\n    ) private {\\n        if (_poolRewardToken != _ecosystemToken) {\\n            if (_poolRewardToken == IPair(_swapPairPoolReward).token0()) {\\n                require(\\n                    IPair(_swapPairPoolReward).token1() == _ecosystemToken,\\n                    \\\"Swap pair 'swapPairPoolReward' does not contain ecosystem token\\\"\\n                );\\n            } else if (_poolRewardToken == IPair(_swapPairPoolReward).token1()) {\\n                require(\\n                    IPair(_swapPairPoolReward).token0() == _ecosystemToken,\\n                    \\\"Swap pair 'swapPairPoolReward' does not contain ecosystem token\\\"\\n                );\\n            } else {\\n                revert(\\\"Swap pair 'swapPairPoolReward' does not contain pool reward token\\\");\\n            }\\n        }\\n        poolRewardToken = _poolRewardToken;\\n        swapPairPoolReward = IPair(_swapPairPoolReward);\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Deprecated; approvals should be handled in context of staking\\n     */\\n    function setAllowances() public override onlyOwner {\\n        revert(\\\"setAllowances::deprecated\\\");\\n    }\\n\\n    function setExtraRewardSwapPair(address _extraTokenSwapPair) external onlyDev {\\n        _setExtraRewardSwapPair(_extraTokenSwapPair);\\n    }\\n\\n    function _setExtraRewardSwapPair(address _extraTokenSwapPair) internal {\\n        if (_extraTokenSwapPair > address(0)) {\\n            if (IPair(_extraTokenSwapPair).token0() == address(rewardToken)) {\\n                extraToken = IPair(_extraTokenSwapPair).token1();\\n            } else {\\n                extraToken = IPair(_extraTokenSwapPair).token0();\\n            }\\n            swapPairExtraReward = _extraTokenSwapPair;\\n        } else {\\n            swapPairExtraReward = address(0);\\n            extraToken = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"MasterChefStrategyV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (\\n                uint256 poolTokenAmount,\\n                uint256 extraTokenAmount,\\n                uint256 rewardTokenBalance,\\n                uint256 estimatedTotalReward\\n            ) = _checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(rewardTokenBalance, poolTokenAmount, extraTokenAmount);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"MasterChefStrategyV1::transfer failed\\\"\\n        );\\n        uint256 depositFeeBips = _getDepositFeeBips(PID);\\n        uint256 depositFee = amount.mul(depositFeeBips).div(_bip());\\n        _mint(account, getSharesForDepositTokens(amount.sub(depositFee)));\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        require(depositTokenAmount > 0, \\\"MasterChefStrategyV1::withdraw\\\");\\n        _withdrawDepositTokens(depositTokenAmount);\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips(PID);\\n        uint256 withdrawFee = depositTokenAmount.mul(withdrawFeeBips).div(_bip());\\n        _safeTransfer(\\n            address(depositToken),\\n            msg.sender,\\n            depositTokenAmount.sub(withdrawFee)\\n        );\\n        _burn(msg.sender, amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private {\\n        _withdrawMasterchef(PID, amount);\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        (\\n            uint256 poolTokenAmount,\\n            uint256 extraTokenAmount,\\n            uint256 rewardTokenBalance,\\n            uint256 estimatedTotalReward\\n        ) = _checkReward();\\n        require(\\n            estimatedTotalReward >= MIN_TOKENS_TO_REINVEST,\\n            \\\"MasterChefStrategyV1::reinvest\\\"\\n        );\\n        _reinvest(rewardTokenBalance, poolTokenAmount, extraTokenAmount);\\n    }\\n\\n    function _convertPoolTokensIntoReward(uint256 poolTokenAmount)\\n        private\\n        returns (uint256)\\n    {\\n        if (address(rewardToken) == poolRewardToken) {\\n            return poolTokenAmount;\\n        }\\n        return\\n            DexLibrary.swap(\\n                poolTokenAmount,\\n                address(poolRewardToken),\\n                address(rewardToken),\\n                swapPairPoolReward\\n            );\\n    }\\n\\n    function _convertExtraTokensIntoReward(\\n        uint256 rewardTokenBalance,\\n        uint256 extraTokenAmount\\n    ) internal returns (uint256) {\\n        if (extraTokenAmount > 0) {\\n            if (swapPairExtraReward > address(0)) {\\n                return\\n                    DexLibrary.swap(\\n                        extraTokenAmount,\\n                        extraToken,\\n                        address(rewardToken),\\n                        IPair(swapPairExtraReward)\\n                    );\\n            }\\n\\n            uint256 avaxBalance = address(this).balance;\\n            if (avaxBalance > 0) {\\n                WAVAX.deposit{value: avaxBalance}();\\n            }\\n            return WAVAX.balanceOf(address(this)).sub(rewardTokenBalance);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `MasterChef`\\n     */\\n    function _reinvest(\\n        uint256 rewardTokenBalance,\\n        uint256 poolTokenAmount,\\n        uint256 extraTokenAmount\\n    ) private {\\n        _getRewards(PID);\\n        uint256 amount = rewardTokenBalance.add(\\n            _convertPoolTokensIntoReward(poolTokenAmount)\\n        );\\n        amount.add(_convertExtraTokensIntoReward(rewardTokenBalance, extraTokenAmount));\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount.sub(devFee).sub(reinvestFee));\\n\\n        _stakeDepositTokens(depositTokenAmount);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"MasterChefStrategyV1::_stakeDepositTokens\\\");\\n        _depositMasterchef(PID, amount);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(\\n            IERC20(token).transfer(to, value),\\n            \\\"MasterChefStrategyV1::TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _checkReward()\\n        internal\\n        view\\n        returns (\\n            uint256 _poolTokenAmount,\\n            uint256 _extraTokenAmount,\\n            uint256 _rewardTokenBalance,\\n            uint256 _estimatedTotalReward\\n        )\\n    {\\n        uint256 poolTokenBalance = IERC20(poolRewardToken).balanceOf(address(this));\\n        (\\n            uint256 pendingPoolTokenAmount,\\n            uint256 pendingExtraTokenAmount,\\n            address extraTokenAddress\\n        ) = _pendingRewards(PID, address(this));\\n        uint256 poolTokenAmount = poolTokenBalance.add(pendingPoolTokenAmount);\\n\\n        uint256 pendingRewardTokenAmount = poolRewardToken != address(rewardToken)\\n            ? DexLibrary.estimateConversionThroughPair(\\n                poolTokenAmount,\\n                poolRewardToken,\\n                address(rewardToken),\\n                swapPairPoolReward\\n            )\\n            : pendingPoolTokenAmount;\\n        uint256 pendingExtraTokenRewardAmount = 0;\\n        if (extraTokenAddress > address(0)) {\\n            if (extraTokenAddress == address(WAVAX)) {\\n                pendingExtraTokenRewardAmount = pendingExtraTokenAmount;\\n            } else if (swapPairExtraReward > address(0)) {\\n                pendingExtraTokenAmount = pendingExtraTokenAmount.add(IERC20(extraToken).balanceOf(address(this)));\\n                pendingExtraTokenRewardAmount = DexLibrary.estimateConversionThroughPair(\\n                        pendingExtraTokenAmount,\\n                        extraTokenAddress,\\n                        address(rewardToken),\\n                        IPair(swapPairExtraReward)\\n                    );\\n            }\\n        }\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this)).add(\\n            pendingExtraTokenRewardAmount\\n        );\\n        uint256 estimatedTotalReward = rewardTokenBalance.add(pendingRewardTokenAmount);\\n        return (\\n            poolTokenAmount,\\n            pendingExtraTokenAmount,\\n            rewardTokenBalance,\\n            estimatedTotalReward\\n        );\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        (, , , uint256 estimatedTotalReward) = _checkReward();\\n        return estimatedTotalReward;\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 depositBalance = totalDeposits();\\n        uint256 withdrawFeeBips = _getWithdrawFeeBips(PID);\\n        uint256 withdrawFee = depositBalance.mul(withdrawFeeBips).div(_bip());\\n        return depositBalance.sub(withdrawFee);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 depositBalance = _getDepositBalance(PID, address(this));\\n        return depositBalance;\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        _emergencyWithdraw(PID);\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"MasterChefStrategyV1::rescueDeployedFunds\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n\\n    /* VIRTUAL */\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount)\\n        internal\\n        virtual\\n        returns (uint256 toAmount);\\n\\n    function _depositMasterchef(uint256 pid, uint256 amount) internal virtual;\\n\\n    function _withdrawMasterchef(uint256 pid, uint256 amount) internal virtual;\\n\\n    function _emergencyWithdraw(uint256 pid) internal virtual;\\n\\n    function _getRewards(uint256 pid) internal virtual;\\n\\n    function _pendingRewards(uint256 pid, address user)\\n        internal\\n        view\\n        virtual\\n        returns (\\n            uint256 poolTokenAmount,\\n            uint256 extraTokenAmount,\\n            address extraTokenAddress\\n        );\\n\\n    function _getDepositBalance(uint256 pid, address user)\\n        internal\\n        view\\n        virtual\\n        returns (uint256 amount);\\n\\n    function _getDepositFeeBips(uint256 pid) internal view virtual returns (uint256);\\n\\n    function _getWithdrawFeeBips(uint256 pid) internal view virtual returns (uint256);\\n\\n    function _bip() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xf11714164e6860ca751842a0f0edf4dd484ae16734e65839602d1540a1ac98a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600960a0819052685969656c642059616b60b81b60c09081526200002c916000919062000c14565b506040805180820190915260038082526216549560ea1b6020909201918252620000599160019162000c14565b503480156200006757600080fd5b5060405162005403380380620054038339810160408190526200008a9162000dfb565b898973b31f66aa3c1e785363f0875a1b74e27b85fd66c78a8a8a8789886000620000b362000315565b600680546001600160a01b0319166001600160a01b03831690811790915560405191925090600090600080516020620053e3833981519152908290a3508851620001059060009060208c019062000c14565b50600980546001600160a01b03808b166001600160a01b031992831617909255600a8054928a16928216929092179091556080839052600b8054909116732d580f9cf2fb2d09bc411532988f2afda4e7beff1790556200016787878762000319565b620001728462000595565b80516200017f90620007aa565b60208101516200018f9062000832565b60408101516200019f9062000900565b6060810151620001af90620009ba565b620001bb600162000a74565b620001c68362000b1c565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234600080604051620001fa92919062000f74565b60405180910390a15050601680546001600160a01b03808f166001600160a01b0319928316179092558c5160175560208d01516018556040808e01516019805491851691841691909117905560608e0151601a8054918516918416919091179081905560808f0151601b805491861691909416179283905560a08f0151601c55905163095ea7b360e01b8152908316995063095ea7b39850620002ae9750911694506000199350600401915062000f509050565b602060405180830381600087803b158015620002c957600080fd5b505af1158015620002de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000304919062000dd9565b5050505050505050505050620010fa565b3390565b826001600160a01b0316826001600160a01b0316146200056657806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200036d57600080fd5b505afa15801562000382573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003a8919062000dbc565b6001600160a01b0316826001600160a01b031614156200047957826001600160a01b0316816001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040657600080fd5b505afa1580156200041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000441919062000dbc565b6001600160a01b031614620004735760405162461bcd60e51b81526004016200046a9062001055565b60405180910390fd5b62000566565b806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620004b357600080fd5b505afa158015620004c8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004ee919062000dbc565b6001600160a01b0316826001600160a01b031614156200054c57826001600160a01b0316816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200040657600080fd5b60405162461bcd60e51b81526004016200046a9062000fff565b601280546001600160a01b039384166001600160a01b0319918216179091556013805492909316911617905550565b6001600160a01b038116156200078a57600a5460408051630dfe168160e01b815290516001600160a01b0392831692841691630dfe1681916004808301926020929190829003018186803b158015620005ed57600080fd5b505afa15801562000602573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000628919062000dbc565b6001600160a01b03161415620006d357806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200067257600080fd5b505afa15801562000687573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006ad919062000dbc565b601580546001600160a01b0319166001600160a01b039290921691909117905562000769565b806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200070d57600080fd5b505afa15801562000722573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000748919062000dbc565b601580546001600160a01b0319166001600160a01b03929092169190911790555b601480546001600160a01b0319166001600160a01b038316179055620007a7565b601480546001600160a01b03199081169091556015805490911690555b50565b620007b462000315565b6001600160a01b0316620007c762000bd6565b6001600160a01b031614620007f05760405162461bcd60e51b81526004016200046a90620010a1565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c54826040516200082592919062000f74565b60405180910390a1600c55565b6200083c62000315565b6001600160a01b03166200084f62000bd6565b6001600160a01b031614620008785760405162461bcd60e51b81526004016200046a90620010a1565b612710620008b2600f546200089e6011548562000be560201b62001c091790919060201c565b62000be560201b62001c091790919060201c565b1115620008be57600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60105482604051620008f392919062000f74565b60405180910390a1601055565b6200090a62000315565b6001600160a01b03166200091d62000bd6565b6001600160a01b031614620009465760405162461bcd60e51b81526004016200046a90620010a1565b6127106200096c600f546200089e6010548562000be560201b62001c091790919060201c565b11156200097857600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d65172613160115482604051620009ad92919062000f74565b60405180910390a1601155565b620009c462000315565b6001600160a01b0316620009d762000bd6565b6001600160a01b03161462000a005760405162461bcd60e51b81526004016200046a90620010a1565b61271062000a266011546200089e6010548562000be560201b62001c091790919060201c565b111562000a3257600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f548260405162000a6792919062000f74565b60405180910390a1600f55565b62000a7e62000315565b6001600160a01b031662000a9162000bd6565b6001600160a01b03161462000aba5760405162461bcd60e51b81526004016200046a90620010a1565b600e5460ff161515811515141562000ad157600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859062000b1190839062000f69565b60405180910390a150565b62000b2662000315565b6001600160a01b031662000b3962000bd6565b6001600160a01b03161462000b625760405162461bcd60e51b81526004016200046a90620010a1565b6001600160a01b03811662000b8b5760405162461bcd60e51b81526004016200046a9062000f82565b6006546040516001600160a01b03808416921690600080516020620053e383398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031690565b60008282018381101562000c0d5760405162461bcd60e51b81526004016200046a9062000fc8565b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000c5757805160ff191683800117855562000c87565b8280016001018555821562000c87579182015b8281111562000c8757825182559160200191906001019062000c6a565b5062000c9592915062000c99565b5090565b5b8082111562000c95576000815560010162000c9a565b80516001600160a01b038116811462000cc857600080fd5b919050565b60006080828403121562000cdf578081fd5b604051608081016001600160401b038111828210171562000cfc57fe5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b600060c0828403121562000d3f578081fd5b60405160c081016001600160401b038111828210171562000d5c57fe5b8060405250809150825181526020830151602082015262000d806040840162000cb0565b604082015262000d936060840162000cb0565b606082015262000da66080840162000cb0565b608082015260a083015160a08201525092915050565b60006020828403121562000dce578081fd5b62000c0d8262000cb0565b60006020828403121562000deb578081fd5b8151801515811462000c0d578182fd5b6000806000806000806000806000806102408b8d03121562000e1b578586fd5b8a516001600160401b038082111562000e32578788fd5b818d0191508d601f83011262000e46578788fd5b81518181111562000e5357fe5b6020915062000e6b601f8201601f19168301620010d6565b8181528f8383860101111562000e7f57898afd5b895b8281101562000e9e57848101840151828201850152830162000e81565b8281111562000eaf578a8484840101525b509c5062000ec190508d820162000cb0565b9a50505062000ed360408c0162000cb0565b975062000ee360608c0162000cb0565b965062000ef360808c0162000cb0565b955062000f0360a08c0162000cb0565b945062000f148c60c08d0162000d2d565b93506101808b0151925062000f2d6101a08c0162000cb0565b915062000f3f8c6101c08d0162000ccd565b90509295989b9194979a5092959850565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b918252602082015260400190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252604190820152600080516020620053c383398151915260408201527f6f6573206e6f7420636f6e7461696e20706f6f6c2072657761726420746f6b656060820152603760f91b608082015260a00190565b6020808252603f90820152600080516020620053c383398151915260408201527f6f6573206e6f7420636f6e7461696e2065636f73797374656d20746f6b656e00606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6040518181016001600160401b0381118282101715620010f257fe5b604052919050565b60805161428162001142600039806107de528061098d5280610d545280610ef552806115ab5280611ec452806121855280612670528061297b5280612c0352506142816000f3fe608060405234801561001057600080fd5b50600436106103a45760003560e01c80638da5cb5b116101e9578063bd079f551161010f578063dd62ed3e116100ad578063ed24911d1161007c578063ed24911d146106f4578063f2fde38b146106fc578063f7c618c11461070f578063fdb5a03e14610717576103a4565b8063dd62ed3e146106a8578063dd8ce4d6146106bb578063e21ac825146106ce578063eab89a5a146106e1576103a4565b8063cff1b6ef116100e9578063cff1b6ef14610672578063d505accf14610685578063da09c72c14610698578063dbd9a4d4146106a0576103a4565b8063bd079f551461065a578063c4b24a4614610662578063c89039c51461066a576103a4565b8063a573c85611610187578063ac0d31ff11610156578063ac0d31ff14610624578063b52a321f14610637578063b6b55f251461063f578063b9e57b8014610652576103a4565b8063a573c856146105e3578063a8ae2b7c146105eb578063a9059cbb146105fe578063abff196314610611576103a4565b806395d89b41116101c357806395d89b41146105b857806399729ec1146105c05780639e4e7318146105d3578063a1a4ddeb146105db576103a4565b80638da5cb5b14610588578063909ac8f41461059d5780639291d563146105a5576103a4565b80634e77ace5116102ce5780637ae267731161026c5780638432e8941161023b5780638432e894146105475780638980f11f1461055a5780638aff733d1461056d5780638b73e60614610575576103a4565b80637ae26773146105065780637d882097146105195780637ecebe00146105215780638183723014610534576103a4565b80635eaec0e4116102a85780635eaec0e4146104db57806370a08231146104e3578063715018a6146104f6578063789139bc146104fe576103a4565b80634e77ace5146104ad5780634ebb7916146104c05780635ea682ea146104d3576103a4565b80632e1a7d4d116103465780633bdc6e72116103155780633bdc6e721461046c578063483c2ef0146104745780634a970be7146104875780634bebd1e71461049a576103a4565b80632e1a7d4d146104275780632f4f21e21461043c57806330adf81f1461044f578063313ce56714610457576103a4565b80630f23475d116103825780630f23475d146103fc57806318160ddd1461040457806320606b701461040c57806323b872dd14610414576103a4565b806306fdde03146103a957806307677111146103c7578063095ea7b3146103dc575b600080fd5b6103b161071f565b6040516103be9190613a6a565b60405180910390f35b6103cf6107ad565b6040516103be91906139e3565b6103ef6103ea3660046135e3565b6107b3565b6040516103be91906139d8565b6103cf6107ca565b6103cf610836565b6103cf61083c565b6103ef610422366004613536565b610860565b61043a610435366004613694565b610947565b005b61043a61044a3660046135e3565b610a34565b6103cf610a42565b61045f610a66565b6040516103be9190614143565b6103cf610a6b565b6103ef6104823660046134c6565b610a71565b61043a6104953660046137c7565b610a86565b61043a6104a83660046134c6565b610b1e565b61043a6104bb36600461360e565b610c02565b61043a6104ce366004613694565b610ca0565b6103cf610d4c565b6103cf610d52565b6103cf6104f13660046134c6565b610d76565b61043a610d95565b6103cf610e1e565b61043a6105143660046134fe565b610e24565b6103cf610eed565b6103cf61052f3660046134c6565b610f20565b61043a610542366004613694565b610f32565b61043a6105553660046134c6565b610fb1565b61043a6105683660046135e3565b610fe7565b6103cf6110f9565b61043a6105833660046134c6565b6110ff565b610590611205565b6040516103be91906138df565b610590611214565b61043a6105b33660046134c6565b611223565b6103b16112b6565b61043a6105ce366004613694565b611310565b6103cf6113be565b6105906113e2565b6105906113f1565b61043a6105f9366004613694565b611400565b6103ef61060c3660046135e3565b6114a8565b61043a61061f366004613694565b6114b5565b61043a610632366004613780565b6114e4565b6103ef6116eb565b61043a61064d366004613694565b6116f4565b6103cf6116fe565b6103cf61173f565b6103cf611745565b610590611759565b61043a610680366004613694565b611768565b61043a610693366004613576565b611810565b6105906118c5565b61043a6118d4565b6103cf6106b63660046134fe565b61192b565b6103cf6106c9366004613694565b611956565b61043a6106dc366004613694565b611990565b6103cf6106ef366004613694565b611a0f565b6103cf611a40565b61043a61070a3660046134c6565b611ad7565b610590611b98565b61043a611ba7565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107a55780601f1061077a576101008083540402835291602001916107a5565b820191906000526020600020905b81548152906001019060200180831161078857829003601f168201915b505050505081565b60105481565b60006107c0338484611c35565b5060015b92915050565b6000806107d5610eed565b905060006108027f0000000000000000000000000000000000000000000000000000000000000000611ce9565b90506000610821610811611cef565b61081b8585611cf5565b90611d2f565b905061082d8382611d71565b93505050505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061089a57506000198114155b156109305760006108c6856040518060600160405280602f81526020016141c8602f9139849190611daf565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109269085906139e3565b60405180910390a3505b61093b868686611ddb565b50600195945050505050565b600061095282611a0f565b90506000811161097d5760405162461bcd60e51b815260040161097490613d2a565b60405180910390fd5b61098681611ebf565b60006109b17f0000000000000000000000000000000000000000000000000000000000000000611ce9565b905060006109c0610811611cef565b6009549091506109e3906001600160a01b0316336109de8685611d71565b611ee9565b6109ed3385611f8a565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484604051610a2691906139e3565b60405180910390a250505050565b610a3e8282612064565b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b6009546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610adb90339030908a908a908a908a908a90600401613917565b600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b50505050610b173386612064565b5050505050565b610b26612212565b6001600160a01b0316610b37611205565b6001600160a01b031614610b5d5760405162461bcd60e51b815260040161097490613e78565b6001600160a01b03811660009081526008602052604090205460ff1615610b965760405162461bcd60e51b815260040161097490613c02565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610bc891611c09565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610c0a612212565b6001600160a01b0316610c1b611205565b6001600160a01b031614610c415760405162461bcd60e51b815260040161097490613e78565b600e5460ff1615158115151415610c5757600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610c959083906139d8565b60405180910390a150565b610ca8612212565b6001600160a01b0316610cb9611205565b6001600160a01b031614610cdf5760405162461bcd60e51b815260040161097490613e78565b60008111610cec57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610d19573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610c95929190613958565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b610d9d612212565b6001600160a01b0316610dae611205565b6001600160a01b031614610dd45760405162461bcd60e51b815260040161097490613e78565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b600d5481565b610e2c612212565b6001600160a01b0316610e3d611205565b6001600160a01b031614610e635760405162461bcd60e51b815260040161097490613e78565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610e92908490600090600401613958565b602060405180830381600087803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee4919061362a565b610a3e57600080fd5b600080610f1a7f000000000000000000000000000000000000000000000000000000000000000030612216565b91505090565b60056020526000908152604090205481565b610f3a612212565b6001600160a01b0316610f4b611205565b6001600160a01b031614610f715760405162461bcd60e51b815260040161097490613e78565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c5482604051610fa49291906140fd565b60405180910390a1600c55565b600b546001600160a01b03163314610fdb5760405162461bcd60e51b815260040161097490613fd5565b610fe4816122b9565b50565b610fef612212565b6001600160a01b0316611000611205565b6001600160a01b0316146110265760405162461bcd60e51b815260040161097490613e78565b6000811161103357600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906110619033908590600401613958565b602060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b3919061362a565b6110bc57600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516110ed929190613958565b60405180910390a15050565b600f5481565b611107612212565b6001600160a01b0316611118611205565b6001600160a01b03161461113e5760405162461bcd60e51b815260040161097490613e78565b6000600754116111605760405162461bcd60e51b815260040161097490613b48565b6001600160a01b03811660009081526008602052604090205460ff16151560011461119d5760405162461bcd60e51b815260040161097490613d61565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546111cb906001611d71565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b6014546001600160a01b031681565b600b546001600160a01b0316331461124d5760405162461bcd60e51b815260040161097490613fd5565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009161128c916001600160a01b03909116908490613971565b60405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107a55780601f1061077a576101008083540402835291602001916107a5565b611318612212565b6001600160a01b0316611329611205565b6001600160a01b03161461134f5760405162461bcd60e51b815260040161097490613e78565b612710611373600f5461136d60105485611c0990919063ffffffff16565b90611c09565b111561137e57600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131601154826040516113b19291906140fd565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6015546001600160a01b031681565b6016546001600160a01b031681565b611408612212565b6001600160a01b0316611419611205565b6001600160a01b03161461143f5760405162461bcd60e51b815260040161097490613e78565b61271061145d60115461136d60105485611c0990919063ffffffff16565b111561146857600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f548260405161149b9291906140fd565b60405180910390a1600f55565b60006107c0338484611ddb565b600b546001600160a01b031633146114df5760405162461bcd60e51b815260040161097490613fd5565b601c55565b6114ec612212565b6001600160a01b03166114fd611205565b6001600160a01b0316146115235760405162461bcd60e51b815260040161097490613e78565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115549030906004016138df565b60206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a491906136ac565b90506115cf7f00000000000000000000000000000000000000000000000000000000000000006124d6565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906116009030906004016138df565b60206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165091906136ac565b90508361165d8284611d71565b101561167b5760405162461bcd60e51b815260040161097490613c39565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346116a4610eed565b6002546040516116b59291906140fd565b60405180910390a1600e5460ff16151560011480156116d657506001831515145b156116e5576116e56000610c02565b50505050565b600e5460ff1681565b610fe43382612064565b600080611709611745565b9050600c5481106117375761172f61271061081b600f5484611cf590919063ffffffff16565b915050610833565b600091505090565b600c5481565b6000806117506125db565b94505050505090565b6009546001600160a01b031681565b611770612212565b6001600160a01b0316611781611205565b6001600160a01b0316146117a75760405162461bcd60e51b815260040161097490613e78565b6127106117c5600f5461136d60115485611c0990919063ffffffff16565b11156117d057600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516118039291906140fd565b60405180910390a1601055565b428410156118305760405162461bcd60e51b815260040161097490613cf3565b6001600160a01b0387166000908152600560209081526040808320805460018101909155905161188b927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c91016139ec565b6040516020818303038152906040528051906020012090506118b0888286868661289c565b6118bb888888611c35565b5050505050505050565b600b546001600160a01b031681565b6118dc612212565b6001600160a01b03166118ed611205565b6001600160a01b0316146119135760405162461bcd60e51b815260040161097490613e78565b60405162461bcd60e51b815260040161097490613f9e565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061196c611963610eed565b60025490611cf5565b611977575080610d90565b6107c4611982610eed565b60025461081b908590611cf5565b611998612212565b6001600160a01b03166119a9611205565b6001600160a01b0316146119cf5760405162461bcd60e51b815260040161097490613e78565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d5482604051611a029291906140fd565b60405180910390a1600d55565b6000611a1c611963610eed565b611a2857506000610d90565b6107c460025461081b611a39610eed565b8590611cf5565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611a759190613839565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611aa7612972565b30604051602001611abc959493929190613a20565b60405160208183030381529060405280519060200120905090565b611adf612212565b6001600160a01b0316611af0611205565b6001600160a01b031614611b165760405162461bcd60e51b815260040161097490613e78565b6001600160a01b038116611b3c5760405162461bcd60e51b815260040161097490613a7d565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314611bc65760405162461bcd60e51b815260040161097490613ada565b600080600080611bd46125db565b9350935093509350600c54811015611bfe5760405162461bcd60e51b81526004016109749061400c565b6116e5828585612976565b600082820183811015611c2e5760405162461bcd60e51b815260040161097490613b11565b9392505050565b6001600160a01b038316611c5b5760405162461bcd60e51b815260040161097490613ead565b6001600160a01b038216611c815760405162461bcd60e51b81526004016109749061407a565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611cdc9085906139e3565b60405180910390a3505050565b50600090565b61271090565b600082611d04575060006107c4565b82820282848281611d1157fe5b0414611c2e5760405162461bcd60e51b815260040161097490613e1b565b6000611c2e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612abd565b6000611c2e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152505b60008184841115611dd35760405162461bcd60e51b81526004016109749190613a6a565b505050900390565b6001600160a01b038216611e015760405162461bcd60e51b815260040161097490613ee4565b611e3e816040518060600160405280602e815260200161421e602e91396001600160a01b0386166000908152600460205260409020549190611daf565b6001600160a01b038085166000908152600460205260408082209390935590841681522054611e6d9082611c09565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cdc9085906139e3565b610fe47f000000000000000000000000000000000000000000000000000000000000000082612af4565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611f179085908590600401613958565b602060405180830381600087803b158015611f3157600080fd5b505af1158015611f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f69919061362a565b611f855760405162461bcd60e51b815260040161097490613c96565b505050565b611fc7816040518060600160405280602781526020016141f7602791396001600160a01b0385166000908152600460205260409020549190611daf565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612017816040518060600160405280602781526020016141a1602791396002549190611daf565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120589085906139e3565b60405180910390a35050565b600e5460ff16151560011461208b5760405162461bcd60e51b815260040161097490614043565b600d54156120c3576000806000806120a16125db565b9350935093509350600d548111156120be576120be828585612976565b505050505b6009546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd90612110903390309086906004016138f3565b602060405180830381600087803b15801561212a57600080fd5b505af115801561213e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612162919061362a565b61217e5760405162461bcd60e51b815260040161097490613f41565b60006121a97f0000000000000000000000000000000000000000000000000000000000000000611ce9565b905060006121b8610811611cef565b90506121d0846121cb6106c98685611d71565b612b5c565b6121d983612bde565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610a2691906139e3565b3390565b6016546040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906393f1a40b9061226290869086906004016140e6565b604080518083038186803b15801561227957600080fd5b505afa15801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b191906137a4565b509392505050565b6001600160a01b038116156124b757600a54604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692841691630dfe1681916004808301926020929190829003018186803b15801561232857600080fd5b505afa15801561233c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236091906134e2565b6001600160a01b0316141561240557806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e091906134e2565b601580546001600160a01b0319166001600160a01b0392909216919091179055612497565b806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561243e57600080fd5b505afa158015612452573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247691906134e2565b601580546001600160a01b0319166001600160a01b03929092169190911790555b601480546001600160a01b0319166001600160a01b038316179055610fe4565b601480546001600160a01b031990811690915560158054909116905550565b6016546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635312ea8e9061251f9084906004016139e3565b600060405180830381600087803b15801561253957600080fd5b505af115801561254d573d6000803e3d6000fd5b505060095460165460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506125899290911690600090600401613958565b602060405180830381600087803b1580156125a357600080fd5b505af11580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e919061362a565b6012546040516370a0823160e01b815260009182918291829182916001600160a01b0316906370a08231906126149030906004016138df565b60206040518083038186803b15801561262c57600080fd5b505afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266491906136ac565b905060008060006126957f000000000000000000000000000000000000000000000000000000000000000030612c28565b9194509250905060006126a88585611c09565b600a546012549192506000916001600160a01b03908116911614156126cd57846126f2565b601254600a546013546126f29285926001600160a01b03918216929082169116612ce7565b905060006001600160a01b038416156127f1576001600160a01b03841673b31f66aa3c1e785363f0875a1b74e27b85fd66c714156127315750836127f1565b6014546001600160a01b0316156127f1576015546040516370a0823160e01b81526127cb916001600160a01b0316906370a08231906127749030906004016138df565b60206040518083038186803b15801561278c57600080fd5b505afa1580156127a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c491906136ac565b8690611c09565b600a546014549196506127ee91879187916001600160a01b039182169116612ce7565b90505b600a546040516370a0823160e01b81526000916128789184916001600160a01b0316906370a08231906128289030906004016138df565b60206040518083038186803b15801561284057600080fd5b505afa158015612854573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136d91906136ac565b905060006128868285611c09565b949d969c50909a50929850939650505050505050565b60006128a6611a40565b856040516020016128b89291906138a9565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516128f59493929190613a4c565b6020604051602081039080840390855afa158015612917573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061294d5750866001600160a01b0316816001600160a01b0316145b6129695760405162461bcd60e51b815260040161097490613ba5565b50505050505050565b4690565b61299f7f0000000000000000000000000000000000000000000000000000000000000000612dc2565b60006129b46129ad84612e23565b8590611c09565b90506129ca6129c38584612e6b565b8290611c09565b5060006129e861271061081b60115485611cf590919063ffffffff16565b90508015612a0d57600a54600b54612a0d916001600160a01b03908116911683611ee9565b6000612a2a61271061081b600f5486611cf590919063ffffffff16565b90508015612a4957600a54612a49906001600160a01b03163383611ee9565b6000612a67612a6283612a5c8787611d71565b90611d71565b612fbe565b9050612a7281612bde565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612a9b610eed565b600254604051612aac9291906140fd565b60405180910390a150505050505050565b60008183612ade5760405162461bcd60e51b81526004016109749190613a6a565b506000838581612aea57fe5b0495945050505050565b601654604051630441a3e760e41b81526001600160a01b039091169063441a3e7090612b2690859085906004016140fd565b600060405180830381600087803b158015612b4057600080fd5b505af1158015612b54573d6000803e3d6000fd5b505050505050565b600254612b699082611c09565b6002556001600160a01b038216600090815260046020526040902054612b8f9082611c09565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120589085906139e3565b60008111612bfe5760405162461bcd60e51b815260040161097490613dbe565b610fe47f00000000000000000000000000000000000000000000000000000000000000008261310d565b6016546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600091829182918291829182916001600160a01b039091169063ffcd426390612c80908b908b906004016140e6565b60006040518083038186803b158015612c9857600080fd5b505afa158015612cac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cd491908101906136c4565b9298509196509450505050509250925092565b600080612cf485856131e1565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b9190613646565b5091509150866001600160a01b0316836001600160a01b031614612d8b57905b612db688836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613212565b98975050505050505050565b601654604051630441a3e760e41b81526001600160a01b039091169063441a3e7090612df59084906000906004016140fd565b600060405180830381600087803b158015612e0f57600080fd5b505af1158015610b17573d6000803e3d6000fd5b601254600a546000916001600160a01b0391821691161415612e46575080610d90565b601254600a546013546107c49285926001600160a01b0391821692908216911661325a565b60008115612fb5576014546001600160a01b031615612eb057601554600a54601454612ea99285926001600160a01b0391821692908216911661325a565b90506107c4565b478015612f205773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612f0657600080fd5b505af1158015612f1a573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b8152612fad90859073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190612f5d9030906004016138df565b60206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5c91906136ac565b9150506107c4565b50600092915050565b600a54601a546019546000928392612fe79286926001600160a01b03908116928116911661325a565b9050606060176000015467ffffffffffffffff8111801561300757600080fd5b50604051908082528060200260200182016040528015613031578160200160208202803683370190505b50905081816017600101548151811061304657fe5b602002602001018181525050600061307261271061081b60176005015486611cf590919063ffffffff16565b601b549091506001600160a01b0316634d49e87d836130918685611d71565b6000196040518463ffffffff1660e01b81526004016130b29392919061398b565b602060405180830381600087803b1580156130cc57600080fd5b505af11580156130e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310491906136ac565b95945050505050565b60095460165460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613143929116908590600401613958565b602060405180830381600087803b15801561315d57600080fd5b505af1158015613171573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613195919061362a565b506016546040517fe2bbb1580000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e2bbb15890612b2690859085906004016140fd565b600080826001600160a01b0316846001600160a01b031610613204578284613207565b83835b915091509250929050565b600080613221856103e5611cf5565b9050600061322f8285611cf5565b905060006132438361136d886103e8611cf5565b905061324f8282611d2f565b979650505050505050565b60008061326785856131e1565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156132a657600080fd5b505afa1580156132ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132de9190613646565b5091509150866001600160a01b0316836001600160a01b0316146132fe57905b60008061332c8a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613212565b9050886001600160a01b0316856001600160a01b03161461334957905b61335489888c6133fb565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f906133ac908590859030906024810161410b565b600060405180830381600087803b1580156133c657600080fd5b505af11580156133da573d6000803e3d6000fd5b505050508181116133eb57816133ed565b805b9a9950505050505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906134299085908590600401613958565b602060405180830381600087803b15801561344357600080fd5b505af1158015613457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347b919061362a565b611f855760405162461bcd60e51b8152600401610974906140b1565b80516dffffffffffffffffffffffffffff81168114610d9057600080fd5b803560ff81168114610d9057600080fd5b6000602082840312156134d7578081fd5b8135611c2e8161417d565b6000602082840312156134f3578081fd5b8151611c2e8161417d565b60008060408385031215613510578081fd5b823561351b8161417d565b9150602083013561352b8161417d565b809150509250929050565b60008060006060848603121561354a578081fd5b83356135558161417d565b925060208401356135658161417d565b929592945050506040919091013590565b600080600080600080600060e0888a031215613590578283fd5b873561359b8161417d565b965060208801356135ab8161417d565b955060408801359450606088013593506135c7608089016134b5565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156135f5578182fd5b82356136008161417d565b946020939093013593505050565b60006020828403121561361f578081fd5b8135611c2e81614192565b60006020828403121561363b578081fd5b8151611c2e81614192565b60008060006060848603121561365a578283fd5b61366384613497565b925061367160208501613497565b9150604084015163ffffffff81168114613689578182fd5b809150509250925092565b6000602082840312156136a5578081fd5b5035919050565b6000602082840312156136bd578081fd5b5051919050565b600080600080608085870312156136d9578384fd5b8451935060208501516136eb8161417d565b604086015190935067ffffffffffffffff80821115613708578384fd5b818701915087601f83011261371b578384fd5b81518181111561372757fe5b604051601f8201601f19168101602001838111828210171561374557fe5b6040528181528382016020018a101561375c578586fd5b61376d826020830160208701614151565b6060989098015196999598505050505050565b60008060408385031215613792578182fd5b82359150602083013561352b81614192565b600080604083850312156137b6578182fd5b505080516020909101519092909150565b600080600080600060a086880312156137de578283fd5b85359450602086013593506137f5604087016134b5565b94979396509394606081013594506080013592915050565b60008151808452613825816020860160208601614151565b601f01601f19169290920160200192915050565b6000808354600180821660008114613858576001811461386f5761389e565b60ff198316865260028304607f168601935061389e565b600283048786526020808720875b838110156138965781548a82015290850190820161387d565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b606080825284519082018190526000906020906080840190828801845b828110156139c4578151845292840192908401906001016139a8565b505050908301949094525060400152919050565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252611c2e602083018461380d565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a7265736375654465706c60408201527f6f79656446756e64730000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4d617374657243686566537472617465677956313a3a5452414e534645525f4660408201527f524f4d5f4641494c454400000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a77697468647261770000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a5f7374616b654465706f60408201527f736974546f6b656e730000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526025908201527f4d617374657243686566537472617465677956313a3a7472616e73666572206660408201527f61696c6564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f736574416c6c6f77616e6365733a3a6465707265636174656400000000000000604082015260600190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a7265696e766573740000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a5f6465706f7369740000604082015260600190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60008582528460208301526001600160a01b038416604083015260806060830152614139608083018461380d565b9695505050505050565b60ff91909116815260200190565b60005b8381101561416c578181015183820152602001614154565b838111156116e55750506000910152565b6001600160a01b0381168114610fe457600080fd5b8015158114610fe457600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212206ed0fbd4b947db9ea6ec7c638afb41eb87414101d2d26f00ea32cc615d2b972d64736f6c6343000703003353776170207061697220277377617050616972506f6f6c5265776172642720648be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103a45760003560e01c80638da5cb5b116101e9578063bd079f551161010f578063dd62ed3e116100ad578063ed24911d1161007c578063ed24911d146106f4578063f2fde38b146106fc578063f7c618c11461070f578063fdb5a03e14610717576103a4565b8063dd62ed3e146106a8578063dd8ce4d6146106bb578063e21ac825146106ce578063eab89a5a146106e1576103a4565b8063cff1b6ef116100e9578063cff1b6ef14610672578063d505accf14610685578063da09c72c14610698578063dbd9a4d4146106a0576103a4565b8063bd079f551461065a578063c4b24a4614610662578063c89039c51461066a576103a4565b8063a573c85611610187578063ac0d31ff11610156578063ac0d31ff14610624578063b52a321f14610637578063b6b55f251461063f578063b9e57b8014610652576103a4565b8063a573c856146105e3578063a8ae2b7c146105eb578063a9059cbb146105fe578063abff196314610611576103a4565b806395d89b41116101c357806395d89b41146105b857806399729ec1146105c05780639e4e7318146105d3578063a1a4ddeb146105db576103a4565b80638da5cb5b14610588578063909ac8f41461059d5780639291d563146105a5576103a4565b80634e77ace5116102ce5780637ae267731161026c5780638432e8941161023b5780638432e894146105475780638980f11f1461055a5780638aff733d1461056d5780638b73e60614610575576103a4565b80637ae26773146105065780637d882097146105195780637ecebe00146105215780638183723014610534576103a4565b80635eaec0e4116102a85780635eaec0e4146104db57806370a08231146104e3578063715018a6146104f6578063789139bc146104fe576103a4565b80634e77ace5146104ad5780634ebb7916146104c05780635ea682ea146104d3576103a4565b80632e1a7d4d116103465780633bdc6e72116103155780633bdc6e721461046c578063483c2ef0146104745780634a970be7146104875780634bebd1e71461049a576103a4565b80632e1a7d4d146104275780632f4f21e21461043c57806330adf81f1461044f578063313ce56714610457576103a4565b80630f23475d116103825780630f23475d146103fc57806318160ddd1461040457806320606b701461040c57806323b872dd14610414576103a4565b806306fdde03146103a957806307677111146103c7578063095ea7b3146103dc575b600080fd5b6103b161071f565b6040516103be9190613a6a565b60405180910390f35b6103cf6107ad565b6040516103be91906139e3565b6103ef6103ea3660046135e3565b6107b3565b6040516103be91906139d8565b6103cf6107ca565b6103cf610836565b6103cf61083c565b6103ef610422366004613536565b610860565b61043a610435366004613694565b610947565b005b61043a61044a3660046135e3565b610a34565b6103cf610a42565b61045f610a66565b6040516103be9190614143565b6103cf610a6b565b6103ef6104823660046134c6565b610a71565b61043a6104953660046137c7565b610a86565b61043a6104a83660046134c6565b610b1e565b61043a6104bb36600461360e565b610c02565b61043a6104ce366004613694565b610ca0565b6103cf610d4c565b6103cf610d52565b6103cf6104f13660046134c6565b610d76565b61043a610d95565b6103cf610e1e565b61043a6105143660046134fe565b610e24565b6103cf610eed565b6103cf61052f3660046134c6565b610f20565b61043a610542366004613694565b610f32565b61043a6105553660046134c6565b610fb1565b61043a6105683660046135e3565b610fe7565b6103cf6110f9565b61043a6105833660046134c6565b6110ff565b610590611205565b6040516103be91906138df565b610590611214565b61043a6105b33660046134c6565b611223565b6103b16112b6565b61043a6105ce366004613694565b611310565b6103cf6113be565b6105906113e2565b6105906113f1565b61043a6105f9366004613694565b611400565b6103ef61060c3660046135e3565b6114a8565b61043a61061f366004613694565b6114b5565b61043a610632366004613780565b6114e4565b6103ef6116eb565b61043a61064d366004613694565b6116f4565b6103cf6116fe565b6103cf61173f565b6103cf611745565b610590611759565b61043a610680366004613694565b611768565b61043a610693366004613576565b611810565b6105906118c5565b61043a6118d4565b6103cf6106b63660046134fe565b61192b565b6103cf6106c9366004613694565b611956565b61043a6106dc366004613694565b611990565b6103cf6106ef366004613694565b611a0f565b6103cf611a40565b61043a61070a3660046134c6565b611ad7565b610590611b98565b61043a611ba7565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107a55780601f1061077a576101008083540402835291602001916107a5565b820191906000526020600020905b81548152906001019060200180831161078857829003601f168201915b505050505081565b60105481565b60006107c0338484611c35565b5060015b92915050565b6000806107d5610eed565b905060006108027f0000000000000000000000000000000000000000000000000000000000000000611ce9565b90506000610821610811611cef565b61081b8585611cf5565b90611d2f565b905061082d8382611d71565b93505050505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061089a57506000198114155b156109305760006108c6856040518060600160405280602f81526020016141c8602f9139849190611daf565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906109269085906139e3565b60405180910390a3505b61093b868686611ddb565b50600195945050505050565b600061095282611a0f565b90506000811161097d5760405162461bcd60e51b815260040161097490613d2a565b60405180910390fd5b61098681611ebf565b60006109b17f0000000000000000000000000000000000000000000000000000000000000000611ce9565b905060006109c0610811611cef565b6009549091506109e3906001600160a01b0316336109de8685611d71565b611ee9565b6109ed3385611f8a565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436484604051610a2691906139e3565b60405180910390a250505050565b610a3e8282612064565b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b6009546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610adb90339030908a908a908a908a908a90600401613917565b600060405180830381600087803b158015610af557600080fd5b505af1158015610b09573d6000803e3d6000fd5b50505050610b173386612064565b5050505050565b610b26612212565b6001600160a01b0316610b37611205565b6001600160a01b031614610b5d5760405162461bcd60e51b815260040161097490613e78565b6001600160a01b03811660009081526008602052604090205460ff1615610b965760405162461bcd60e51b815260040161097490613c02565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610bc891611c09565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610c0a612212565b6001600160a01b0316610c1b611205565b6001600160a01b031614610c415760405162461bcd60e51b815260040161097490613e78565b600e5460ff1615158115151415610c5757600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610c959083906139d8565b60405180910390a150565b610ca8612212565b6001600160a01b0316610cb9611205565b6001600160a01b031614610cdf5760405162461bcd60e51b815260040161097490613e78565b60008111610cec57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610d19573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610c95929190613958565b60115481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6001600160a01b0381166000908152600460205260409020545b919050565b610d9d612212565b6001600160a01b0316610dae611205565b6001600160a01b031614610dd45760405162461bcd60e51b815260040161097490613e78565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b600d5481565b610e2c612212565b6001600160a01b0316610e3d611205565b6001600160a01b031614610e635760405162461bcd60e51b815260040161097490613e78565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610e92908490600090600401613958565b602060405180830381600087803b158015610eac57600080fd5b505af1158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee4919061362a565b610a3e57600080fd5b600080610f1a7f000000000000000000000000000000000000000000000000000000000000000030612216565b91505090565b60056020526000908152604090205481565b610f3a612212565b6001600160a01b0316610f4b611205565b6001600160a01b031614610f715760405162461bcd60e51b815260040161097490613e78565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c5482604051610fa49291906140fd565b60405180910390a1600c55565b600b546001600160a01b03163314610fdb5760405162461bcd60e51b815260040161097490613fd5565b610fe4816122b9565b50565b610fef612212565b6001600160a01b0316611000611205565b6001600160a01b0316146110265760405162461bcd60e51b815260040161097490613e78565b6000811161103357600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb906110619033908590600401613958565b602060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b3919061362a565b6110bc57600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516110ed929190613958565b60405180910390a15050565b600f5481565b611107612212565b6001600160a01b0316611118611205565b6001600160a01b03161461113e5760405162461bcd60e51b815260040161097490613e78565b6000600754116111605760405162461bcd60e51b815260040161097490613b48565b6001600160a01b03811660009081526008602052604090205460ff16151560011461119d5760405162461bcd60e51b815260040161097490613d61565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546111cb906001611d71565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b6014546001600160a01b031681565b600b546001600160a01b0316331461124d5760405162461bcd60e51b815260040161097490613fd5565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009161128c916001600160a01b03909116908490613971565b60405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107a55780601f1061077a576101008083540402835291602001916107a5565b611318612212565b6001600160a01b0316611329611205565b6001600160a01b03161461134f5760405162461bcd60e51b815260040161097490613e78565b612710611373600f5461136d60105485611c0990919063ffffffff16565b90611c09565b111561137e57600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131601154826040516113b19291906140fd565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6015546001600160a01b031681565b6016546001600160a01b031681565b611408612212565b6001600160a01b0316611419611205565b6001600160a01b03161461143f5760405162461bcd60e51b815260040161097490613e78565b61271061145d60115461136d60105485611c0990919063ffffffff16565b111561146857600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f548260405161149b9291906140fd565b60405180910390a1600f55565b60006107c0338484611ddb565b600b546001600160a01b031633146114df5760405162461bcd60e51b815260040161097490613fd5565b601c55565b6114ec612212565b6001600160a01b03166114fd611205565b6001600160a01b0316146115235760405162461bcd60e51b815260040161097490613e78565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906115549030906004016138df565b60206040518083038186803b15801561156c57600080fd5b505afa158015611580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a491906136ac565b90506115cf7f00000000000000000000000000000000000000000000000000000000000000006124d6565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906116009030906004016138df565b60206040518083038186803b15801561161857600080fd5b505afa15801561162c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165091906136ac565b90508361165d8284611d71565b101561167b5760405162461bcd60e51b815260040161097490613c39565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346116a4610eed565b6002546040516116b59291906140fd565b60405180910390a1600e5460ff16151560011480156116d657506001831515145b156116e5576116e56000610c02565b50505050565b600e5460ff1681565b610fe43382612064565b600080611709611745565b9050600c5481106117375761172f61271061081b600f5484611cf590919063ffffffff16565b915050610833565b600091505090565b600c5481565b6000806117506125db565b94505050505090565b6009546001600160a01b031681565b611770612212565b6001600160a01b0316611781611205565b6001600160a01b0316146117a75760405162461bcd60e51b815260040161097490613e78565b6127106117c5600f5461136d60115485611c0990919063ffffffff16565b11156117d057600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516118039291906140fd565b60405180910390a1601055565b428410156118305760405162461bcd60e51b815260040161097490613cf3565b6001600160a01b0387166000908152600560209081526040808320805460018101909155905161188b927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c91016139ec565b6040516020818303038152906040528051906020012090506118b0888286868661289c565b6118bb888888611c35565b5050505050505050565b600b546001600160a01b031681565b6118dc612212565b6001600160a01b03166118ed611205565b6001600160a01b0316146119135760405162461bcd60e51b815260040161097490613e78565b60405162461bcd60e51b815260040161097490613f9e565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061196c611963610eed565b60025490611cf5565b611977575080610d90565b6107c4611982610eed565b60025461081b908590611cf5565b611998612212565b6001600160a01b03166119a9611205565b6001600160a01b0316146119cf5760405162461bcd60e51b815260040161097490613e78565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d5482604051611a029291906140fd565b60405180910390a1600d55565b6000611a1c611963610eed565b611a2857506000610d90565b6107c460025461081b611a39610eed565b8590611cf5565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611a759190613839565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611aa7612972565b30604051602001611abc959493929190613a20565b60405160208183030381529060405280519060200120905090565b611adf612212565b6001600160a01b0316611af0611205565b6001600160a01b031614611b165760405162461bcd60e51b815260040161097490613e78565b6001600160a01b038116611b3c5760405162461bcd60e51b815260040161097490613a7d565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314611bc65760405162461bcd60e51b815260040161097490613ada565b600080600080611bd46125db565b9350935093509350600c54811015611bfe5760405162461bcd60e51b81526004016109749061400c565b6116e5828585612976565b600082820183811015611c2e5760405162461bcd60e51b815260040161097490613b11565b9392505050565b6001600160a01b038316611c5b5760405162461bcd60e51b815260040161097490613ead565b6001600160a01b038216611c815760405162461bcd60e51b81526004016109749061407a565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611cdc9085906139e3565b60405180910390a3505050565b50600090565b61271090565b600082611d04575060006107c4565b82820282848281611d1157fe5b0414611c2e5760405162461bcd60e51b815260040161097490613e1b565b6000611c2e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612abd565b6000611c2e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152505b60008184841115611dd35760405162461bcd60e51b81526004016109749190613a6a565b505050900390565b6001600160a01b038216611e015760405162461bcd60e51b815260040161097490613ee4565b611e3e816040518060600160405280602e815260200161421e602e91396001600160a01b0386166000908152600460205260409020549190611daf565b6001600160a01b038085166000908152600460205260408082209390935590841681522054611e6d9082611c09565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611cdc9085906139e3565b610fe47f000000000000000000000000000000000000000000000000000000000000000082612af4565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90611f179085908590600401613958565b602060405180830381600087803b158015611f3157600080fd5b505af1158015611f45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f69919061362a565b611f855760405162461bcd60e51b815260040161097490613c96565b505050565b611fc7816040518060600160405280602781526020016141f7602791396001600160a01b0385166000908152600460205260409020549190611daf565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612017816040518060600160405280602781526020016141a1602791396002549190611daf565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120589085906139e3565b60405180910390a35050565b600e5460ff16151560011461208b5760405162461bcd60e51b815260040161097490614043565b600d54156120c3576000806000806120a16125db565b9350935093509350600d548111156120be576120be828585612976565b505050505b6009546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd90612110903390309086906004016138f3565b602060405180830381600087803b15801561212a57600080fd5b505af115801561213e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612162919061362a565b61217e5760405162461bcd60e51b815260040161097490613f41565b60006121a97f0000000000000000000000000000000000000000000000000000000000000000611ce9565b905060006121b8610811611cef565b90506121d0846121cb6106c98685611d71565b612b5c565b6121d983612bde565b836001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c84604051610a2691906139e3565b3390565b6016546040517f93f1a40b0000000000000000000000000000000000000000000000000000000081526000916001600160a01b0316906393f1a40b9061226290869086906004016140e6565b604080518083038186803b15801561227957600080fd5b505afa15801561228d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b191906137a4565b509392505050565b6001600160a01b038116156124b757600a54604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692841691630dfe1681916004808301926020929190829003018186803b15801561232857600080fd5b505afa15801561233c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061236091906134e2565b6001600160a01b0316141561240557806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156123a857600080fd5b505afa1580156123bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123e091906134e2565b601580546001600160a01b0319166001600160a01b0392909216919091179055612497565b806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561243e57600080fd5b505afa158015612452573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061247691906134e2565b601580546001600160a01b0319166001600160a01b03929092169190911790555b601480546001600160a01b0319166001600160a01b038316179055610fe4565b601480546001600160a01b031990811690915560158054909116905550565b6016546040517f5312ea8e0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690635312ea8e9061251f9084906004016139e3565b600060405180830381600087803b15801561253957600080fd5b505af115801561254d573d6000803e3d6000fd5b505060095460165460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506125899290911690600090600401613958565b602060405180830381600087803b1580156125a357600080fd5b505af11580156125b7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e919061362a565b6012546040516370a0823160e01b815260009182918291829182916001600160a01b0316906370a08231906126149030906004016138df565b60206040518083038186803b15801561262c57600080fd5b505afa158015612640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061266491906136ac565b905060008060006126957f000000000000000000000000000000000000000000000000000000000000000030612c28565b9194509250905060006126a88585611c09565b600a546012549192506000916001600160a01b03908116911614156126cd57846126f2565b601254600a546013546126f29285926001600160a01b03918216929082169116612ce7565b905060006001600160a01b038416156127f1576001600160a01b03841673b31f66aa3c1e785363f0875a1b74e27b85fd66c714156127315750836127f1565b6014546001600160a01b0316156127f1576015546040516370a0823160e01b81526127cb916001600160a01b0316906370a08231906127749030906004016138df565b60206040518083038186803b15801561278c57600080fd5b505afa1580156127a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c491906136ac565b8690611c09565b600a546014549196506127ee91879187916001600160a01b039182169116612ce7565b90505b600a546040516370a0823160e01b81526000916128789184916001600160a01b0316906370a08231906128289030906004016138df565b60206040518083038186803b15801561284057600080fd5b505afa158015612854573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061136d91906136ac565b905060006128868285611c09565b949d969c50909a50929850939650505050505050565b60006128a6611a40565b856040516020016128b89291906138a9565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516128f59493929190613a4c565b6020604051602081039080840390855afa158015612917573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381161580159061294d5750866001600160a01b0316816001600160a01b0316145b6129695760405162461bcd60e51b815260040161097490613ba5565b50505050505050565b4690565b61299f7f0000000000000000000000000000000000000000000000000000000000000000612dc2565b60006129b46129ad84612e23565b8590611c09565b90506129ca6129c38584612e6b565b8290611c09565b5060006129e861271061081b60115485611cf590919063ffffffff16565b90508015612a0d57600a54600b54612a0d916001600160a01b03908116911683611ee9565b6000612a2a61271061081b600f5486611cf590919063ffffffff16565b90508015612a4957600a54612a49906001600160a01b03163383611ee9565b6000612a67612a6283612a5c8787611d71565b90611d71565b612fbe565b9050612a7281612bde565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612a9b610eed565b600254604051612aac9291906140fd565b60405180910390a150505050505050565b60008183612ade5760405162461bcd60e51b81526004016109749190613a6a565b506000838581612aea57fe5b0495945050505050565b601654604051630441a3e760e41b81526001600160a01b039091169063441a3e7090612b2690859085906004016140fd565b600060405180830381600087803b158015612b4057600080fd5b505af1158015612b54573d6000803e3d6000fd5b505050505050565b600254612b699082611c09565b6002556001600160a01b038216600090815260046020526040902054612b8f9082611c09565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906120589085906139e3565b60008111612bfe5760405162461bcd60e51b815260040161097490613dbe565b610fe47f00000000000000000000000000000000000000000000000000000000000000008261310d565b6016546040517fffcd4263000000000000000000000000000000000000000000000000000000008152600091829182918291829182916001600160a01b039091169063ffcd426390612c80908b908b906004016140e6565b60006040518083038186803b158015612c9857600080fd5b505afa158015612cac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612cd491908101906136c4565b9298509196509450505050509250925092565b600080612cf485856131e1565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b9190613646565b5091509150866001600160a01b0316836001600160a01b031614612d8b57905b612db688836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613212565b98975050505050505050565b601654604051630441a3e760e41b81526001600160a01b039091169063441a3e7090612df59084906000906004016140fd565b600060405180830381600087803b158015612e0f57600080fd5b505af1158015610b17573d6000803e3d6000fd5b601254600a546000916001600160a01b0391821691161415612e46575080610d90565b601254600a546013546107c49285926001600160a01b0391821692908216911661325a565b60008115612fb5576014546001600160a01b031615612eb057601554600a54601454612ea99285926001600160a01b0391821692908216911661325a565b90506107c4565b478015612f205773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612f0657600080fd5b505af1158015612f1a573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b8152612fad90859073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190612f5d9030906004016138df565b60206040518083038186803b158015612f7557600080fd5b505afa158015612f89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a5c91906136ac565b9150506107c4565b50600092915050565b600a54601a546019546000928392612fe79286926001600160a01b03908116928116911661325a565b9050606060176000015467ffffffffffffffff8111801561300757600080fd5b50604051908082528060200260200182016040528015613031578160200160208202803683370190505b50905081816017600101548151811061304657fe5b602002602001018181525050600061307261271061081b60176005015486611cf590919063ffffffff16565b601b549091506001600160a01b0316634d49e87d836130918685611d71565b6000196040518463ffffffff1660e01b81526004016130b29392919061398b565b602060405180830381600087803b1580156130cc57600080fd5b505af11580156130e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310491906136ac565b95945050505050565b60095460165460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613143929116908590600401613958565b602060405180830381600087803b15801561315d57600080fd5b505af1158015613171573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613195919061362a565b506016546040517fe2bbb1580000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063e2bbb15890612b2690859085906004016140fd565b600080826001600160a01b0316846001600160a01b031610613204578284613207565b83835b915091509250929050565b600080613221856103e5611cf5565b9050600061322f8285611cf5565b905060006132438361136d886103e8611cf5565b905061324f8282611d2f565b979650505050505050565b60008061326785856131e1565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156132a657600080fd5b505afa1580156132ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132de9190613646565b5091509150866001600160a01b0316836001600160a01b0316146132fe57905b60008061332c8a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613212565b9050886001600160a01b0316856001600160a01b03161461334957905b61335489888c6133fb565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f906133ac908590859030906024810161410b565b600060405180830381600087803b1580156133c657600080fd5b505af11580156133da573d6000803e3d6000fd5b505050508181116133eb57816133ed565b805b9a9950505050505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906134299085908590600401613958565b602060405180830381600087803b15801561344357600080fd5b505af1158015613457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347b919061362a565b611f855760405162461bcd60e51b8152600401610974906140b1565b80516dffffffffffffffffffffffffffff81168114610d9057600080fd5b803560ff81168114610d9057600080fd5b6000602082840312156134d7578081fd5b8135611c2e8161417d565b6000602082840312156134f3578081fd5b8151611c2e8161417d565b60008060408385031215613510578081fd5b823561351b8161417d565b9150602083013561352b8161417d565b809150509250929050565b60008060006060848603121561354a578081fd5b83356135558161417d565b925060208401356135658161417d565b929592945050506040919091013590565b600080600080600080600060e0888a031215613590578283fd5b873561359b8161417d565b965060208801356135ab8161417d565b955060408801359450606088013593506135c7608089016134b5565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156135f5578182fd5b82356136008161417d565b946020939093013593505050565b60006020828403121561361f578081fd5b8135611c2e81614192565b60006020828403121561363b578081fd5b8151611c2e81614192565b60008060006060848603121561365a578283fd5b61366384613497565b925061367160208501613497565b9150604084015163ffffffff81168114613689578182fd5b809150509250925092565b6000602082840312156136a5578081fd5b5035919050565b6000602082840312156136bd578081fd5b5051919050565b600080600080608085870312156136d9578384fd5b8451935060208501516136eb8161417d565b604086015190935067ffffffffffffffff80821115613708578384fd5b818701915087601f83011261371b578384fd5b81518181111561372757fe5b604051601f8201601f19168101602001838111828210171561374557fe5b6040528181528382016020018a101561375c578586fd5b61376d826020830160208701614151565b6060989098015196999598505050505050565b60008060408385031215613792578182fd5b82359150602083013561352b81614192565b600080604083850312156137b6578182fd5b505080516020909101519092909150565b600080600080600060a086880312156137de578283fd5b85359450602086013593506137f5604087016134b5565b94979396509394606081013594506080013592915050565b60008151808452613825816020860160208601614151565b601f01601f19169290920160200192915050565b6000808354600180821660008114613858576001811461386f5761389e565b60ff198316865260028304607f168601935061389e565b600283048786526020808720875b838110156138965781548a82015290850190820161387d565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b606080825284519082018190526000906020906080840190828801845b828110156139c4578151845292840192908401906001016139a8565b505050908301949094525060400152919050565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252611c2e602083018461380d565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a7265736375654465706c60408201527f6f79656446756e64730000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f4d617374657243686566537472617465677956313a3a5452414e534645525f4660408201527f524f4d5f4641494c454400000000000000000000000000000000000000000000606082015260800190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a77697468647261770000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f4d617374657243686566537472617465677956313a3a5f7374616b654465706f60408201527f736974546f6b656e730000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526025908201527f4d617374657243686566537472617465677956313a3a7472616e73666572206660408201527f61696c6564000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f736574416c6c6f77616e6365733a3a6465707265636174656400000000000000604082015260600190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a7265696e766573740000604082015260600190565b6020808252601e908201527f4d617374657243686566537472617465677956313a3a5f6465706f7369740000604082015260600190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b9182526001600160a01b0316602082015260400190565b918252602082015260400190565b60008582528460208301526001600160a01b038416604083015260806060830152614139608083018461380d565b9695505050505050565b60ff91909116815260200190565b60005b8381101561416c578181015183820152602001614154565b838111156116e55750506000910152565b6001600160a01b0381168114610fe457600080fd5b8015158114610fe457600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a26469706673582212206ed0fbd4b947db9ea6ec7c638afb41eb87414101d2d26f00ea32cc615d2b972d64736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Deprecated; approvals should be handled in context of staking"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6072,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6075,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6080,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6086,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6090,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6106,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17684,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 17797,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 17801,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7458,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)10216"
      },
      {
        "astId": 7460,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)10216"
      },
      {
        "astId": 7462,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7464,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7466,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7468,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 7470,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7472,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7474,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 77929,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "poolRewardToken",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 77931,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "swapPairPoolReward",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IPair)12744"
      },
      {
        "astId": 77933,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "swapPairExtraReward",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 77935,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "extraToken",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 22039,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "axialChef",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IAxialChef)9320"
      },
      {
        "astId": 22041,
        "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
        "label": "zapSettings",
        "offset": 0,
        "slot": "23",
        "type": "t_struct(ZapSettings)22054_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAxialChef)9320": {
        "encoding": "inplace",
        "label": "contract IAxialChef",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)10216": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)12744": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ZapSettings)22054_storage": {
        "encoding": "inplace",
        "label": "struct AxialStrategyForMetapoolLP.ZapSettings",
        "members": [
          {
            "astId": 22043,
            "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
            "label": "tokenCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22045,
            "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
            "label": "tokenIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22047,
            "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
            "label": "swapPairRewardZap",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 22049,
            "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
            "label": "zapToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 22051,
            "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
            "label": "zapContract",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 22053,
            "contract": "contracts/strategies/AxialStrategyForMetapoolLP.sol:AxialStrategyForMetapoolLP",
            "label": "maxSlippage",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}