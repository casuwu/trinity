{
  "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rewardController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDelegator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "reward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPair",
              "type": "address"
            }
          ],
          "internalType": "struct AaveV3StrategyAvaxV1.RewardSwapPairs[]",
          "name": "_rewardSwapPairs",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "_avToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_avDebtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leverageLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverageBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minMinting",
              "type": "uint256"
            }
          ],
          "internalType": "struct AaveV3StrategyAvaxV1.LeverageSettings",
          "name": "_leverageSettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct AaveV3StrategyAvaxV1.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapPair",
          "type": "address"
        }
      ],
      "name": "AddReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "name": "RemoveReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPair",
          "type": "address"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverageLevel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minMinting",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "removeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardSwapPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safetyFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safetyFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMinting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
    "transactionIndex": 0,
    "gasUsed": "5089141",
    "logsBloom": "0x
    "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4",
    "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80"
        ],
        "data": "0x000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c70000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 2,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 3,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000258",
        "logIndex": 4,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c8",
        "logIndex": 5,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 6,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13754056,
        "transactionHash": "0xb9247456bb5b21f3924792501ee72dbaec7d909e5f464e2d51564b9e12940763",
        "address": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 8,
        "blockHash": "0xc2f415ccbe361adb26665871c17b0c228a4266a64c4ba81fb22a216f220590c4"
      }
    ],
    "blockNumber": 13754056,
    "cumulativeGasUsed": "5089141",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Aave AVAX",
    "0x929EC64c34a17401F460460D4B9390518E5B473e",
    "0x794a61358D6845594F94dc1DB02A252b5b4814aD",
    [
      {
        "reward": "0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7",
        "swapPair": "0x0000000000000000000000000000000000000000"
      }
    ],
    "0x6d80113e533a2C0fe82EaBD35f1875DcEA89Ea97",
    "0x4a1c3aD6Ed28a636ee1751C69071f6be75DEb8B8",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    {
      "leverageLevel": "10000",
      "safetyFactor": "0",
      "leverageBips": "10000",
      "minMinting": "100000000000000"
    },
    {
      "minTokensToReinvest": "100000000000000",
      "adminFeeBips": "0",
      "devFeeBips": "600",
      "reinvestRewardBips": "200"
    }
  ],
  "solcInputHash": "8b4559ae38ca117a76c511cc562b95fe",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDelegator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"internalType\":\"struct AaveV3StrategyAvaxV1.RewardSwapPairs[]\",\"name\":\"_rewardSwapPairs\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"_avToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_avDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMinting\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveV3StrategyAvaxV1.LeverageSettings\",\"name\":\"_leverageSettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveV3StrategyAvaxV1.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapPair\",\"type\":\"address\"}],\"name\":\"AddReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RemoveReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPair\",\"type\":\"address\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverageLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minMinting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"removeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardSwapPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMinting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"No need to _enterMarket() as LendingPool already defaults collateral to true. See https://github.com/aave/protocol-v2/blob/master/contracts/protocol/lendingpool/LendingPool.sol#L123-L126\",\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit()\":{\"details\":\"Must mint receipt tokens to `msg.sender`\"},\"depositFor(address)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"title\":\"Aave strategy for AVAX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit()\":{\"notice\":\"Deposit and deploy deposits tokens to the strategy using AVAX\"},\"depositFor(address)\":{\"notice\":\"Deposit on behalf of another account using AVAX\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimated deposit token balance deployed by strategy, excluding balance\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveV3StrategyAvaxV1.sol\":\"AaveV3StrategyAvaxV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x761751e4c7695848f01e6ebca020145de4b6f4d5e9b5a1f6fae21def20406762\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0xeaab679124488e8a2f6f3208a4ece97195d1d674b0935d56dc4ded963bfb67be\",\"license\":\"MIT\"},\"contracts/YakStrategyV2Payable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./YakStrategyV2.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2Payable is YakStrategyV2 {\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy using AVAX\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     */\\n    function deposit() external payable virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account using AVAX\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     */\\n    function depositFor(address account) external payable virtual;\\n\\n}\",\"keccak256\":\"0x0f1c579f2d1eedf6c94a718e92f0f9f882d9dffbe3db9cb5aca6c662ff42c3cd\",\"license\":\"MIT\"},\"contracts/interfaces/IAaveV3IncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// check 0x01D83Fe6A10D2f2B7AF17034343746188272cAc9\\n\\ninterface IAaveV3IncentivesController {\\n    /**\\n     * @dev Claims all rewards for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets The list of assets to check eligible distributions before claiming rewards\\n     * @param to The address that will be receiving the rewards\\n     * @return rewardsList List of addresses of the reward tokens\\n     * @return claimedAmounts List that contains the claimed amount per reward, following same order as \\\"rewardList\\\"\\n     **/\\n    function claimAllRewards(address[] calldata assets, address to)\\n        external\\n        returns (address[] memory rewardsList, uint256[] memory claimedAmounts);\\n\\n    /**\\n     * @dev Claims reward for a user to the desired address, on all the assets of the pool, accumulating the pending rewards\\n     * @param assets List of assets to check eligible distributions before claiming rewards\\n     * @param amount The amount of rewards to claim\\n     * @param to The address that will be receiving the rewards\\n     * @param reward The address of the reward token\\n     * @return The amount of rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to,\\n        address reward\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Returns a list all rewards of a user, including already accrued and unrealized claimable rewards\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @return The list of reward addresses\\n     * @return The list of unclaimed amount of rewards\\n     **/\\n    function getAllUserRewards(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @dev Returns a single rewards balance of a user, including virtually accrued and unrealized claimable rewards.\\n     * @param assets List of incentivized assets to check eligible distributions\\n     * @param user The address of the user\\n     * @param reward The address of the reward token\\n     * @return The rewards amount\\n     **/\\n    function getUserRewards(\\n        address[] calldata assets,\\n        address user,\\n        address reward\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x69c84a25189815e166882f6af008edc8ef482d611eb6520eda747372f96c09f4\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPoolAaveV3.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.7.3;\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface ILendingPoolAaveV3 {\\n    /**\\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n     * @param asset The address of the underlying asset to mint\\n     * @param amount The amount to mint\\n     * @param onBehalfOf The address that will receive the aTokens\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function mintUnbacked(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n     * @param asset The address of the underlying asset to back\\n     * @param amount The amount to back\\n     * @param fee The amount paid in fees\\n     **/\\n    function backUnbacked(\\n        address asset,\\n        uint256 amount,\\n        uint256 fee\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     **/\\n    function supplyWithPermit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external;\\n\\n    /**\\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to The address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @param deadline The deadline timestamp that the permit is valid\\n     * @param permitV The V parameter of ERC712 permit sig\\n     * @param permitR The R parameter of ERC712 permit sig\\n     * @param permitS The S parameter of ERC712 permit sig\\n     * @return The final amount repaid\\n     **/\\n    function repayWithPermit(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf,\\n        uint256 deadline,\\n        uint8 permitV,\\n        bytes32 permitR,\\n        bytes32 permitS\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n     * equivalent debt tokens\\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n     * balance is not enough to cover the whole debt\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @return The final amount repaid\\n     **/\\n    function repayWithATokens(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n    /**\\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n     * @param asset The address of the underlying asset supplied\\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n    /**\\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts of the assets being flash-borrowed\\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata interestRateModes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n     * into consideration. For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n     * @param asset The address of the asset being flash-borrowed\\n     * @param amount The amount of the asset being flash-borrowed\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoanSimple(\\n        address receiverAddress,\\n        address asset,\\n        uint256 amount,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @notice Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n     * @return currentLiquidationThreshold The liquidation threshold of the user\\n     * @return ltv The loan to value of The user\\n     * @return healthFactor The current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralBase,\\n            uint256 totalDebtBase,\\n            uint256 availableBorrowsBase,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    /**\\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n     * interest rate strategy\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function initReserve(\\n        address asset,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Drop a reserve\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     **/\\n    function dropReserve(address asset) external;\\n\\n    /**\\n     * @notice Updates the address of the interest rate strategy contract\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param asset The address of the underlying asset of the reserve\\n     * @param rateStrategyAddress The address of the interest rate strategy contract\\n     **/\\n    function setReserveInterestRateStrategyAddress(\\n        address asset,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    /**\\n     * @notice Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice Validates and finalizes an aToken transfer\\n     * @dev Only callable by the overlying aToken of the `asset`\\n     * @param asset The address of the underlying asset of the aToken\\n     * @param from The user from which the aTokens are transferred\\n     * @param to The user receiving the aTokens\\n     * @param amount The amount being transferred/withdrawn\\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n     */\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromBefore,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    /**\\n     * @notice Returns the list of the underlying assets of all the initialized reserves\\n     * @dev It does not include dropped reserves\\n     * @return The addresses of the underlying assets of the initialized reserves\\n     **/\\n    function getReservesList() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n     * @return The address of the reserve associated with id\\n     **/\\n    function getReserveAddressById(uint16 id) external view returns (address);\\n\\n    /**\\n     * @notice Updates the protocol fee on the bridging\\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n     */\\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n    /**\\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n     * - A part is sent to aToken holders as extra, one time accumulated interest\\n     * - A part is collected by the protocol treasury\\n     * @dev The total premium is calculated on the total borrowed amount\\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n     * @dev Only callable by the PoolConfigurator contract\\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n     */\\n    function updateFlashloanPremiums(\\n        uint128 flashLoanPremiumTotal,\\n        uint128 flashLoanPremiumToProtocol\\n    ) external;\\n\\n    /**\\n     * @notice Allows a user to use the protocol in eMode\\n     * @param categoryId The id of the category\\n     */\\n    function setUserEMode(uint8 categoryId) external;\\n\\n    /**\\n     * @notice Returns the eMode the user is using\\n     * @param user The address of the user\\n     * @return The eMode id\\n     */\\n    function getUserEMode(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Resets the isolation mode total debt of the given asset to zero\\n     * @dev It requires the given asset has zero debt ceiling\\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n     */\\n    function resetIsolationModeTotalDebt(address asset) external;\\n\\n    /**\\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n     * @return The percentage of available liquidity to borrow, expressed in bps\\n     */\\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the total fee on flash loans\\n     * @return The total fee on flashloans\\n     */\\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the part of the bridge fees sent to protocol\\n     * @return The bridge fee sent to the protocol treasury\\n     */\\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the part of the flashloan fees sent to protocol\\n     * @return The flashloan fee sent to the protocol treasury\\n     */\\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n    /**\\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n     * @return The maximum number of reserves supported\\n     */\\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n    /**\\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n     * @param assets The list of reserves for which the minting needs to be executed\\n     **/\\n    function mintToTreasury(address[] calldata assets) external;\\n\\n    /**\\n     * @notice Rescue and transfer tokens locked in this contract\\n     * @param token The address of the token\\n     * @param to The address of the recipient\\n     * @param amount The amount of token to transfer\\n     */\\n    function rescueTokens(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n     * @dev Deprecated: Use the `supply` function instead\\n     * @param asset The address of the underlying asset to supply\\n     * @param amount The amount to be supplied\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n}\\n\",\"keccak256\":\"0xdbbe64d47b089af11071e1bdd9dafa1045a6b4980f0b53e05c5e739a036bec4e\",\"license\":\"AGPL-3.0\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x899cb9f43560de458f6576c1534e9ed1504115787f0db61c856d9f1b4658d1c0\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x13cd04fbe9326420082d6aa105322eded7cbe7d4848d652a15ffca307b51088c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x0c300bb8b048c88d74d2a1e76ca9709b4dc1109cf9781d4afeaad3a7fe9518f8\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfc1bce446dad248893b01e2c3673129bb4a08f69053a3c0e6f2c8a57349f3a9d\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xc0e758ff3798955ec630efd36ac2f180c982d5a5aa52d65ddac3af249cbf17da\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0x5561e8a8e7df8c9c89a9782b1465cba09b75f2949696da28ed30d4d5458a3f7d\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/AaveV3StrategyAvaxV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../YakStrategyV2Payable.sol\\\";\\nimport \\\"../interfaces/IAaveV3IncentivesController.sol\\\";\\nimport \\\"../interfaces/ILendingPoolAaveV3.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Aave strategy for AVAX\\n * @dev No need to _enterMarket() as LendingPool already defaults collateral to true.\\n * See https://github.com/aave/protocol-v2/blob/master/contracts/protocol/lendingpool/LendingPool.sol#L123-L126\\n */\\ncontract AaveV3StrategyAvaxV1 is YakStrategyV2Payable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    struct Reward {\\n        address reward;\\n        uint256 amount;\\n    }\\n\\n    struct RewardSwapPairs {\\n        address reward;\\n        address swapPair;\\n    }\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 adminFeeBips;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    struct LeverageSettings {\\n        uint256 leverageLevel;\\n        uint256 safetyFactor;\\n        uint256 leverageBips;\\n        uint256 minMinting;\\n    }\\n\\n    // reward -> swapPair\\n    mapping(address => address) public rewardSwapPairs;\\n    address[] public supportedRewards;\\n    uint256 public rewardCount;\\n\\n    uint256 public leverageLevel;\\n    uint256 public safetyFactor;\\n    uint256 public leverageBips;\\n    uint256 public minMinting;\\n\\n    IAaveV3IncentivesController private rewardController;\\n    ILendingPoolAaveV3 private tokenDelegator;\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    address private avToken;\\n    address private avDebtToken;\\n\\n    event AddReward(address rewardToken, address swapPair);\\n    event RemoveReward(address rewardToken);\\n\\n    constructor(\\n        string memory _name,\\n        address _rewardController,\\n        address _tokenDelegator,\\n        RewardSwapPairs[] memory _rewardSwapPairs,\\n        address _avToken,\\n        address _avDebtToken,\\n        address _timelock,\\n        LeverageSettings memory _leverageSettings,\\n        StrategySettings memory _strategySettings\\n    ) {\\n        name = _name;\\n        rewardController = IAaveV3IncentivesController(_rewardController);\\n        tokenDelegator = ILendingPoolAaveV3(_tokenDelegator);\\n        rewardToken = IERC20(address(WAVAX));\\n        _updateLeverage(\\n            _leverageSettings.leverageLevel,\\n            _leverageSettings.safetyFactor,\\n            _leverageSettings.minMinting,\\n            _leverageSettings.leverageBips\\n        );\\n        devAddr = msg.sender;\\n        avToken = _avToken;\\n        avDebtToken = _avDebtToken;\\n\\n        for (uint256 i = 0; i < _rewardSwapPairs.length; i++) {\\n            _addReward(_rewardSwapPairs[i].reward, _rewardSwapPairs[i].swapPair);\\n        }\\n\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateAdminFee(_strategySettings.adminFeeBips);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == address(WAVAX), \\\"not allowed\\\");\\n    }\\n\\n    function addReward(address _rewardToken, address _swapPair) public onlyDev {\\n        _addReward(_rewardToken, _swapPair);\\n    }\\n\\n    function _addReward(address _rewardToken, address _swapPair) internal {\\n        if (_rewardToken != address(rewardToken)) {\\n            require(\\n                DexLibrary.checkSwapPairCompatibility(IPair(_swapPair), _rewardToken, address(rewardToken)),\\n                \\\"VariableRewardsStrategy::Swap pair does not contain reward token\\\"\\n            );\\n        }\\n        rewardSwapPairs[_rewardToken] = _swapPair;\\n        supportedRewards.push(_rewardToken);\\n        rewardCount = rewardCount.add(1);\\n        emit AddReward(_rewardToken, _swapPair);\\n    }\\n\\n    function removeReward(address _rewardToken) public onlyDev {\\n        delete rewardSwapPairs[_rewardToken];\\n        bool found = false;\\n        for (uint256 i = 0; i < supportedRewards.length; i++) {\\n            if (_rewardToken == supportedRewards[i]) {\\n                found = true;\\n                supportedRewards[i] = supportedRewards[supportedRewards.length - 1];\\n            }\\n        }\\n        require(found, \\\"VariableRewardsStrategy::Reward to delete not found!\\\");\\n        supportedRewards.pop();\\n        rewardCount = rewardCount.sub(1);\\n        emit RemoveReward(_rewardToken);\\n    }\\n\\n    /// @notice Internal method to get account state\\n    /// @dev Values provided in 1e18 (WAD) instead of 1e27 (RAY)\\n    function _getAccountData()\\n        internal\\n        view\\n        returns (\\n            uint256 balance,\\n            uint256 borrowed,\\n            uint256 borrowable\\n        )\\n    {\\n        balance = IERC20(avToken).balanceOf(address(this));\\n        borrowed = IERC20(avDebtToken).balanceOf(address(this));\\n        borrowable = 0;\\n        if (balance.mul(leverageLevel.sub(leverageBips)).div(leverageLevel) > borrowed) {\\n            borrowable = balance.mul(leverageLevel.sub(leverageBips)).div(leverageLevel).sub(borrowed);\\n        }\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        return balance.sub(borrowed);\\n    }\\n\\n    function _updateLeverage(\\n        uint256 _leverageLevel,\\n        uint256 _safetyFactor,\\n        uint256 _minMinting,\\n        uint256 _leverageBips\\n    ) internal {\\n        leverageLevel = _leverageLevel;\\n        leverageBips = _leverageBips;\\n        safetyFactor = _safetyFactor;\\n        minMinting = _minMinting;\\n    }\\n\\n    function updateLeverage(\\n        uint256 _leverageLevel,\\n        uint256 _safetyFactor,\\n        uint256 _minMinting,\\n        uint256 _leverageBips\\n    ) external onlyDev {\\n        _updateLeverage(_leverageLevel, _safetyFactor, _minMinting, _leverageBips);\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        _unrollDebt(balance.sub(borrowed));\\n        _rollupDebt();\\n    }\\n\\n    function setAllowances() public view override onlyOwner {\\n        revert(\\\"setAllowances::deprecated\\\");\\n    }\\n\\n    function deposit() external payable override nonReentrant {\\n        WAVAX.deposit{value: msg.value}();\\n        _deposit(msg.sender, msg.value);\\n    }\\n\\n    function depositFor(address account) external payable override nonReentrant {\\n        WAVAX.deposit{value: msg.value}();\\n        _deposit(account, msg.value);\\n    }\\n\\n    function deposit(\\n        uint256 /*amount*/\\n    ) external pure override {\\n        revert();\\n    }\\n\\n    function depositWithPermit(\\n        uint256, /*amount*/\\n        uint256, /*deadline*/\\n        uint8, /*v*/\\n        bytes32, /*r*/\\n        bytes32 /*s*/\\n    ) external pure override {\\n        revert();\\n    }\\n\\n    function depositFor(\\n        address, /*account*/\\n        uint256 /*amount*/\\n    ) external pure override {\\n        revert();\\n    }\\n\\n    function _deposit(address account, uint256 amount) private onlyAllowedDeposits {\\n        require(DEPOSITS_ENABLED == true, \\\"AaveStrategyAvaxV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            uint256 avaxRewards = checkReward();\\n            if (avaxRewards > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(amount);\\n            }\\n        }\\n        _mint(account, getSharesForDepositTokens(amount));\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override nonReentrant {\\n        uint256 WAVAXAmount = totalDeposits().mul(amount).div(totalSupply);\\n        require(WAVAXAmount > minMinting, \\\"AaveStrategyAvaxV1::below minimum withdraw\\\");\\n        if (WAVAXAmount > 0) {\\n            _burn(msg.sender, amount);\\n            uint256 avaxAmount = _withdrawDepositTokens(WAVAXAmount);\\n            (bool success, ) = msg.sender.call{value: avaxAmount}(\\\"\\\");\\n            require(success, \\\"AaveStrategyAvaxV1::transfer failed\\\");\\n            emit Withdraw(msg.sender, avaxAmount);\\n        }\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private returns (uint256) {\\n        _unrollDebt(amount);\\n        (uint256 balance, , ) = _getAccountData();\\n        if (amount > balance) {\\n            // withdraws all\\n            amount = type(uint256).max;\\n        }\\n        uint256 withdrawn = tokenDelegator.withdraw(address(WAVAX), amount, address(this));\\n        WAVAX.withdraw(withdrawn);\\n        _rollupDebt();\\n        return withdrawn;\\n    }\\n\\n    function reinvest() external override onlyEOA nonReentrant {\\n        _reinvest(0);\\n    }\\n\\n    function _convertRewardsIntoWAVAX() private returns (uint256) {\\n        uint256 avaxAmount = WAVAX.balanceOf(address(this));\\n        uint256 count = supportedRewards.length;\\n        for (uint256 i = 0; i < count; i++) {\\n            address reward = supportedRewards[i];\\n            if (reward == address(WAVAX)) {\\n                uint256 balance = address(this).balance;\\n                if (balance > 0) {\\n                    WAVAX.deposit{value: balance}();\\n                    avaxAmount = avaxAmount.add(balance);\\n                }\\n                continue;\\n            }\\n            uint256 amount = IERC20(reward).balanceOf(address(this));\\n            if (amount > 0) {\\n                address swapPair = rewardSwapPairs[reward];\\n                if (swapPair > address(0)) {\\n                    avaxAmount = avaxAmount.add(DexLibrary.swap(amount, reward, address(rewardToken), IPair(swapPair)));\\n                }\\n            }\\n        }\\n        return avaxAmount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `stakingContract`\\n     * @param userDeposit deposit amount in case of reinvest on deposit\\n     */\\n    function _reinvest(uint256 userDeposit) private {\\n        address[] memory assets = new address[](2);\\n        assets[0] = avToken;\\n        assets[1] = avDebtToken;\\n        rewardController.claimAllRewards(assets, address(this));\\n\\n        uint256 amount = _convertRewardsIntoWAVAX();\\n        amount = amount.sub(userDeposit);\\n        if (userDeposit == 0) {\\n            require(amount >= MIN_TOKENS_TO_REINVEST, \\\"VariableRewardsStrategy::Reinvest amount too low\\\");\\n        }\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        _stakeDepositTokens(amount.sub(devFee).sub(reinvestFee));\\n\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _rollupDebt() internal {\\n        (uint256 balance, uint256 borrowed, uint256 borrowable) = _getAccountData();\\n        uint256 lendTarget = balance.sub(borrowed).mul(leverageLevel.sub(safetyFactor)).div(leverageBips);\\n        WAVAX.approve(address(tokenDelegator), lendTarget);\\n        while (balance < lendTarget) {\\n            if (balance.add(borrowable) > lendTarget) {\\n                borrowable = lendTarget.sub(balance);\\n            }\\n\\n            if (borrowable < minMinting) {\\n                break;\\n            }\\n\\n            tokenDelegator.borrow(\\n                address(WAVAX),\\n                borrowable,\\n                2, // variable interest model\\n                0,\\n                address(this)\\n            );\\n\\n            tokenDelegator.supply(address(WAVAX), borrowable, address(this), 0);\\n            (balance, borrowed, borrowable) = _getAccountData();\\n        }\\n        WAVAX.approve(address(tokenDelegator), 0);\\n    }\\n\\n    function _unrollDebt(uint256 amountToFreeUp) internal {\\n        (uint256 balance, uint256 borrowed, uint256 borrowable) = _getAccountData();\\n        uint256 targetBorrow = balance\\n            .sub(borrowed)\\n            .sub(amountToFreeUp)\\n            .mul(leverageLevel.sub(safetyFactor))\\n            .div(leverageBips)\\n            .sub(balance.sub(borrowed).sub(amountToFreeUp));\\n        uint256 toRepay = borrowed.sub(targetBorrow);\\n        if (toRepay > 0) {\\n            tokenDelegator.repayWithATokens(address(WAVAX), toRepay, 2);\\n        }\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"AaveStrategyAvaxV1::_stakeDepositTokens\\\");\\n        WAVAX.approve(address(tokenDelegator), amount);\\n        tokenDelegator.supply(address(WAVAX), amount, address(this), 0);\\n        _rollupDebt();\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(IERC20(token).transfer(to, value), \\\"AaveStrategyAvaxV1::TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        address[] memory assets = new address[](2);\\n        assets[0] = avToken;\\n        assets[1] = avDebtToken;\\n        (address[] memory rewards, uint256[] memory amounts) = rewardController.getAllUserRewards(\\n            assets,\\n            address(this)\\n        );\\n        uint256 estimatedTotalReward = WAVAX.balanceOf(address(this));\\n        estimatedTotalReward.add(address(this).balance);\\n        for (uint256 i = 0; i < rewards.length; i++) {\\n            address reward = rewards[i];\\n            if (reward == address(WAVAX)) {\\n                estimatedTotalReward = estimatedTotalReward.add(amounts[i]);\\n            } else {\\n                uint256 balance = IERC20(reward).balanceOf(address(this));\\n                uint256 amount = balance.add(amounts[i]);\\n                address swapPair = rewardSwapPairs[reward];\\n                if (amount > 0 && swapPair > address(0)) {\\n                    estimatedTotalReward = estimatedTotalReward.add(\\n                        DexLibrary.estimateConversionThroughPair(amount, reward, address(WAVAX), IPair(swapPair))\\n                    );\\n                }\\n            }\\n        }\\n        return estimatedTotalReward;\\n    }\\n\\n    function getActualLeverage() public view returns (uint256) {\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        return balance.mul(1e18).div(balance.sub(borrowed));\\n    }\\n\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        return totalDeposits();\\n    }\\n\\n    function rescueDeployedFunds(\\n        uint256 minReturnAmountAccepted,\\n        bool /*disableDeposits*/\\n    ) external override onlyOwner {\\n        uint256 balanceBefore = WAVAX.balanceOf(address(this));\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        _unrollDebt(balance.sub(borrowed));\\n        tokenDelegator.withdraw(address(WAVAX), type(uint256).max, address(this));\\n        uint256 balanceAfter = WAVAX.balanceOf(address(this));\\n        require(balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted, \\\"AaveStrategyAvaxV1::rescueDeployedFunds\\\");\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x35a278b03505b9450d38832d52805171a3c4af0c97e00a2529df2ef6c3ba72ee\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106104185760003560e01c80638da5cb5b11610228578063cff1b6ef11610128578063e21ac825116100bb578063ed24911d1161008a578063f2fde38b1161006f578063f2fde38b14610b31578063f7c618c114610b51578063fdb5a03e14610b665761045b565b8063ed24911d14610b07578063f02ecb7114610b1c5761045b565b8063e21ac82514610a92578063e592c5fa14610ab2578063e75ab04514610ac7578063eab89a5a14610ae75761045b565b8063db8dd95c116100f7578063db8dd95c14610a28578063dbd9a4d414610a3d578063dd62ed3e14610a52578063dd8ce4d614610a725761045b565b8063cff1b6ef146109cb578063d0e30db0146109eb578063d505accf146109f3578063da09c72c14610a135761045b565b8063a9059cbb116101bb578063b6b55f251161018a578063bd079f551161016f578063bd079f551461098c578063c4b24a46146109a1578063c89039c5146109b65761045b565b8063b6b55f251461095c578063b9e57b80146109775761045b565b8063a9059cbb146108f4578063aa67c91914610914578063ac0d31ff14610927578063b52a321f146109475761045b565b80639e4e7318116101f75780639e4e73181461087f578063a4d5e67c14610894578063a5534e71146108b4578063a8ae2b7c146108d45761045b565b80638da5cb5b146108085780639291d5631461082a57806395d89b411461084a57806399729ec11461085f5761045b565b80634a970be711610333578063789139bc116102c65780637ecebe00116102955780638980f11f1161027a5780638980f11f146107b35780638aff733d146107d35780638b73e606146107e85761045b565b80637ecebe001461077357806381837230146107935761045b565b8063789139bc1461071457806379085425146107295780637ae267731461073e5780637d8820971461075e5761045b565b80635ea682ea116103025780635ea682ea146106b557806362ac20a5146106ca57806370a08231146106df578063715018a6146106ff5761045b565b80634a970be71461063a5780634bebd1e7146106555780634e77ace5146106755780634ebb7916146106955761045b565b806323b872dd116103ab578063313ce5671161037a578063313ce567146105c35780633bdc6e72146105e557806340b47e1a146105fa578063483c2ef01461061a5761045b565b806323b872dd1461054e5780632e1a7d4d1461056e5780632f4f21e21461058e57806330adf81f146105ae5761045b565b806318160ddd116103e757806318160ddd146104ef5780631f15d71a1461050457806320606b701461051957806322a051411461052e5761045b565b806306fdde0314610460578063076771111461048b578063095ea7b3146104ad5780630f23475d146104da5761045b565b3661045b573373b31f66aa3c1e785363f0875a1b74e27b85fd66c7146104595760405162461bcd60e51b815260040161045090614a1f565b60405180910390fd5b005b600080fd5b34801561046c57600080fd5b50610475610b7b565b6040516104829190614795565b60405180910390f35b34801561049757600080fd5b506104a0610c09565b604051610482919061470e565b3480156104b957600080fd5b506104cd6104c836600461428a565b610c0f565b6040516104829190614703565b3480156104e657600080fd5b506104a0610c26565b3480156104fb57600080fd5b506104a0610c36565b34801561051057600080fd5b506104a0610c3c565b34801561052557600080fd5b506104a0610c42565b34801561053a57600080fd5b50610459610549366004614452565b610c66565b34801561055a57600080fd5b506104cd6105693660046141dd565b610ccf565b34801561057a57600080fd5b506104596105893660046143fe565b610db6565b34801561059a57600080fd5b506104596105a936600461428a565b61045b565b3480156105ba57600080fd5b506104a0610f0a565b3480156105cf57600080fd5b506105d8610f2e565b6040516104829190615029565b3480156105f157600080fd5b506104a0610f33565b34801561060657600080fd5b506104596106153660046141a5565b610f39565b34801561062657600080fd5b506104cd61063536600461416d565b610f71565b34801561064657600080fd5b506104596105a9366004614483565b34801561066157600080fd5b5061045961067036600461416d565b610f86565b34801561068157600080fd5b50610459610690366004614378565b61106a565b3480156106a157600080fd5b506104596106b03660046143fe565b611108565b3480156106c157600080fd5b506104a06111b4565b3480156106d657600080fd5b506104a06111ba565b3480156106eb57600080fd5b506104a06106fa36600461416d565b6111c0565b34801561070b57600080fd5b506104596111df565b34801561072057600080fd5b506104a0611268565b34801561073557600080fd5b506104a061126e565b34801561074a57600080fd5b506104596107593660046141a5565b611274565b34801561076a57600080fd5b506104a061133d565b34801561077f57600080fd5b506104a061078e36600461416d565b611361565b34801561079f57600080fd5b506104596107ae3660046143fe565b611373565b3480156107bf57600080fd5b506104596107ce36600461428a565b6113f2565b3480156107df57600080fd5b506104a0611504565b3480156107f457600080fd5b5061045961080336600461416d565b61150a565b34801561081457600080fd5b5061081d611610565b60405161048291906145ba565b34801561083657600080fd5b5061045961084536600461416d565b61161f565b34801561085657600080fd5b506104756116b2565b34801561086b57600080fd5b5061045961087a3660046143fe565b61170c565b34801561088b57600080fd5b506104a06117ba565b3480156108a057600080fd5b506104596108af36600461416d565b6117de565b3480156108c057600080fd5b5061081d6108cf36600461416d565b611965565b3480156108e057600080fd5b506104596108ef3660046143fe565b611980565b34801561090057600080fd5b506104cd61090f36600461428a565b611a28565b61045961092236600461416d565b611a35565b34801561093357600080fd5b5061045961094236600461442e565b611ada565b34801561095357600080fd5b506104cd611d71565b34801561096857600080fd5b506104596105a93660046143fe565b34801561098357600080fd5b506104a0611d7a565b34801561099857600080fd5b506104a0611dbb565b3480156109ad57600080fd5b506104a0611dc1565b3480156109c257600080fd5b5061081d61211d565b3480156109d757600080fd5b506104596109e63660046143fe565b61212c565b6104596121d4565b3480156109ff57600080fd5b50610459610a0e36600461421d565b612278565b348015610a1f57600080fd5b5061081d61232d565b348015610a3457600080fd5b506104a061233c565b348015610a4957600080fd5b5061045961236e565b348015610a5e57600080fd5b506104a0610a6d3660046141a5565b6123c5565b348015610a7e57600080fd5b506104a0610a8d3660046143fe565b6123f0565b348015610a9e57600080fd5b50610459610aad3660046143fe565b61242a565b348015610abe57600080fd5b506104a06124a9565b348015610ad357600080fd5b5061081d610ae23660046143fe565b6124af565b348015610af357600080fd5b506104a0610b023660046143fe565b6124d6565b348015610b1357600080fd5b506104a0612507565b348015610b2857600080fd5b506104a061259e565b348015610b3d57600080fd5b50610459610b4c36600461416d565b6125a4565b348015610b5d57600080fd5b5061081d612665565b348015610b7257600080fd5b50610459612674565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c015780601f10610bd657610100808354040283529160200191610c01565b820191906000526020600020905b815481529060010190602001808311610be457829003601f168201915b505050505081565b60105481565b6000610c1c338484612942565b5060015b92915050565b6000610c3061133d565b90505b90565b60025481565b60185481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600b546001600160a01b03163314610c905760405162461bcd60e51b815260040161045090614d95565b610c9c848484846129f6565b600080610ca7612a0a565b509092509050610cbf610cba8383612b7d565b612bbf565b610cc7612ce7565b505050505050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610d0957506000198114155b15610d9f576000610d35856040518060600160405280602f81526020016150c4602f9139849190612fc0565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610d9590859061470e565b60405180910390a3505b610daa868686612fec565b50600195945050505050565b60026012541415610dd95760405162461bcd60e51b815260040161045090614f77565b60026012819055506000610e01600254610dfb84610df561133d565b906130d0565b9061310a565b90506019548111610e245760405162461bcd60e51b815260040161045090614ac4565b8015610f0157610e34338361314c565b6000610e3f82613226565b90506000336001600160a01b031682604051610e5a90610c33565b60006040518083038185875af1925050503d8060008114610e97576040519150601f19603f3d011682016040523d82523d6000602084013e610e9c565b606091505b5050905080610ebd5760405162461bcd60e51b815260040161045090614e86565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436483604051610ef6919061470e565b60405180910390a250505b50506001601255565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b600b546001600160a01b03163314610f635760405162461bcd60e51b815260040161045090614d95565b610f6d8282613375565b5050565b60086020526000908152604090205460ff1681565b610f8e61346b565b6001600160a01b0316610f9f611610565b6001600160a01b031614610fc55760405162461bcd60e51b815260040161045090614c38565b6001600160a01b03811660009081526008602052604090205460ff1615610ffe5760405162461bcd60e51b8152600401610450906149e8565b6001600160a01b0381166000908152600860205260409020805460ff1916600190811790915560075461103091612916565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b61107261346b565b6001600160a01b0316611083611610565b6001600160a01b0316146110a95760405162461bcd60e51b815260040161045090614c38565b600e5460ff16151581151514156110bf57600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906110fd908390614703565b60405180910390a150565b61111061346b565b6001600160a01b0316611121611610565b6001600160a01b0316146111475760405162461bcd60e51b815260040161045090614c38565b6000811161115457600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611181573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa286000826040516110fd9291906145ce565b60115481565b60195481565b6001600160a01b0381166000908152600460205260409020545b919050565b6111e761346b565b6001600160a01b03166111f8611610565b6001600160a01b03161461121e5760405162461bcd60e51b815260040161045090614c38565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b600d5481565b60155481565b61127c61346b565b6001600160a01b031661128d611610565b6001600160a01b0316146112b35760405162461bcd60e51b815260040161045090614c38565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b3906112e29084906000906004016145ce565b602060405180830381600087803b1580156112fc57600080fd5b505af1158015611310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113349190614394565b610f6d57600080fd5b600080600061134a612a0a565b50909250905061135a8282612b7d565b9250505090565b60056020526000908152604090205481565b61137b61346b565b6001600160a01b031661138c611610565b6001600160a01b0316146113b25760405162461bcd60e51b815260040161045090614c38565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c54826040516113e5929190614fe3565b60405180910390a1600c55565b6113fa61346b565b6001600160a01b031661140b611610565b6001600160a01b0316146114315760405162461bcd60e51b815260040161045090614c38565b6000811161143e57600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb9061146c90339085906004016145ce565b602060405180830381600087803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114be9190614394565b6114c757600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2882826040516114f89291906145ce565b60405180910390a15050565b600f5481565b61151261346b565b6001600160a01b0316611523611610565b6001600160a01b0316146115495760405162461bcd60e51b815260040161045090614c38565b60006007541161156b5760405162461bcd60e51b81526004016104509061492e565b6001600160a01b03811660009081526008602052604090205460ff1615156001146115a85760405162461bcd60e51b815260040161045090614b21565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546115d6906001612b7d565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b031633146116495760405162461bcd60e51b815260040161045090614d95565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c0091611688916001600160a01b039091169084906145e7565b60405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610c015780601f10610bd657610100808354040283529160200191610c01565b61171461346b565b6001600160a01b0316611725611610565b6001600160a01b03161461174b5760405162461bcd60e51b815260040161045090614c38565b61271061176f600f546117696010548561291690919063ffffffff16565b90612916565b111561177a57600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131601154826040516117ad929190614fe3565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600b546001600160a01b031633146118085760405162461bcd60e51b815260040161045090614d95565b6001600160a01b038116600090815260136020526040812080546001600160a01b0319169055805b6014548110156118d9576014818154811061184757fe5b6000918252602090912001546001600160a01b03848116911614156118d1576014805460019350600019810190811061187c57fe5b600091825260209091200154601480546001600160a01b0390921691839081106118a257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101611830565b50806118f75760405162461bcd60e51b815260040161045090614b7e565b601480548061190257fe5b600082815260209020810160001990810180546001600160a01b0319169055019055601554611932906001612b7d565b6015556040517f963b7c735475147a62c589c2d7cb8ec4b0a6b7af4f97373d79ebfa42ab8aa7dc906114f89084906145ba565b6013602052600090815260409020546001600160a01b031681565b61198861346b565b6001600160a01b0316611999611610565b6001600160a01b0316146119bf5760405162461bcd60e51b815260040161045090614c38565b6127106119dd6011546117696010548561291690919063ffffffff16565b11156119e857600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f5482604051611a1b929190614fe3565b60405180910390a1600f55565b6000610c1c338484612fec565b60026012541415611a585760405162461bcd60e51b815260040161045090614f77565b600260128190555073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611aaf57600080fd5b505af1158015611ac3573d6000803e3d6000fd5b5050505050611ad2813461346f565b506001601255565b611ae261346b565b6001600160a01b0316611af3611610565b6001600160a01b031614611b195760405162461bcd60e51b815260040161045090614c38565b6040516370a0823160e01b815260009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190611b539030906004016145ba565b60206040518083038186803b158015611b6b57600080fd5b505afa158015611b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba39190614416565b9050600080611bb0612a0a565b509092509050611bc3610cba8383612b7d565b601b54604051631a4ca37b60e21b81526001600160a01b03909116906369328dec90611c0d9073b31f66aa3c1e785363f0875a1b74e27b85fd66c790600019903090600401614601565b602060405180830381600087803b158015611c2757600080fd5b505af1158015611c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c5f9190614416565b506040516370a0823160e01b815260009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190611c9a9030906004016145ba565b60206040518083038186803b158015611cb257600080fd5b505afa158015611cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cea9190614416565b905085611cf78286612b7d565b1015611d155760405162461bcd60e51b815260040161045090614c6d565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611d3e61133d565b600254604051611d4f929190614fe3565b60405180910390a1600e5460ff16151560011415610cc757610cc7600061106a565b600e5460ff1681565b600080611d85611dc1565b9050600c548110611db357611dab612710610dfb600f54846130d090919063ffffffff16565b915050610c33565b600091505090565b600c5481565b60408051600280825260608083018452600093909291906020830190803683375050601c5482519293506001600160a01b031691839150600090611e0157fe5b6001600160a01b039283166020918202929092010152601d54825191169082906001908110611e2c57fe5b6001600160a01b039283166020918202929092010152601a546040517f4c0369c300000000000000000000000000000000000000000000000000000000815260609283921690634c0369c390611e8890869030906004016146a6565b60006040518083038186803b158015611ea057600080fd5b505afa158015611eb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611edc91908101906142b5565b6040516370a0823160e01b8152919350915060009073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190611f1b9030906004016145ba565b60206040518083038186803b158015611f3357600080fd5b505afa158015611f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6b9190614416565b9050611f778147612916565b5060005b8351811015612114576000848281518110611f9257fe5b6020026020010151905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b0316816001600160a01b03161415611ff757611ff0848381518110611fd957fe5b60200260200101518461291690919063ffffffff16565b925061210b565b6040516370a0823160e01b81526000906001600160a01b038316906370a08231906120269030906004016145ba565b60206040518083038186803b15801561203e57600080fd5b505afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120769190614416565b905060006120a086858151811061208957fe5b60200260200101518361291690919063ffffffff16565b6001600160a01b038085166000908152601360205260409020549192501681158015906120d557506001600160a01b03811615155b15612107576121046120fd838673b31f66aa3c1e785363f0875a1b74e27b85fd66c78561355b565b8790612916565b95505b5050505b50600101611f7b565b50935050505090565b6009546001600160a01b031681565b61213461346b565b6001600160a01b0316612145611610565b6001600160a01b03161461216b5760405162461bcd60e51b815260040161045090614c38565b612710612189600f546117696011548561291690919063ffffffff16565b111561219457600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516121c7929190614fe3565b60405180910390a1601055565b600260125414156121f75760405162461bcd60e51b815260040161045090614f77565b600260128190555073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561224e57600080fd5b505af1158015612262573d6000803e3d6000fd5b5050505050612271333461346f565b6001601255565b428410156122985760405162461bcd60e51b815260040161045090614a8d565b6001600160a01b038716600090815260056020908152604080832080546001810190915590516122f3927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101614717565b6040516020818303038152906040528051906020012090506123188882868686613636565b612323888888612942565b5050505050505050565b600b546001600160a01b031681565b6000806000612349612a0a565b50909250905061135a61235c8383612b7d565b610dfb84670de0b6b3a76400006130d0565b61237661346b565b6001600160a01b0316612387611610565b6001600160a01b0316146123ad5760405162461bcd60e51b815260040161045090614c38565b60405162461bcd60e51b815260040161045090614d5e565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60006124066123fd61133d565b600254906130d0565b6124115750806111da565b610c2061241c61133d565b600254610dfb9085906130d0565b61243261346b565b6001600160a01b0316612443611610565b6001600160a01b0316146124695760405162461bcd60e51b815260040161045090614c38565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d548260405161249c929190614fe3565b60405180910390a1600d55565b60165481565b601481815481106124bc57fe5b6000918252602090912001546001600160a01b0316905081565b60006124e36123fd61133d565b6124ef575060006111da565b610c20600254610dfb61250061133d565b85906130d0565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161253c9190614514565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc661256e613703565b3060405160200161258395949392919061474b565b60405160208183030381529060405280519060200120905090565b60175481565b6125ac61346b565b6001600160a01b03166125bd611610565b6001600160a01b0316146125e35760405162461bcd60e51b815260040161045090614c38565b6001600160a01b0381166126095760405162461bcd60e51b815260040161045090614806565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b3233146126935760405162461bcd60e51b815260040161045090614863565b600260125414156126b65760405162461bcd60e51b815260040161045090614f77565b60026012556122716000613707565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561270057600080fd5b505afa158015612714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127389190614189565b6001600160a01b0316836001600160a01b031614806127d85750836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801561278b57600080fd5b505afa15801561279f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127c39190614189565b6001600160a01b0316836001600160a01b0316145b80156128f05750836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128509190614189565b6001600160a01b0316826001600160a01b031614806128f05750836001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156128a357600080fd5b505afa1580156128b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128db9190614189565b6001600160a01b0316826001600160a01b0316145b801561290e5750816001600160a01b0316836001600160a01b031614155b949350505050565b60008282018381101561293b5760405162461bcd60e51b81526004016104509061489a565b9392505050565b6001600160a01b0383166129685760405162461bcd60e51b815260040161045090614cca565b6001600160a01b03821661298e5760405162461bcd60e51b815260040161045090614f40565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906129e990859061470e565b60405180910390a3505050565b601693909355601892909255601755601955565b601c546040516370a0823160e01b8152600091829182916001600160a01b0316906370a0823190612a3f9030906004016145ba565b60206040518083038186803b158015612a5757600080fd5b505afa158015612a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8f9190614416565b601d546040516370a0823160e01b81529194506001600160a01b0316906370a0823190612ac09030906004016145ba565b60206040518083038186803b158015612ad857600080fd5b505afa158015612aec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b109190614416565b91506000905081612b3e601654610dfb612b37601854601654612b7d90919063ffffffff16565b87906130d0565b1115612b7857612b7582612b6f601654610dfb612b68601854601654612b7d90919063ffffffff16565b88906130d0565b90612b7d565b90505b909192565b600061293b83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612fc0565b6000806000612bcc612a0a565b919450925090506000612c14612be686612b6f8787612b7d565b612b6f601854610dfb612c06601754601654612b7d90919063ffffffff16565b610df58b612b6f8c8c612b7d565b90506000612c228483612b7d565b90508015610cc757601b546040517f2dad97d40000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690632dad97d490612c8c9073b31f66aa3c1e785363f0875a1b74e27b85fd66c7908590600290600401614651565b602060405180830381600087803b158015612ca657600080fd5b505af1158015612cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cde9190614416565b50505050505050565b6000806000612cf4612a0a565b9250925092506000612d26601854610dfb612d1c601754601654612b7d90919063ffffffff16565b610df58888612b7d565b601b5460405163095ea7b360e01b815291925073b31f66aa3c1e785363f0875a1b74e27b85fd66c79163095ea7b391612d6f916001600160a01b039091169085906004016145ce565b602060405180830381600087803b158015612d8957600080fd5b505af1158015612d9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc19190614394565b505b80841015612f225780612dd68584612916565b1115612de957612de68185612b7d565b91505b601954821015612df857612f22565b601b546040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063a415bcad90612e5f9073b31f66aa3c1e785363f0875a1b74e27b85fd66c79086906002906000903090600401614672565b600060405180830381600087803b158015612e7957600080fd5b505af1158015612e8d573d6000803e3d6000fd5b5050601b5460405163617ba03760e01b81526001600160a01b03909116925063617ba0379150612edc9073b31f66aa3c1e785363f0875a1b74e27b85fd66c79086903090600090600401614624565b600060405180830381600087803b158015612ef657600080fd5b505af1158015612f0a573d6000803e3d6000fd5b50505050612f16612a0a565b91955093509150612dc3565b601b5460405163095ea7b360e01b815273b31f66aa3c1e785363f0875a1b74e27b85fd66c79163095ea7b391612f67916001600160a01b0316906000906004016145ce565b602060405180830381600087803b158015612f8157600080fd5b505af1158015612f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb99190614394565b5050505050565b60008184841115612fe45760405162461bcd60e51b81526004016104509190614795565b505050900390565b6001600160a01b0382166130125760405162461bcd60e51b815260040161045090614d01565b61304f816040518060600160405280602e815260200161511a602e91396001600160a01b0386166000908152600460205260409020549190612fc0565b6001600160a01b03808516600090815260046020526040808220939093559084168152205461307e9082612916565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129e990859061470e565b6000826130df57506000610c20565b828202828482816130ec57fe5b041461293b5760405162461bcd60e51b815260040161045090614bdb565b600061293b83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613938565b613189816040518060600160405280602781526020016150f3602791396001600160a01b0385166000908152600460205260409020549190612fc0565b60046000846001600160a01b03166001600160a01b03168152602001908152602001600020819055506131d98160405180606001604052806027815260200161509d602791396002549190612fc0565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061321a90859061470e565b60405180910390a35050565b600061323182612bbf565b600061323b612a0a565b505090508083111561324d5760001992505b601b54604051631a4ca37b60e21b81526000916001600160a01b0316906369328dec906132969073b31f66aa3c1e785363f0875a1b74e27b85fd66c79088903090600401614601565b602060405180830381600087803b1580156132b057600080fd5b505af11580156132c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132e89190614416565b6040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815290915073b31f66aa3c1e785363f0875a1b74e27b85fd66c790632e1a7d4d9061333b90849060040161470e565b600060405180830381600087803b15801561335557600080fd5b505af1158015613369573d6000803e3d6000fd5b5050505061293b612ce7565b600a546001600160a01b038381169116146133bf57600a546133a390829084906001600160a01b03166126c5565b6133bf5760405162461bcd60e51b8152600401610450906147a8565b6001600160a01b03808316600081815260136020526040812080549385166001600160a01b03199485161790556014805460018181018355919092527fce6d7b5282bd9a3661ae061feed1dbda4e52ab073b1f9285be6e155d9c38d4ec909101805490931690911790915560155461343691612916565b6015556040517f916e172c080569186aa7ea048268267257cf7cc49505908863f747bca8620f80906114f890849084906145e7565b3390565b600754156134ab573360009081526008602052604090205460ff1615156001146134ab5760405162461bcd60e51b8152600401610450906148d1565b600e5460ff1615156001146134d25760405162461bcd60e51b815260040161045090614a56565b600d54156134fb5760006134e4611dc1565b9050600d548111156134f9576134f982613707565b505b61350d82613508836123f0565b61396f565b613516816139f1565b816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161354f919061470e565b60405180910390a25050565b6000806135688585613b30565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156135a757600080fd5b505afa1580156135bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135df91906143b0565b5091509150866001600160a01b0316836001600160a01b0316146135ff57905b61362a88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613b61565b98975050505050505050565b6000613640612507565b85604051602001613652929190614584565b60405160208183030381529060405280519060200120905060006001828686866040516000815260200160405260405161368f9493929190614777565b6020604051602081039080840390855afa1580156136b1573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906136e75750866001600160a01b0316816001600160a01b0316145b612cde5760405162461bcd60e51b81526004016104509061498b565b4690565b60408051600280825260608083018452926020830190803683375050601c5482519293506001600160a01b03169183915060009061374157fe5b6001600160a01b039283166020918202929092010152601d5482519116908290600190811061376c57fe5b6001600160a01b039283166020918202929092010152601a546040517fbb492bf500000000000000000000000000000000000000000000000000000000815291169063bb492bf5906137c490849030906004016146a6565b600060405180830381600087803b1580156137de57600080fd5b505af11580156137f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261381a91908101906142b5565b50506000613826613ba9565b90506138328184612b7d565b90508261385b57600c5481101561385b5760405162461bcd60e51b815260040161045090614dcc565b6000613878612710610dfb601154856130d090919063ffffffff16565b9050801561389d57600a54600b5461389d916001600160a01b03908116911683613df2565b60006138ba612710610dfb600f54866130d090919063ffffffff16565b905080156138d957600a546138d9906001600160a01b03163383613df2565b6138ef6138ea82612b6f8686612b7d565b6139f1565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461391861133d565b600254604051613929929190614fe3565b60405180910390a15050505050565b600081836139595760405162461bcd60e51b81526004016104509190614795565b50600083858161396557fe5b0495945050505050565b60025461397c9082612916565b6002556001600160a01b0382166000908152600460205260409020546139a29082612916565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061321a90859061470e565b60008111613a115760405162461bcd60e51b815260040161045090614e29565b601b5460405163095ea7b360e01b815273b31f66aa3c1e785363f0875a1b74e27b85fd66c79163095ea7b391613a55916001600160a01b03169085906004016145ce565b602060405180830381600087803b158015613a6f57600080fd5b505af1158015613a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa79190614394565b50601b5460405163617ba03760e01b81526001600160a01b039091169063617ba03790613af39073b31f66aa3c1e785363f0875a1b74e27b85fd66c79085903090600090600401614624565b600060405180830381600087803b158015613b0d57600080fd5b505af1158015613b21573d6000803e3d6000fd5b50505050613b2d612ce7565b50565b600080826001600160a01b0316846001600160a01b031610613b53578284613b56565b83835b915091509250929050565b600080613b70856103e56130d0565b90506000613b7e82856130d0565b90506000613b9283611769886103e86130d0565b9050613b9e828261310a565b979650505050505050565b6040516370a0823160e01b8152600090819073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190613be59030906004016145ba565b60206040518083038186803b158015613bfd57600080fd5b505afa158015613c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c359190614416565b60145490915060005b81811015613dea57600060148281548110613c5557fe5b6000918252602090912001546001600160a01b0316905073b31f66aa3c1e785363f0875a1b74e27b85fd66c7811415613d1457478015613d0d5773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613cde57600080fd5b505af1158015613cf2573d6000803e3d6000fd5b5050505050613d0a818661291690919063ffffffff16565b94505b5050613de2565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190613d439030906004016145ba565b60206040518083038186803b158015613d5b57600080fd5b505afa158015613d6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d939190614416565b90508015613ddf576001600160a01b03808316600090815260136020526040902054168015613ddd57600a54613dda906120fd90849086906001600160a01b031685613e93565b95505b505b50505b600101613c3e565b509091505090565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb90613e2090859085906004016145ce565b602060405180830381600087803b158015613e3a57600080fd5b505af1158015613e4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e729190614394565b613e8e5760405162461bcd60e51b815260040161045090614ee3565b505050565b600080613ea08585613b30565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015613edf57600080fd5b505afa158015613ef3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f1791906143b0565b5091509150866001600160a01b0316836001600160a01b031614613f3757905b600080613f658a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613b61565b9050886001600160a01b0316856001600160a01b031614613f8257905b613f8d89888c614034565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90613fe59085908590309060248101614ff1565b600060405180830381600087803b158015613fff57600080fd5b505af1158015614013573d6000803e3d6000fd5b505050508181116140245781614026565b805b9a9950505050505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061406290859085906004016145ce565b602060405180830381600087803b15801561407c57600080fd5b505af1158015614090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140b49190614394565b613e8e5760405162461bcd60e51b815260040161045090614fae565b600082601f8301126140e0578081fd5b81516140f36140ee8261505b565b615037565b81815291506020808301908481018184028601820187101561411457600080fd5b60005b8481101561413357815184529282019290820190600101614117565b505050505092915050565b80516dffffffffffffffffffffffffffff811681146111da57600080fd5b803560ff811681146111da57600080fd5b60006020828403121561417e578081fd5b813561293b81615079565b60006020828403121561419a578081fd5b815161293b81615079565b600080604083850312156141b7578081fd5b82356141c281615079565b915060208301356141d281615079565b809150509250929050565b6000806000606084860312156141f1578081fd5b83356141fc81615079565b9250602084013561420c81615079565b929592945050506040919091013590565b600080600080600080600060e0888a031215614237578283fd5b873561424281615079565b9650602088013561425281615079565b9550604088013594506060880135935061426e6080890161415c565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561429c578182fd5b82356142a781615079565b946020939093013593505050565b600080604083850312156142c7578182fd5b825167ffffffffffffffff808211156142de578384fd5b818501915085601f8301126142f1578384fd5b81516142ff6140ee8261505b565b80828252602080830192508086018a82838702890101111561431f578889fd5b8896505b8487101561434a57805161433681615079565b845260019690960195928101928101614323565b508801519096509350505080821115614361578283fd5b5061436e858286016140d0565b9150509250929050565b600060208284031215614389578081fd5b813561293b8161508e565b6000602082840312156143a5578081fd5b815161293b8161508e565b6000806000606084860312156143c4578283fd5b6143cd8461413e565b92506143db6020850161413e565b9150604084015163ffffffff811681146143f3578182fd5b809150509250925092565b60006020828403121561440f578081fd5b5035919050565b600060208284031215614427578081fd5b5051919050565b60008060408385031215614440578182fd5b8235915060208301356141d28161508e565b60008060008060808587031215614467578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a0868803121561449a578283fd5b85359450602086013593506144b16040870161415c565b94979396509394606081013594506080013592915050565b60008151808452815b818110156144ee576020818501810151868301820152016144d2565b818111156144ff5782602083870101525b50601f01601f19169290920160200192915050565b6000808354600180821660008114614533576001811461454a57614579565b60ff198316865260028304607f1686019350614579565b600283048786526020808720875b838110156145715781548a820152908501908201614558565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b604080825283519082018190526000906020906060840190828701845b828110156146e85781516001600160a01b0316845292840192908401906001016146c3565b5050506001600160a01b039490941692019190915250919050565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b60006020825261293b60208301846144c9565b602080825260409082018190527f5661726961626c655265776172647353747261746567793a3a53776170207061908201527f697220646f6573206e6f7420636f6e7461696e2072657761726420746f6b656e606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602e908201527f5065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f73697460408201527f732c206e6f7420616c6c6f776564000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b6020808252600b908201527f6e6f7420616c6c6f776564000000000000000000000000000000000000000000604082015260600190565b6020808252601c908201527f4161766553747261746567794176617856313a3a5f6465706f73697400000000604082015260600190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252602a908201527f4161766553747261746567794176617856313a3a62656c6f77206d696e696d7560408201527f6d20776974686472617700000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5661726961626c655265776172647353747261746567793a3a5265776172642060408201527f746f2064656c657465206e6f7420666f756e6421000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526027908201527f4161766553747261746567794176617856313a3a7265736375654465706c6f7960408201527f656446756e647300000000000000000000000000000000000000000000000000606082015260800190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526019908201527f736574416c6c6f77616e6365733a3a6465707265636174656400000000000000604082015260600190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b60208082526030908201527f5661726961626c655265776172647353747261746567793a3a5265696e76657360408201527f7420616d6f756e7420746f6f206c6f7700000000000000000000000000000000606082015260800190565b60208082526027908201527f4161766553747261746567794176617856313a3a5f7374616b654465706f736960408201527f74546f6b656e7300000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f4161766553747261746567794176617856313a3a7472616e736665722066616960408201527f6c65640000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4161766553747261746567794176617856313a3a5452414e534645525f46524f60408201527f4d5f4641494c4544000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b918252602082015260400190565b60008582528460208301526001600160a01b03841660408301526080606083015261501f60808301846144c9565b9695505050505050565b60ff91909116815260200190565b60405181810167ffffffffffffffff8111828210171561505357fe5b604052919050565b600067ffffffffffffffff82111561506f57fe5b5060209081020190565b6001600160a01b0381168114613b2d57600080fd5b8015158114613b2d57600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220fe95e220af1afdc34f644153f86498b8922a9ec265af3a6ae13729947be9b67764736f6c63430007030033",
  "devdoc": {
    "details": "No need to _enterMarket() as LendingPool already defaults collateral to true. See https://github.com/aave/protocol-v2/blob/master/contracts/protocol/lendingpool/LendingPool.sol#L123-L126",
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit()": {
        "details": "Must mint receipt tokens to `msg.sender`"
      },
      "depositFor(address)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "title": "Aave strategy for AVAX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit()": {
        "notice": "Deposit and deploy deposits tokens to the strategy using AVAX"
      },
      "depositFor(address)": {
        "notice": "Deposit on behalf of another account using AVAX"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimated deposit token balance deployed by strategy, excluding balance"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6348,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6351,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6356,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6362,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6366,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6382,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22000,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 22113,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 22117,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7732,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)11763"
      },
      {
        "astId": 7734,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)11763"
      },
      {
        "astId": 7736,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7738,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7740,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7742,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 7744,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7746,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7748,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 22497,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "_status",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 25567,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "rewardSwapPairs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 25570,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "supportedRewards",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 25572,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "rewardCount",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 25574,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "leverageLevel",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 25576,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "safetyFactor",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 25578,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "leverageBips",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 25580,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "minMinting",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 25582,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "rewardController",
        "offset": 0,
        "slot": "26",
        "type": "t_contract(IAaveV3IncentivesController)10640"
      },
      {
        "astId": 25584,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "tokenDelegator",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(ILendingPoolAaveV3)14784"
      },
      {
        "astId": 25591,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "avToken",
        "offset": 0,
        "slot": "28",
        "type": "t_address"
      },
      {
        "astId": 25593,
        "contract": "contracts/strategies/AaveV3StrategyAvaxV1.sol:AaveV3StrategyAvaxV1",
        "label": "avDebtToken",
        "offset": 0,
        "slot": "29",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveV3IncentivesController)10640": {
        "encoding": "inplace",
        "label": "contract IAaveV3IncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)11763": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPoolAaveV3)14784": {
        "encoding": "inplace",
        "label": "contract ILendingPoolAaveV3",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}