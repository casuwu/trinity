{
  "address": "0x89a806347b0814a265Dc17aFc343866b2214dD0F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvestBeforeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "UpdateRequireReinvestBeforeDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUIRE_REINVEST_BEFORE_DEPOSIT",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IOliveChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvestBeforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRequireReinvestBeforeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x89a806347b0814a265Dc17aFc343866b2214dD0F",
    "transactionIndex": 0,
    "gasUsed": "5257689",
    "logsBloom": "0x
    "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61",
    "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 989386,
        "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
        "address": "0x89a806347b0814a265Dc17aFc343866b2214dD0F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 989386,
        "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
        "address": "0xF54a719215622f602FCA5BF5a6509734C3574a4c",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000089a806347b0814a265dc17afc343866b2214dd0f",
          "0x0000000000000000000000005a9710f3f23053573301c2ab5024d0a43a461e80"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 989386,
        "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
        "address": "0x617724974218A18769020A70162165A539c07E8a",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000089a806347b0814a265dc17afc343866b2214dd0f",
          "0x0000000000000000000000000c45fb63001b56a21e29c7dcc1727bfda273a368"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 989386,
        "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
        "address": "0x617724974218A18769020A70162165A539c07E8a",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000089a806347b0814a265dc17afc343866b2214dd0f",
          "0x0000000000000000000000000c45fb63001b56a21e29c7dcc1727bfda273a368"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 989386,
        "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
        "address": "0xde3A24028580884448a5397872046a019649b084",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000089a806347b0814a265dc17afc343866b2214dd0f",
          "0x0000000000000000000000000c45fb63001b56a21e29c7dcc1727bfda273a368"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 989386,
        "transactionHash": "0x99a813a1d599558704c3c5f41704bfa212db19d827e2f15b89cd4784f1c6a6b3",
        "address": "0x89a806347b0814a265Dc17aFc343866b2214dD0F",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0xbfdfb2c0bd78d58af8b2b295770b8b487e83f59cbb8ed3bf56d7228b34566b61"
      }
    ],
    "blockNumber": 989386,
    "cumulativeGasUsed": "5257689",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF54a719215622f602FCA5BF5a6509734C3574a4c",
    "0x617724974218A18769020A70162165A539c07E8a",
    "0x5A9710f3f23053573301C2aB5024D0a43A461E80",
    "0x0c45FB63001b56a21e29c7dcc1727bfDA273a368",
    "9"
  ],
  "solcInputHash": "c681ce2f8bfb4c348e439bdd5cec75cb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvestBeforeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"UpdateRequireReinvestBeforeDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUIRE_REINVEST_BEFORE_DEPOSIT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IOliveChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvestBeforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRequireReinvestBeforeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"details\":\"Staking rewards accurue to contract on each deposit/withdrawal\",\"returns\":{\"_0\":\"Unclaimed rewards, plus contract balance\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"emergencyWithdraw()\":{\"details\":\"Reward tokens are not automatically collectedNew deposits will be effectively disabled\"},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"reinvest()\":{\"details\":\"This external function requires minimum tokens to be met\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"revokeAllowance(address,address)\":{\"details\":\"Restricted to avoid griefing attacks\",\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Restricted to avoid griefing attacks\"},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateMinTokensToReinvestBeforeDeposit(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateReinvestReward(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of receipt tokens to redeem\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_TYPEHASH()\":{\"notice\":\"keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\"},\"VERSION_HASH()\":{\"notice\":\"keccak256(\\\"1\\\");\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward token balance that can be reinvested\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"emergencyWithdraw()\":{\"notice\":\"Allows exit from Staking Contract without additional logic\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest rewards from staking contract to deposit tokens\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest minimum threshold for external callers\"},\"updateMinTokensToReinvestBeforeDeposit(uint256)\":{\"notice\":\"Update reinvest minimum threshold before a deposit\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"updateRequireReinvestBeforeDeposit()\":{\"notice\":\"Toggle requirement to reinvest before deposit\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw LP tokens by redeeming receipt tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OliveStrategyForLP.sol\":\"OliveStrategyForLP\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/OliveStrategyForLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IOliveChef.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IPair.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\n\\ncontract OliveStrategyForLP is YakERC20, Ownable {\\n  using SafeMath for uint;\\n\\n  uint public totalDeposits;\\n\\n  IRouter public router;\\n  IPair public depositToken;\\n  IERC20 private token0;\\n  IERC20 private token1;\\n  IERC20 public rewardToken;\\n  IOliveChef public stakingContract;\\n\\n  uint public PID;\\n  uint public MIN_TOKENS_TO_REINVEST = 20000;\\n  uint public REINVEST_REWARD_BIPS = 500;\\n  uint public ADMIN_FEE_BIPS = 500;\\n  uint constant private BIPS_DIVISOR = 10000;\\n  uint constant internal UINT_MAX = uint256(-1);\\n\\n  bool public REQUIRE_REINVEST_BEFORE_DEPOSIT;\\n  uint public MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT = 20;\\n\\n  event Deposit(address indexed account, uint amount);\\n  event Withdraw(address indexed account, uint amount);\\n  event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n  event Recovered(address token, uint amount);\\n  event UpdateAdminFee(uint oldValue, uint newValue);\\n  event UpdateReinvestReward(uint oldValue, uint newValue);\\n  event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n  event UpdateRequireReinvestBeforeDeposit(bool newValue);\\n  event UpdateMinTokensToReinvestBeforeDeposit(uint oldValue, uint newValue);\\n\\n  constructor(\\n    address _depositToken, \\n    address _rewardToken, \\n    address _stakingContract,\\n    address _router,\\n    uint _pid\\n  ) {\\n    depositToken = IPair(_depositToken);\\n    rewardToken = IERC20(_rewardToken);\\n    stakingContract = IOliveChef(_stakingContract);\\n    router = IRouter(_router);\\n\\n    PID = _pid;\\n\\n    address _token0 = IPair(_depositToken).token0();\\n    address _token1 = IPair(_depositToken).token1();\\n    token0 = IERC20(_token0);\\n    token1 = IERC20(_token1);\\n\\n    name = string(\\n      abi.encodePacked(\\n        \\\"Yield Yak: \\\",\\n        depositToken.symbol(), \\\" \\\",\\n        IERC20(_token0).symbol(), \\\"-\\\",\\n        IERC20(_token1).symbol()\\n      )\\n    );\\n\\n    setAllowances();\\n    emit Reinvest(0, 0);\\n  }\\n\\n  /**\\n    * @dev Throws if called by smart contract\\n    */\\n  modifier onlyEOA() {\\n      require(tx.origin == msg.sender, \\\"onlyEOA\\\");\\n      _;\\n  }\\n\\n  /**\\n   * @notice Approve tokens for use in Strategy\\n   * @dev Restricted to avoid griefing attacks\\n   */\\n  function setAllowances() public onlyOwner {\\n    depositToken.approve(address(stakingContract), UINT_MAX);\\n    rewardToken.approve(address(router), UINT_MAX);\\n    token0.approve(address(router), UINT_MAX);\\n    token1.approve(address(router), UINT_MAX);\\n  }\\n\\n  /**\\n    * @notice Revoke token allowance\\n    * @dev Restricted to avoid griefing attacks\\n    * @param token address\\n    * @param spender address\\n    */\\n  function revokeAllowance(address token, address spender) external onlyOwner {\\n    require(IERC20(token).approve(spender, 0));\\n  }\\n\\n  /**\\n   * @notice Deposit tokens to receive receipt tokens\\n   * @param amount Amount of tokens to deposit\\n   */\\n  function deposit(uint amount) external {\\n    _deposit(amount);\\n  }\\n\\n  /**\\n   * @notice Deposit using Permit\\n   * @param amount Amount of tokens to deposit\\n   * @param deadline The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {\\n    depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n    _deposit(amount);\\n  }\\n\\n  function _deposit(uint amount) internal {\\n    require(totalDeposits >= totalSupply, \\\"deposit failed\\\");\\n    if (REQUIRE_REINVEST_BEFORE_DEPOSIT) {\\n      uint unclaimedRewards = checkReward();\\n      if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT) {\\n        _reinvest(unclaimedRewards);\\n      }\\n    }\\n    require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"transferFrom failed\\\");\\n    _stakeDepositTokens(amount);\\n    _mint(msg.sender, getSharesForDepositTokens(amount));\\n    totalDeposits = totalDeposits.add(amount);\\n    emit Deposit(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw LP tokens by redeeming receipt tokens\\n   * @param amount Amount of receipt tokens to redeem\\n   */\\n  function withdraw(uint amount) external {\\n    uint depositTokenAmount = getDepositTokensForShares(amount);\\n    if (depositTokenAmount > 0) {\\n      _withdrawDepositTokens(depositTokenAmount);\\n      require(depositToken.transfer(msg.sender, depositTokenAmount), \\\"transfer failed\\\");\\n      _burn(msg.sender, amount);\\n      totalDeposits = totalDeposits.sub(depositTokenAmount);\\n      emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculate receipt tokens for a given amount of deposit tokens\\n   * @dev If contract is empty, use 1:1 ratio\\n   * @dev Could return zero shares for very low amounts of deposit tokens\\n   * @param amount deposit tokens\\n   * @return receipt tokens\\n   */\\n  function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return amount;\\n    }\\n    return amount.mul(totalSupply).div(totalDeposits);\\n  }\\n\\n  /**\\n   * @notice Calculate deposit tokens for a given amount of receipt tokens\\n   * @param amount receipt tokens\\n   * @return deposit tokens\\n   */\\n  function getDepositTokensForShares(uint amount) public view returns (uint) {\\n    if (totalSupply.mul(totalDeposits) == 0) {\\n      return 0;\\n    }\\n    return amount.mul(totalDeposits).div(totalSupply);\\n  }\\n\\n  /**\\n   * @notice Reward token balance that can be reinvested\\n   * @dev Staking rewards accurue to contract on each deposit/withdrawal\\n   * @return Unclaimed rewards, plus contract balance\\n   */\\n  function checkReward() public view returns (uint) {\\n    uint pendingReward = stakingContract.pendingOlive(PID, address(this));\\n    uint contractBalance = rewardToken.balanceOf(address(this));\\n    return pendingReward.add(contractBalance);\\n  }\\n\\n  /**\\n   * @notice Estimate reinvest reward for caller\\n   * @return Estimated rewards tokens earned for calling `reinvest()`\\n   */\\n  function estimateReinvestReward() external view returns (uint) {\\n    uint unclaimedRewards = checkReward();\\n    if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n      return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to deposit tokens\\n   * @dev This external function requires minimum tokens to be met\\n   */\\n  function reinvest() external onlyEOA {\\n    uint unclaimedRewards = checkReward();\\n    require(unclaimedRewards >= MIN_TOKENS_TO_REINVEST, \\\"MIN_TOKENS_TO_REINVEST\\\");\\n    _reinvest(unclaimedRewards);\\n  }\\n\\n  /**\\n   * @notice Reinvest rewards from staking contract to deposit tokens\\n   * @dev This internal function does not require mininmum tokens to be met\\n   */\\n  function _reinvest(uint amount) internal {\\n    stakingContract.deposit(PID, 0);\\n\\n    uint adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n    if (adminFee > 0) {\\n      require(rewardToken.transfer(owner(), adminFee), \\\"admin fee transfer failed\\\");\\n    }\\n\\n    uint reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    if (reinvestFee > 0) {\\n      require(rewardToken.transfer(msg.sender, reinvestFee), \\\"reinvest fee transfer failed\\\");\\n    }\\n\\n    uint lpTokenAmount = _convertRewardTokensToDepositTokens(amount.sub(adminFee).sub(reinvestFee));\\n    _stakeDepositTokens(lpTokenAmount);\\n    totalDeposits = totalDeposits.add(lpTokenAmount);\\n\\n    emit Reinvest(totalDeposits, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Converts entire reward token balance to deposit tokens\\n   * @dev Always converts through router; there are no price checks enabled\\n   * @return deposit tokens received\\n   */\\n  function _convertRewardTokensToDepositTokens(uint amount) internal returns (uint) {\\n    uint amountIn = amount.div(2);\\n    require(amountIn > 0, \\\"amount too low\\\");\\n\\n    // swap to token0\\n    address[] memory path0 = new address[](2);\\n    path0[0] = address(rewardToken);\\n    path0[1] = address(token0);\\n\\n    uint amountOutToken0 = amountIn;\\n    if (path0[0] != path0[1]) {\\n      uint[] memory amountsOutToken0 = router.getAmountsOut(amountIn, path0);\\n      amountOutToken0 = amountsOutToken0[amountsOutToken0.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken0, path0, address(this), block.timestamp);\\n    }\\n\\n    // swap to token1\\n    address[] memory path1 = new address[](2);\\n    path1[0] = path0[0];\\n    path1[1] = address(token1);\\n\\n    uint amountOutToken1 = amountIn;\\n    if (path1[0] != path1[1]) {\\n      uint[] memory amountsOutToken1 = router.getAmountsOut(amountIn, path1);\\n      amountOutToken1 = amountsOutToken1[amountsOutToken1.length - 1];\\n      router.swapExactTokensForTokens(amountIn, amountOutToken1, path1, address(this), block.timestamp);\\n    }\\n\\n    (,,uint liquidity) = router.addLiquidity(\\n      path0[1], path1[1],\\n      amountOutToken0, amountOutToken1,\\n      0, 0,\\n      address(this),\\n      block.timestamp\\n    );\\n\\n    return liquidity;\\n  }\\n\\n  /**\\n   * @notice Stakes deposit tokens in Staking Contract\\n   * @param amount deposit tokens to stake\\n   */\\n  function _stakeDepositTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.deposit(PID, amount);\\n  }\\n\\n  /**\\n   * @notice Withdraws deposit tokens from Staking Contract\\n   * @dev Reward tokens are automatically collected\\n   * @dev Reward tokens are not automatically reinvested\\n   * @param amount deposit tokens to remove\\n   */\\n  function _withdrawDepositTokens(uint amount) internal {\\n    require(amount > 0, \\\"amount too low\\\");\\n    stakingContract.withdraw(PID, amount);\\n  }\\n\\n  /**\\n   * @notice Allows exit from Staking Contract without additional logic\\n   * @dev Reward tokens are not automatically collected\\n   * @dev New deposits will be effectively disabled\\n   */\\n  function emergencyWithdraw() external onlyOwner {\\n    stakingContract.emergencyWithdraw(PID);\\n    totalDeposits = 0;\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold for external callers\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvest(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n    MIN_TOKENS_TO_REINVEST = newValue;\\n  }\\n\\n  /**\\n   * @notice Update admin fee\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateAdminFee(uint newValue) external onlyOwner {\\n    require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR, \\\"admin fee too high\\\");\\n    emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n    ADMIN_FEE_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Update reinvest reward\\n   * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n   * @param newValue specified in BIPS\\n   */\\n  function updateReinvestReward(uint newValue) external onlyOwner {\\n    require(newValue.add(ADMIN_FEE_BIPS) <= BIPS_DIVISOR, \\\"reinvest reward too high\\\");\\n    emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n    REINVEST_REWARD_BIPS = newValue;\\n  }\\n\\n  /**\\n   * @notice Toggle requirement to reinvest before deposit\\n   */\\n  function updateRequireReinvestBeforeDeposit() external onlyOwner {\\n    REQUIRE_REINVEST_BEFORE_DEPOSIT = !REQUIRE_REINVEST_BEFORE_DEPOSIT;\\n    emit UpdateRequireReinvestBeforeDeposit(REQUIRE_REINVEST_BEFORE_DEPOSIT);\\n  }\\n\\n  /**\\n   * @notice Update reinvest minimum threshold before a deposit\\n   * @param newValue min threshold in wei\\n   */\\n  function updateMinTokensToReinvestBeforeDeposit(uint newValue) external onlyOwner {\\n    emit UpdateMinTokensToReinvestBeforeDeposit(MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT, newValue);\\n    MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT = newValue;\\n  }\\n\\n  /**\\n   * @notice Recover ERC20 from contract\\n   * @param tokenAddress token address\\n   * @param tokenAmount amount to recover\\n   */\\n  function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n    require(tokenAmount > 0, 'amount too low');\\n    require(tokenAddress != address(depositToken), \\\"cannot recover deposit token\\\");\\n    IERC20(tokenAddress).transfer(msg.sender, tokenAmount);\\n    emit Recovered(tokenAddress, tokenAmount);\\n  }\\n\\n  /**\\n   * @notice Recover AVAX from contract\\n   * @param amount amount\\n   */\\n  function recoverAVAX(uint amount) external onlyOwner {\\n    require(amount > 0, 'amount too low');\\n    msg.sender.transfer(amount);\\n    emit Recovered(address(0), amount);\\n  }\\n}\",\"keccak256\":\"0x882bdd8501f718c59f100df091844a0a0f7d94f968c1dc0d0b5faae621601440\",\"license\":\"MIT\"},\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9668eb9a3b98c068430dc416d38c28fde029ec001f3478f910a6ba7d0912810a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IOliveChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IOliveChef {\\n    function olive() external view returns (address);\\n    function olivePerBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n    function add(uint256 _allocPoint, address _lpToken, bool _withUpdate) external;\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n    function pendingOlive(uint256 _pid, address _user) external view returns (uint256);\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function emergencyWithdraw(uint256 _pid) external;\\n    function dev(address _devaddr) external;\\n    function poolInfo(uint pid) external view returns (\\n        address lpToken,\\n        uint allocPoint,\\n        uint lastRewardBlock,\\n        uint accOlivePerShare\\n    );\\n    function userInfo(uint pid, address user) external view returns (\\n        uint256 amount,\\n        uint256 rewardDebt\\n    );\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n}\",\"keccak256\":\"0xcb37b0ad1c47580762a05215dbc1d26ae5c5ea776382ca537ef615c219ad1350\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526040518060400160405280600981526020017f5969656c642059616b0000000000000000000000000000000000000000000000815250600090805190602001906200005192919062000b22565b506040518060400160405280600381526020017f5952540000000000000000000000000000000000000000000000000000000000815250600190805190602001906200009f92919062000b22565b50614e20600f556101f46010556101f46011556014601355348015620000c457600080fd5b5060405162006747380380620067478339818101604052810190620000ea919062000c95565b6000620000fc6200067f60201b60201c565b905080600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35084600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600e8190555060008573ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620002ef57600080fd5b505afa15801562000304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200032a919062000c69565b905060008673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200037557600080fd5b505afa1580156200038a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003b0919062000c69565b905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200049d57600080fd5b505afa158015620004b2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620004dd919062000d43565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b1580156200052457600080fd5b505afa15801562000539573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000564919062000d43565b8273ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015620005ab57600080fd5b505afa158015620005c0573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620005eb919062000d43565b604051602001620005ff9392919062000efa565b604051602081830303815290604052600090805190602001906200062592919062000b22565b50620006366200068760201b60201c565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346000806040516200066a92919062000f85565b60405180910390a15050505050505062001146565b600033905090565b620006976200067f60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620006bd62000af860201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000716576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200070d9062000fb2565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620007b792919062000f58565b602060405180830381600087803b158015620007d257600080fd5b505af1158015620007e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200080d919062000d17565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620008af92919062000f58565b602060405180830381600087803b158015620008ca57600080fd5b505af1158015620008df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000905919062000d17565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401620009a792919062000f58565b602060405180830381600087803b158015620009c257600080fd5b505af1158015620009d7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009fd919062000d17565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b815260040162000a9f92919062000f58565b602060405180830381600087803b15801562000aba57600080fd5b505af115801562000acf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000af5919062000d17565b50565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000b6557805160ff191683800117855562000b96565b8280016001018555821562000b96579182015b8281111562000b9557825182559160200191906001019062000b78565b5b50905062000ba5919062000ba9565b5090565b5b8082111562000bc457600081600090555060010162000baa565b5090565b60008151905062000bd981620010f8565b92915050565b60008151905062000bf08162001112565b92915050565b600082601f83011262000c0857600080fd5b815162000c1f62000c198262001008565b62000fd4565b9150808252602083016020830185838301111562000c3c57600080fd5b62000c49838284620010c0565b50505092915050565b60008151905062000c63816200112c565b92915050565b60006020828403121562000c7c57600080fd5b600062000c8c8482850162000bc8565b91505092915050565b600080600080600060a0868803121562000cae57600080fd5b600062000cbe8882890162000bc8565b955050602062000cd18882890162000bc8565b945050604062000ce48882890162000bc8565b935050606062000cf78882890162000bc8565b925050608062000d0a8882890162000c52565b9150509295509295909350565b60006020828403121562000d2a57600080fd5b600062000d3a8482850162000bdf565b91505092915050565b60006020828403121562000d5657600080fd5b600082015167ffffffffffffffff81111562000d7157600080fd5b62000d7f8482850162000bf6565b91505092915050565b62000d938162001062565b82525050565b62000da481620010ac565b82525050565b600062000db7826200103b565b62000dc3818562001057565b935062000dd5818560208601620010c0565b80840191505092915050565b600062000df0600b8362001057565b91507f5969656c642059616b3a200000000000000000000000000000000000000000006000830152600b82019050919050565b600062000e3260018362001057565b91507f20000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600062000e7460208362001046565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b600062000eb660018362001057565b91507f2d000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b62000ef481620010a2565b82525050565b600062000f078262000de1565b915062000f15828662000daa565b915062000f228262000e23565b915062000f30828562000daa565b915062000f3d8262000ea7565b915062000f4b828462000daa565b9150819050949350505050565b600060408201905062000f6f600083018562000d88565b62000f7e602083018462000ee9565b9392505050565b600060408201905062000f9c600083018562000d99565b62000fab602083018462000d99565b9392505050565b6000602082019050818103600083015262000fcd8162000e65565b9050919050565b6000604051905081810181811067ffffffffffffffff8211171562000ffe5762000ffd620010f6565b5b8060405250919050565b600067ffffffffffffffff821115620010265762001025620010f6565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006200106f8262001082565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620010b982620010a2565b9050919050565b60005b83811015620010e0578082015181840152602081019050620010c3565b83811115620010f0576000848401525b50505050565bfe5b620011038162001062565b81146200110f57600080fd5b50565b6200111d8162001076565b81146200112957600080fd5b50565b6200113781620010a2565b81146200114357600080fd5b50565b6155f180620011566000396000f3fe608060405234801561001057600080fd5b50600436106102955760003560e01c80638aff733d11610167578063d505accf116100ce578063ed24911d11610087578063ed24911d14610792578063ee99205c146107b0578063f2fde38b146107ce578063f7c618c1146107ea578063f887ea4014610808578063fdb5a03e1461082657610295565b8063d505accf146106d2578063db2e21bc146106ee578063dbd9a4d4146106f8578063dd62ed3e14610702578063dd8ce4d614610732578063eab89a5a1461076257610295565b8063b6b55f2511610120578063b6b55f2514610622578063b9e57b801461063e578063bd079f551461065c578063c4b24a461461067a578063c89039c514610698578063cff1b6ef146106b657610295565b80638aff733d1461055e5780638da5cb5b1461057c57806395d89b411461059a5780639e4e7318146105b8578063a8ae2b7c146105d6578063a9059cbb146105f257610295565b806330adf81f1161020b578063715018a6116101c4578063715018a6146104b25780637ae26773146104bc5780637d882097146104d85780637ecebe00146104f657806381837230146105265780638980f11f1461054257610295565b806330adf81f146103f0578063313ce5671461040e5780634a970be71461042c5780634ebb7916146104485780635eaec0e41461046457806370a082311461048257610295565b8063133173141161025d578063133173141461034057806318160ddd1461035e57806320606b701461037c578063236aecd51461039a57806323b872dd146103a45780632e1a7d4d146103d457610295565b806303f7d9071461029a57806306fdde03146102b657806307677111146102d4578063095ea7b3146102f25780631145180414610322575b600080fd5b6102b460048036038101906102af91906141c1565b610830565b005b6102be6108f1565b6040516102cb9190614e5c565b60405180910390f35b6102dc61098f565b6040516102e991906150fe565b60405180910390f35b61030c6004803603810190610307919061411b565b610995565b6040516103199190614cc1565b60405180910390f35b61032a6109ac565b60405161033791906150fe565b60405180910390f35b6103486109b2565b6040516103559190614cc1565b60405180910390f35b6103666109c5565b60405161037391906150fe565b60405180910390f35b6103846109cb565b6040516103919190614cdc565b60405180910390f35b6103a26109f2565b005b6103be60048036038101906103b9919061402e565b610ae0565b6040516103cb9190614cc1565b60405180910390f35b6103ee60048036038101906103e991906141c1565b610cf9565b005b6103f8610e7e565b6040516104059190614cdc565b60405180910390f35b610416610ea5565b604051610423919061521e565b60405180910390f35b61044660048036038101906104419190614262565b610eaa565b005b610462600480360381019061045d91906141c1565b610f53565b005b61046c611096565b60405161047991906150fe565b60405180910390f35b61049c60048036038101906104979190613fc9565b61109c565b6040516104a991906150fe565b60405180910390f35b6104ba6110e5565b005b6104d660048036038101906104d19190613ff2565b611222565b005b6104e0611339565b6040516104ed91906150fe565b60405180910390f35b610510600480360381019061050b9190613fc9565b61133f565b60405161051d91906150fe565b60405180910390f35b610540600480360381019061053b91906141c1565b611357565b005b61055c6004803603810190610557919061411b565b611418565b005b610566611633565b60405161057391906150fe565b60405180910390f35b610584611639565b6040516105919190614b07565b60405180910390f35b6105a2611663565b6040516105af9190614e5c565b60405180910390f35b6105c0611701565b6040516105cd9190614cdc565b60405180910390f35b6105f060048036038101906105eb91906141c1565b611728565b005b61060c6004803603810190610607919061411b565b611842565b6040516106199190614cc1565b60405180910390f35b61063c600480360381019061063791906141c1565b611859565b005b610646611865565b60405161065391906150fe565b60405180910390f35b6106646118b5565b60405161067191906150fe565b60405180910390f35b6106826118bb565b60405161068f91906150fe565b60405180910390f35b6106a0611a38565b6040516106ad9190614e26565b60405180910390f35b6106d060048036038101906106cb91906141c1565b611a5e565b005b6106ec60048036038101906106e7919061407d565b611b78565b005b6106f6611c82565b005b610700611d97565b005b61071c60048036038101906107179190613ff2565b6121dd565b60405161072991906150fe565b60405180910390f35b61074c600480360381019061074791906141c1565b612264565b60405161075991906150fe565b60405180910390f35b61077c600480360381019061077791906141c1565b6122bd565b60405161078991906150fe565b60405180910390f35b61079a612317565b6040516107a79190614cdc565b60405180910390f35b6107b86123b0565b6040516107c59190614e0b565b60405180910390f35b6107e860048036038101906107e39190613fc9565b6123d6565b005b6107f2612582565b6040516107ff9190614df0565b60405180910390f35b6108106125a8565b60405161081d9190614e41565b60405180910390f35b61082e6125ce565b005b610838612699565b73ffffffffffffffffffffffffffffffffffffffff16610856611639565b73ffffffffffffffffffffffffffffffffffffffff16146108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390614f9e565b60405180910390fd5b7fd0f7c999974ac5e720302e1a81f85f0e86835bd50d1cdd4086c839df9c123aab601354826040516108df92919061519b565b60405180910390a18060138190555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109875780601f1061095c57610100808354040283529160200191610987565b820191906000526020600020905b81548152906001019060200180831161096a57829003601f168201915b505050505081565b60115481565b60006109a23384846126a1565b6001905092915050565b60135481565b601260009054906101000a900460ff1681565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6109fa612699565b73ffffffffffffffffffffffffffffffffffffffff16610a18611639565b73ffffffffffffffffffffffffffffffffffffffff1614610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6590614f9e565b60405180910390fd5b601260009054906101000a900460ff1615601260006101000a81548160ff0219169083151502179055507fd46852adf64681b12b81a308b01efd0a546667f68ab41ae5855c2bae7756380f601260009054906101000a900460ff16604051610ad69190614cc1565b60405180910390a1565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610bc357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ce1576000610bf7856040518060600160405280602f8152602001615538602f91398461286c9092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cd791906150fe565b60405180910390a3505b610cec8686866128c7565b6001925050509392505050565b6000610d04826122bd565b90506000811115610e7a57610d1881612ae5565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d75929190614bc8565b602060405180830381600087803b158015610d8f57600080fd5b505af1158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190614198565b610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd9061509e565b60405180910390fd5b610e103383612bbc565b610e2581600754612d0a90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610e7191906150fe565b60405180910390a25b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610f119796959493929190614b59565b600060405180830381600087803b158015610f2b57600080fd5b505af1158015610f3f573d6000803e3d6000fd5b50505050610f4c85612d54565b5050505050565b610f5b612699565b73ffffffffffffffffffffffffffffffffffffffff16610f79611639565b73ffffffffffffffffffffffffffffffffffffffff1614610fcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc690614f9e565b60405180910390fd5b60008111611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990614ede565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611058573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2860008260405161108b929190614bc8565b60405180910390a150565b600e5481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110ed612699565b73ffffffffffffffffffffffffffffffffffffffff1661110b611639565b73ffffffffffffffffffffffffffffffffffffffff1614611161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115890614f9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61122a612699565b73ffffffffffffffffffffffffffffffffffffffff16611248611639565b73ffffffffffffffffffffffffffffffffffffffff161461129e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129590614f9e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff1660e01b81526004016112da929190614c6f565b602060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190614198565b61133557600080fd5b5050565b60075481565b60056020528060005260406000206000915090505481565b61135f612699565b73ffffffffffffffffffffffffffffffffffffffff1661137d611639565b73ffffffffffffffffffffffffffffffffffffffff16146113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90614f9e565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600f548260405161140692919061519b565b60405180910390a180600f8190555050565b611420612699565b73ffffffffffffffffffffffffffffffffffffffff1661143e611639565b73ffffffffffffffffffffffffffffffffffffffff1614611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b90614f9e565b60405180910390fd5b600081116114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce90614ede565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f9061503e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016115a3929190614bc8565b602060405180830381600087803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190614198565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051611627929190614c98565b60405180910390a15050565b60105481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116f95780601f106116ce576101008083540402835291602001916116f9565b820191906000526020600020905b8154815290600101906020018083116116dc57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b611730612699565b73ffffffffffffffffffffffffffffffffffffffff1661174e611639565b73ffffffffffffffffffffffffffffffffffffffff16146117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179b90614f9e565b60405180910390fd5b6127106117bc60115483612f4890919063ffffffff16565b11156117fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f4906150de565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f26010548260405161183092919061519b565b60405180910390a18060108190555050565b600061184f3384846128c7565b6001905092915050565b61186281612d54565b50565b6000806118706118bb565b9050600f5481106118ac576118a461271061189660105484612f9d90919063ffffffff16565b61300d90919063ffffffff16565b9150506118b2565b60009150505b90565b600f5481565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ca475fc600e54306040518363ffffffff1660e01b815260040161191d929190615119565b60206040518083038186803b15801561193557600080fd5b505afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d91906141ea565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119cc9190614b07565b60206040518083038186803b1580156119e457600080fd5b505afa1580156119f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c91906141ea565b9050611a318183612f4890919063ffffffff16565b9250505090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a66612699565b73ffffffffffffffffffffffffffffffffffffffff16611a84611639565b73ffffffffffffffffffffffffffffffffffffffff1614611ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad190614f9e565b60405180910390fd5b612710611af260105483612f4890919063ffffffff16565b1115611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a9061501e565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60115482604051611b6692919061519b565b60405180910390a18060118190555050565b42841015611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290614f1e565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505589604051602001611c4896959493929190614cf7565b604051602081830303815290604052805190602001209050611c6d8882868686613057565b611c788888886126a1565b5050505050505050565b611c8a612699565b73ffffffffffffffffffffffffffffffffffffffff16611ca8611639565b73ffffffffffffffffffffffffffffffffffffffff1614611cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf590614f9e565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e600e546040518263ffffffff1660e01b8152600401611d5b91906150fe565b600060405180830381600087803b158015611d7557600080fd5b505af1158015611d89573d6000803e3d6000fd5b505050506000600781905550565b611d9f612699565b73ffffffffffffffffffffffffffffffffffffffff16611dbd611639565b73ffffffffffffffffffffffffffffffffffffffff1614611e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0a90614f9e565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611eb2929190614c98565b602060405180830381600087803b158015611ecc57600080fd5b505af1158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f049190614198565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611fa4929190614c98565b602060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff69190614198565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612096929190614c98565b602060405180830381600087803b1580156120b057600080fd5b505af11580156120c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e89190614198565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612188929190614c98565b602060405180830381600087803b1580156121a257600080fd5b505af11580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121da9190614198565b50565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008061227e600754600254612f9d90919063ffffffff16565b141561228c578190506122b8565b6122b56007546122a760025485612f9d90919063ffffffff16565b61300d90919063ffffffff16565b90505b919050565b6000806122d7600754600254612f9d90919063ffffffff16565b14156122e65760009050612312565b61230f60025461230160075485612f9d90919063ffffffff16565b61300d90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161234c9190614ab9565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b61238061318e565b30604051602001612395959493929190614d58565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6123de612699565b73ffffffffffffffffffffffffffffffffffffffff166123fc611639565b73ffffffffffffffffffffffffffffffffffffffff1614612452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244990614f9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b990614e7e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461263c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126339061505e565b60405180910390fd5b60006126466118bb565b9050600f5481101561268d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268490614f3e565b60405180910390fd5b6126968161319b565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270890614fbe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612778906150be565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161285f91906150fe565b60405180910390a3505050565b60008383111582906128b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ab9190614e5c565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292e90614fde565b60405180910390fd5b6129a3816040518060600160405280602e815260200161558e602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461286c9092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a3881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f4890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612ad891906150fe565b60405180910390a3505050565b60008111612b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1f90614ede565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600e54836040518363ffffffff1660e01b8152600401612b8792919061519b565b600060405180830381600087803b158015612ba157600080fd5b505af1158015612bb5573d6000803e3d6000fd5b5050505050565b612c288160405180606001604052806027815260200161556760279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461286c9092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c9a816040518060600160405280602781526020016155116027913960025461286c9092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612cfe91906150fe565b60405180910390a35050565b6000612d4c83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061286c565b905092915050565b6002546007541015612d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d929061507e565b60405180910390fd5b601260009054906101000a900460ff1615612dd1576000612dba6118bb565b90506013548110612dcf57612dce8161319b565b5b505b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612e3093929190614b22565b602060405180830381600087803b158015612e4a57600080fd5b505af1158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e829190614198565b612ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb890614ffe565b60405180910390fd5b612eca81613516565b612edc33612ed783612264565b6135ed565b612ef181600754612f4890919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612f3d91906150fe565b60405180910390a250565b600080828401905083811015612f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8a90614e9e565b60405180910390fd5b8091505092915050565b600080831415612fb05760009050613007565b6000828402905082848281612fc157fe5b0414613002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ff990614f7e565b60405180910390fd5b809150505b92915050565b600061304f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613707565b905092915050565b6000613061612317565b85604051602001613073929190614ad0565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516130b09493929190614dab565b6020604051602081039080840390855afa1580156130d2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561314657508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b613185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317c90614ebe565b60405180910390fd5b50505050505050565b6000804690508091505090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e5460006040518363ffffffff1660e01b81526004016131fb929190615172565b600060405180830381600087803b15801561321557600080fd5b505af1158015613229573d6000803e3d6000fd5b50505050600061325861271061324a60115485612f9d90919063ffffffff16565b61300d90919063ffffffff16565b9050600081111561335957600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6132a9611639565b836040518363ffffffff1660e01b81526004016132c7929190614c98565b602060405180830381600087803b1580156132e157600080fd5b505af11580156132f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133199190614198565b613358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334f90614f5e565b60405180910390fd5b5b600061338461271061337660105486612f9d90919063ffffffff16565b61300d90919063ffffffff16565b9050600081111561347e57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016133ec929190614bc8565b602060405180830381600087803b15801561340657600080fd5b505af115801561341a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343e9190614198565b61347d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347490614efe565b60405180910390fd5b5b60006134ad6134a88361349a8688612d0a90919063ffffffff16565b612d0a90919063ffffffff16565b613768565b90506134b881613516565b6134cd81600754612f4890919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23460075460025460405161350892919061519b565b60405180910390a150505050565b60008111613559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355090614ede565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e54836040518363ffffffff1660e01b81526004016135b892919061519b565b600060405180830381600087803b1580156135d257600080fd5b505af11580156135e6573d6000803e3d6000fd5b5050505050565b61360281600254612f4890919063ffffffff16565b60028190555061365a81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f4890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516136fb91906150fe565b60405180910390a35050565b6000808311829061374e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137459190614e5c565b60405180910390fd5b50600083858161375a57fe5b049050809150509392505050565b60008061377f60028461300d90919063ffffffff16565b9050600081116137c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137bb90614ede565b60405180910390fd5b6060600267ffffffffffffffff811180156137de57600080fd5b5060405190808252806020026020018201604052801561380d5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061384057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106138aa57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000829050816001815181106138f657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061392157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613ad1576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b81526004016139a3929190615142565b60006040518083038186803b1580156139bb57600080fd5b505afa1580156139cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139f89190614157565b905080600182510381518110613a0a57fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b8152600401613a779594939291906151c4565b600060405180830381600087803b158015613a9157600080fd5b505af1158015613aa5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613ace9190614157565b50505b6060600267ffffffffffffffff81118015613aeb57600080fd5b50604051908082528060200260200182016040528015613b1a5781602001602082028036833780820191505090505b50905082600081518110613b2a57fe5b602002602001015181600081518110613b3f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110613ba957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600084905081600181518110613bf557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1682600081518110613c2057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613dd0576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b8152600401613ca2929190615142565b60006040518083038186803b158015613cba57600080fd5b505afa158015613cce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613cf79190614157565b905080600182510381518110613d0957fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b8152600401613d769594939291906151c4565b600060405180830381600087803b158015613d9057600080fd5b505af1158015613da4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613dcd9190614157565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e3370086600181518110613e1d57fe5b602002602001015185600181518110613e3257fe5b6020026020010151878660008030426040518963ffffffff1660e01b8152600401613e64989796959493929190614bf1565b606060405180830381600087803b158015613e7e57600080fd5b505af1158015613e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb69190614213565b92505050809650505050505050919050565b600081359050613ed78161549d565b92915050565b600082601f830112613eee57600080fd5b8151613f01613efc8261526a565b615239565b91508181835260208401935060208101905083856020840282011115613f2657600080fd5b60005b83811015613f565781613f3c8882613f9f565b845260208401935060208301925050600181019050613f29565b5050505092915050565b600081519050613f6f816154b4565b92915050565b600081359050613f84816154cb565b92915050565b600081359050613f99816154e2565b92915050565b600081519050613fae816154e2565b92915050565b600081359050613fc3816154f9565b92915050565b600060208284031215613fdb57600080fd5b6000613fe984828501613ec8565b91505092915050565b6000806040838503121561400557600080fd5b600061401385828601613ec8565b925050602061402485828601613ec8565b9150509250929050565b60008060006060848603121561404357600080fd5b600061405186828701613ec8565b935050602061406286828701613ec8565b925050604061407386828701613f8a565b9150509250925092565b600080600080600080600060e0888a03121561409857600080fd5b60006140a68a828b01613ec8565b97505060206140b78a828b01613ec8565b96505060406140c88a828b01613f8a565b95505060606140d98a828b01613f8a565b94505060806140ea8a828b01613fb4565b93505060a06140fb8a828b01613f75565b92505060c061410c8a828b01613f75565b91505092959891949750929550565b6000806040838503121561412e57600080fd5b600061413c85828601613ec8565b925050602061414d85828601613f8a565b9150509250929050565b60006020828403121561416957600080fd5b600082015167ffffffffffffffff81111561418357600080fd5b61418f84828501613edd565b91505092915050565b6000602082840312156141aa57600080fd5b60006141b884828501613f60565b91505092915050565b6000602082840312156141d357600080fd5b60006141e184828501613f8a565b91505092915050565b6000602082840312156141fc57600080fd5b600061420a84828501613f9f565b91505092915050565b60008060006060848603121561422857600080fd5b600061423686828701613f9f565b935050602061424786828701613f9f565b925050604061425886828701613f9f565b9150509250925092565b600080600080600060a0868803121561427a57600080fd5b600061428888828901613f8a565b955050602061429988828901613f8a565b94505060406142aa88828901613fb4565b93505060606142bb88828901613f75565b92505060806142cc88828901613f75565b9150509295509295909350565b60006142e58383614300565b60208301905092915050565b6142fa81615375565b82525050565b61430981615316565b82525050565b61431881615316565b82525050565b6000614329826152bb565b61433381856152de565b935061433e83615296565b8060005b8381101561436f57815161435688826142d9565b9750614361836152d1565b925050600181019050614342565b5085935050505092915050565b61438581615328565b82525050565b61439481615334565b82525050565b6143ab6143a682615334565b615480565b82525050565b6000815460018116600081146143ce57600181146143f357614437565b607f60028304166143df81876152ef565b955060ff1983168652808601935050614437565b6002820461440181876152ef565b955061440c856152a6565b60005b8281101561442e5781548189015260018201915060208101905061440f565b82880195505050505b505092915050565b61444881615387565b82525050565b614457816153ab565b82525050565b614466816153cf565b82525050565b614475816153f3565b82525050565b61448481615417565b82525050565b6000614495826152c6565b61449f81856152fa565b93506144af81856020860161544d565b6144b88161548c565b840191505092915050565b60006144d06026836152fa565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061453660028361530b565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000614576601b836152fa565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006145b66024836152fa565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061461c600e836152fa565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b600061465c601c836152fa565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b600061469c600f836152fa565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b60006146dc6016836152fa565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b600061471c6019836152fa565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b600061475c6021836152fa565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006147c26020836152fa565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614802601c836152fa565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b60006148426034836152fa565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b60006148a86013836152fa565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b60006148e86012836152fa565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b6000614928601c836152fa565b91507f63616e6e6f74207265636f766572206465706f73697420746f6b656e000000006000830152602082019050919050565b60006149686007836152fa565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006149a8600e836152fa565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006149e8600f836152fa565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000614a28601e836152fa565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b6000614a686018836152fa565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b614aa48161535e565b82525050565b614ab381615368565b82525050565b6000614ac582846143b1565b915081905092915050565b6000614adb82614529565b9150614ae7828561439a565b602082019150614af7828461439a565b6020820191508190509392505050565b6000602082019050614b1c600083018461430f565b92915050565b6000606082019050614b3760008301866142f1565b614b44602083018561430f565b614b516040830184614a9b565b949350505050565b600060e082019050614b6e600083018a6142f1565b614b7b602083018961430f565b614b886040830188614a9b565b614b956060830187614a9b565b614ba26080830186614aaa565b614baf60a083018561438b565b614bbc60c083018461438b565b98975050505050505050565b6000604082019050614bdd60008301856142f1565b614bea6020830184614a9b565b9392505050565b600061010082019050614c07600083018b61430f565b614c14602083018a61430f565b614c216040830189614a9b565b614c2e6060830188614a9b565b614c3b608083018761447b565b614c4860a083018661447b565b614c5560c083018561430f565b614c6260e0830184614a9b565b9998505050505050505050565b6000604082019050614c84600083018561430f565b614c91602083018461447b565b9392505050565b6000604082019050614cad600083018561430f565b614cba6020830184614a9b565b9392505050565b6000602082019050614cd6600083018461437c565b92915050565b6000602082019050614cf1600083018461438b565b92915050565b600060c082019050614d0c600083018961438b565b614d19602083018861430f565b614d26604083018761430f565b614d336060830186614a9b565b614d406080830185614a9b565b614d4d60a0830184614a9b565b979650505050505050565b600060a082019050614d6d600083018861438b565b614d7a602083018761438b565b614d87604083018661438b565b614d946060830185614a9b565b614da1608083018461430f565b9695505050505050565b6000608082019050614dc0600083018761438b565b614dcd6020830186614aaa565b614dda604083018561438b565b614de7606083018461438b565b95945050505050565b6000602082019050614e05600083018461443f565b92915050565b6000602082019050614e20600083018461444e565b92915050565b6000602082019050614e3b600083018461445d565b92915050565b6000602082019050614e56600083018461446c565b92915050565b60006020820190508181036000830152614e76818461448a565b905092915050565b60006020820190508181036000830152614e97816144c3565b9050919050565b60006020820190508181036000830152614eb781614569565b9050919050565b60006020820190508181036000830152614ed7816145a9565b9050919050565b60006020820190508181036000830152614ef78161460f565b9050919050565b60006020820190508181036000830152614f178161464f565b9050919050565b60006020820190508181036000830152614f378161468f565b9050919050565b60006020820190508181036000830152614f57816146cf565b9050919050565b60006020820190508181036000830152614f778161470f565b9050919050565b60006020820190508181036000830152614f978161474f565b9050919050565b60006020820190508181036000830152614fb7816147b5565b9050919050565b60006020820190508181036000830152614fd7816147f5565b9050919050565b60006020820190508181036000830152614ff781614835565b9050919050565b600060208201905081810360008301526150178161489b565b9050919050565b60006020820190508181036000830152615037816148db565b9050919050565b600060208201905081810360008301526150578161491b565b9050919050565b600060208201905081810360008301526150778161495b565b9050919050565b600060208201905081810360008301526150978161499b565b9050919050565b600060208201905081810360008301526150b7816149db565b9050919050565b600060208201905081810360008301526150d781614a1b565b9050919050565b600060208201905081810360008301526150f781614a5b565b9050919050565b60006020820190506151136000830184614a9b565b92915050565b600060408201905061512e6000830185614a9b565b61513b602083018461430f565b9392505050565b60006040820190506151576000830185614a9b565b8181036020830152615169818461431e565b90509392505050565b60006040820190506151876000830185614a9b565b615194602083018461447b565b9392505050565b60006040820190506151b06000830185614a9b565b6151bd6020830184614a9b565b9392505050565b600060a0820190506151d96000830188614a9b565b6151e66020830187614a9b565b81810360408301526151f8818661431e565b9050615207606083018561430f565b6152146080830184614a9b565b9695505050505050565b60006020820190506152336000830184614aaa565b92915050565b6000604051905081810181811067ffffffffffffffff821117156152605761525f61548a565b5b8060405250919050565b600067ffffffffffffffff8211156152855761528461548a565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006153218261533e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061538082615429565b9050919050565b600061539282615399565b9050919050565b60006153a48261533e565b9050919050565b60006153b6826153bd565b9050919050565b60006153c88261533e565b9050919050565b60006153da826153e1565b9050919050565b60006153ec8261533e565b9050919050565b60006153fe82615405565b9050919050565b60006154108261533e565b9050919050565b60006154228261535e565b9050919050565b60006154348261543b565b9050919050565b60006154468261533e565b9050919050565b60005b8381101561546b578082015181840152602081019050615450565b8381111561547a576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b6154a681615316565b81146154b157600080fd5b50565b6154bd81615328565b81146154c857600080fd5b50565b6154d481615334565b81146154df57600080fd5b50565b6154eb8161535e565b81146154f657600080fd5b50565b61550281615368565b811461550d57600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220071bb73077a3b645e507307aabd5f608b0f529f378f26a159cc69834ecfa4c3864736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102955760003560e01c80638aff733d11610167578063d505accf116100ce578063ed24911d11610087578063ed24911d14610792578063ee99205c146107b0578063f2fde38b146107ce578063f7c618c1146107ea578063f887ea4014610808578063fdb5a03e1461082657610295565b8063d505accf146106d2578063db2e21bc146106ee578063dbd9a4d4146106f8578063dd62ed3e14610702578063dd8ce4d614610732578063eab89a5a1461076257610295565b8063b6b55f2511610120578063b6b55f2514610622578063b9e57b801461063e578063bd079f551461065c578063c4b24a461461067a578063c89039c514610698578063cff1b6ef146106b657610295565b80638aff733d1461055e5780638da5cb5b1461057c57806395d89b411461059a5780639e4e7318146105b8578063a8ae2b7c146105d6578063a9059cbb146105f257610295565b806330adf81f1161020b578063715018a6116101c4578063715018a6146104b25780637ae26773146104bc5780637d882097146104d85780637ecebe00146104f657806381837230146105265780638980f11f1461054257610295565b806330adf81f146103f0578063313ce5671461040e5780634a970be71461042c5780634ebb7916146104485780635eaec0e41461046457806370a082311461048257610295565b8063133173141161025d578063133173141461034057806318160ddd1461035e57806320606b701461037c578063236aecd51461039a57806323b872dd146103a45780632e1a7d4d146103d457610295565b806303f7d9071461029a57806306fdde03146102b657806307677111146102d4578063095ea7b3146102f25780631145180414610322575b600080fd5b6102b460048036038101906102af91906141c1565b610830565b005b6102be6108f1565b6040516102cb9190614e5c565b60405180910390f35b6102dc61098f565b6040516102e991906150fe565b60405180910390f35b61030c6004803603810190610307919061411b565b610995565b6040516103199190614cc1565b60405180910390f35b61032a6109ac565b60405161033791906150fe565b60405180910390f35b6103486109b2565b6040516103559190614cc1565b60405180910390f35b6103666109c5565b60405161037391906150fe565b60405180910390f35b6103846109cb565b6040516103919190614cdc565b60405180910390f35b6103a26109f2565b005b6103be60048036038101906103b9919061402e565b610ae0565b6040516103cb9190614cc1565b60405180910390f35b6103ee60048036038101906103e991906141c1565b610cf9565b005b6103f8610e7e565b6040516104059190614cdc565b60405180910390f35b610416610ea5565b604051610423919061521e565b60405180910390f35b61044660048036038101906104419190614262565b610eaa565b005b610462600480360381019061045d91906141c1565b610f53565b005b61046c611096565b60405161047991906150fe565b60405180910390f35b61049c60048036038101906104979190613fc9565b61109c565b6040516104a991906150fe565b60405180910390f35b6104ba6110e5565b005b6104d660048036038101906104d19190613ff2565b611222565b005b6104e0611339565b6040516104ed91906150fe565b60405180910390f35b610510600480360381019061050b9190613fc9565b61133f565b60405161051d91906150fe565b60405180910390f35b610540600480360381019061053b91906141c1565b611357565b005b61055c6004803603810190610557919061411b565b611418565b005b610566611633565b60405161057391906150fe565b60405180910390f35b610584611639565b6040516105919190614b07565b60405180910390f35b6105a2611663565b6040516105af9190614e5c565b60405180910390f35b6105c0611701565b6040516105cd9190614cdc565b60405180910390f35b6105f060048036038101906105eb91906141c1565b611728565b005b61060c6004803603810190610607919061411b565b611842565b6040516106199190614cc1565b60405180910390f35b61063c600480360381019061063791906141c1565b611859565b005b610646611865565b60405161065391906150fe565b60405180910390f35b6106646118b5565b60405161067191906150fe565b60405180910390f35b6106826118bb565b60405161068f91906150fe565b60405180910390f35b6106a0611a38565b6040516106ad9190614e26565b60405180910390f35b6106d060048036038101906106cb91906141c1565b611a5e565b005b6106ec60048036038101906106e7919061407d565b611b78565b005b6106f6611c82565b005b610700611d97565b005b61071c60048036038101906107179190613ff2565b6121dd565b60405161072991906150fe565b60405180910390f35b61074c600480360381019061074791906141c1565b612264565b60405161075991906150fe565b60405180910390f35b61077c600480360381019061077791906141c1565b6122bd565b60405161078991906150fe565b60405180910390f35b61079a612317565b6040516107a79190614cdc565b60405180910390f35b6107b86123b0565b6040516107c59190614e0b565b60405180910390f35b6107e860048036038101906107e39190613fc9565b6123d6565b005b6107f2612582565b6040516107ff9190614df0565b60405180910390f35b6108106125a8565b60405161081d9190614e41565b60405180910390f35b61082e6125ce565b005b610838612699565b73ffffffffffffffffffffffffffffffffffffffff16610856611639565b73ffffffffffffffffffffffffffffffffffffffff16146108ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a390614f9e565b60405180910390fd5b7fd0f7c999974ac5e720302e1a81f85f0e86835bd50d1cdd4086c839df9c123aab601354826040516108df92919061519b565b60405180910390a18060138190555050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109875780601f1061095c57610100808354040283529160200191610987565b820191906000526020600020905b81548152906001019060200180831161096a57829003601f168201915b505050505081565b60115481565b60006109a23384846126a1565b6001905092915050565b60135481565b601260009054906101000a900460ff1681565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b81565b6109fa612699565b73ffffffffffffffffffffffffffffffffffffffff16610a18611639565b73ffffffffffffffffffffffffffffffffffffffff1614610a6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6590614f9e565b60405180910390fd5b601260009054906101000a900460ff1615601260006101000a81548160ff0219169083151502179055507fd46852adf64681b12b81a308b01efd0a546667f68ab41ae5855c2bae7756380f601260009054906101000a900460ff16604051610ad69190614cc1565b60405180910390a1565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610bc357507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114155b15610ce1576000610bf7856040518060600160405280602f8152602001615538602f91398461286c9092919063ffffffff16565b905080600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610cd791906150fe565b60405180910390a3505b610cec8686866128c7565b6001925050509392505050565b6000610d04826122bd565b90506000811115610e7a57610d1881612ae5565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d75929190614bc8565b602060405180830381600087803b158015610d8f57600080fd5b505af1158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190614198565b610e06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dfd9061509e565b60405180910390fd5b610e103383612bbc565b610e2581600754612d0a90919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a942436482604051610e7191906150fe565b60405180910390a25b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b81565b601281565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf333088888888886040518863ffffffff1660e01b8152600401610f119796959493929190614b59565b600060405180830381600087803b158015610f2b57600080fd5b505af1158015610f3f573d6000803e3d6000fd5b50505050610f4c85612d54565b5050505050565b610f5b612699565b73ffffffffffffffffffffffffffffffffffffffff16610f79611639565b73ffffffffffffffffffffffffffffffffffffffff1614610fcf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fc690614f9e565b60405180910390fd5b60008111611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990614ede565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611058573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa2860008260405161108b929190614bc8565b60405180910390a150565b600e5481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6110ed612699565b73ffffffffffffffffffffffffffffffffffffffff1661110b611639565b73ffffffffffffffffffffffffffffffffffffffff1614611161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115890614f9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b61122a612699565b73ffffffffffffffffffffffffffffffffffffffff16611248611639565b73ffffffffffffffffffffffffffffffffffffffff161461129e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129590614f9e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff1660e01b81526004016112da929190614c6f565b602060405180830381600087803b1580156112f457600080fd5b505af1158015611308573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132c9190614198565b61133557600080fd5b5050565b60075481565b60056020528060005260406000206000915090505481565b61135f612699565b73ffffffffffffffffffffffffffffffffffffffff1661137d611639565b73ffffffffffffffffffffffffffffffffffffffff16146113d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ca90614f9e565b60405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600f548260405161140692919061519b565b60405180910390a180600f8190555050565b611420612699565b73ffffffffffffffffffffffffffffffffffffffff1661143e611639565b73ffffffffffffffffffffffffffffffffffffffff1614611494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148b90614f9e565b60405180910390fd5b600081116114d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ce90614ede565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f9061503e565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016115a3929190614bc8565b602060405180830381600087803b1580156115bd57600080fd5b505af11580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f59190614198565b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051611627929190614c98565b60405180910390a15050565b60105481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116f95780601f106116ce576101008083540402835291602001916116f9565b820191906000526020600020905b8154815290600101906020018083116116dc57829003601f168201915b505050505081565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b81565b611730612699565b73ffffffffffffffffffffffffffffffffffffffff1661174e611639565b73ffffffffffffffffffffffffffffffffffffffff16146117a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179b90614f9e565b60405180910390fd5b6127106117bc60115483612f4890919063ffffffff16565b11156117fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f4906150de565b60405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f26010548260405161183092919061519b565b60405180910390a18060108190555050565b600061184f3384846128c7565b6001905092915050565b61186281612d54565b50565b6000806118706118bb565b9050600f5481106118ac576118a461271061189660105484612f9d90919063ffffffff16565b61300d90919063ffffffff16565b9150506118b2565b60009150505b90565b600f5481565b600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630ca475fc600e54306040518363ffffffff1660e01b815260040161191d929190615119565b60206040518083038186803b15801561193557600080fd5b505afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d91906141ea565b90506000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119cc9190614b07565b60206040518083038186803b1580156119e457600080fd5b505afa1580156119f8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1c91906141ea565b9050611a318183612f4890919063ffffffff16565b9250505090565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611a66612699565b73ffffffffffffffffffffffffffffffffffffffff16611a84611639565b73ffffffffffffffffffffffffffffffffffffffff1614611ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad190614f9e565b60405180910390fd5b612710611af260105483612f4890919063ffffffff16565b1115611b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2a9061501e565b60405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60115482604051611b6692919061519b565b60405180910390a18060118190555050565b42841015611bbb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb290614f1e565b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960001b888888600560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505589604051602001611c4896959493929190614cf7565b604051602081830303815290604052805190602001209050611c6d8882868686613057565b611c788888886126a1565b5050505050505050565b611c8a612699565b73ffffffffffffffffffffffffffffffffffffffff16611ca8611639565b73ffffffffffffffffffffffffffffffffffffffff1614611cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf590614f9e565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e600e546040518263ffffffff1660e01b8152600401611d5b91906150fe565b600060405180830381600087803b158015611d7557600080fd5b505af1158015611d89573d6000803e3d6000fd5b505050506000600781905550565b611d9f612699565b73ffffffffffffffffffffffffffffffffffffffff16611dbd611639565b73ffffffffffffffffffffffffffffffffffffffff1614611e13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e0a90614f9e565b60405180910390fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611eb2929190614c98565b602060405180830381600087803b158015611ecc57600080fd5b505af1158015611ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f049190614198565b50600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401611fa4929190614c98565b602060405180830381600087803b158015611fbe57600080fd5b505af1158015611fd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff69190614198565b50600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612096929190614c98565b602060405180830381600087803b1580156120b057600080fd5b505af11580156120c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e89190614198565b50600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401612188929190614c98565b602060405180830381600087803b1580156121a257600080fd5b505af11580156121b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121da9190614198565b50565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008061227e600754600254612f9d90919063ffffffff16565b141561228c578190506122b8565b6122b56007546122a760025485612f9d90919063ffffffff16565b61300d90919063ffffffff16565b90505b919050565b6000806122d7600754600254612f9d90919063ffffffff16565b14156122e65760009050612312565b61230f60025461230160075485612f9d90919063ffffffff16565b61300d90919063ffffffff16565b90505b919050565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161234c9190614ab9565b60405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b61238061318e565b30604051602001612395959493929190614d58565b60405160208183030381529060405280519060200120905090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6123de612699565b73ffffffffffffffffffffffffffffffffffffffff166123fc611639565b73ffffffffffffffffffffffffffffffffffffffff1614612452576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161244990614f9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b990614e7e565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff161461263c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126339061505e565b60405180910390fd5b60006126466118bb565b9050600f5481101561268d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268490614f3e565b60405180910390fd5b6126968161319b565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612711576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161270890614fbe565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612781576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612778906150be565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161285f91906150fe565b60405180910390a3505050565b60008383111582906128b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ab9190614e5c565b60405180910390fd5b5060008385039050809150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292e90614fde565b60405180910390fd5b6129a3816040518060600160405280602e815260200161558e602e9139600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461286c9092919063ffffffff16565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612a3881600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f4890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612ad891906150fe565b60405180910390a3505050565b60008111612b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1f90614ede565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600e54836040518363ffffffff1660e01b8152600401612b8792919061519b565b600060405180830381600087803b158015612ba157600080fd5b505af1158015612bb5573d6000803e3d6000fd5b5050505050565b612c288160405180606001604052806027815260200161556760279139600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461286c9092919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c9a816040518060600160405280602781526020016155116027913960025461286c9092919063ffffffff16565b600281905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612cfe91906150fe565b60405180910390a35050565b6000612d4c83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061286c565b905092915050565b6002546007541015612d9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d929061507e565b60405180910390fd5b601260009054906101000a900460ff1615612dd1576000612dba6118bb565b90506013548110612dcf57612dce8161319b565b5b505b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401612e3093929190614b22565b602060405180830381600087803b158015612e4a57600080fd5b505af1158015612e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e829190614198565b612ec1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612eb890614ffe565b60405180910390fd5b612eca81613516565b612edc33612ed783612264565b6135ed565b612ef181600754612f4890919063ffffffff16565b6007819055503373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c82604051612f3d91906150fe565b60405180910390a250565b600080828401905083811015612f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8a90614e9e565b60405180910390fd5b8091505092915050565b600080831415612fb05760009050613007565b6000828402905082848281612fc157fe5b0414613002576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ff990614f7e565b60405180910390fd5b809150505b92915050565b600061304f83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613707565b905092915050565b6000613061612317565b85604051602001613073929190614ad0565b6040516020818303038152906040528051906020012090506000600182868686604051600081526020016040526040516130b09493929190614dab565b6020604051602081039080840390855afa1580156130d2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561314657508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b613185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161317c90614ebe565b60405180910390fd5b50505050505050565b6000804690508091505090565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e5460006040518363ffffffff1660e01b81526004016131fb929190615172565b600060405180830381600087803b15801561321557600080fd5b505af1158015613229573d6000803e3d6000fd5b50505050600061325861271061324a60115485612f9d90919063ffffffff16565b61300d90919063ffffffff16565b9050600081111561335957600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6132a9611639565b836040518363ffffffff1660e01b81526004016132c7929190614c98565b602060405180830381600087803b1580156132e157600080fd5b505af11580156132f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133199190614198565b613358576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334f90614f5e565b60405180910390fd5b5b600061338461271061337660105486612f9d90919063ffffffff16565b61300d90919063ffffffff16565b9050600081111561347e57600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016133ec929190614bc8565b602060405180830381600087803b15801561340657600080fd5b505af115801561341a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061343e9190614198565b61347d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161347490614efe565b60405180910390fd5b5b60006134ad6134a88361349a8688612d0a90919063ffffffff16565b612d0a90919063ffffffff16565b613768565b90506134b881613516565b6134cd81600754612f4890919063ffffffff16565b6007819055507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23460075460025460405161350892919061519b565b60405180910390a150505050565b60008111613559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355090614ede565b60405180910390fd5b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600e54836040518363ffffffff1660e01b81526004016135b892919061519b565b600060405180830381600087803b1580156135d257600080fd5b505af11580156135e6573d6000803e3d6000fd5b5050505050565b61360281600254612f4890919063ffffffff16565b60028190555061365a81600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612f4890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516136fb91906150fe565b60405180910390a35050565b6000808311829061374e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137459190614e5c565b60405180910390fd5b50600083858161375a57fe5b049050809150509392505050565b60008061377f60028461300d90919063ffffffff16565b9050600081116137c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137bb90614ede565b60405180910390fd5b6060600267ffffffffffffffff811180156137de57600080fd5b5060405190808252806020026020018201604052801561380d5781602001602082028036833780820191505090505b509050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160008151811061384057fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16816001815181106138aa57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000829050816001815181106138f657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061392157fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613ad1576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85856040518363ffffffff1660e01b81526004016139a3929190615142565b60006040518083038186803b1580156139bb57600080fd5b505afa1580156139cf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906139f89190614157565b905080600182510381518110613a0a57fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173985848630426040518663ffffffff1660e01b8152600401613a779594939291906151c4565b600060405180830381600087803b158015613a9157600080fd5b505af1158015613aa5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613ace9190614157565b50505b6060600267ffffffffffffffff81118015613aeb57600080fd5b50604051908082528060200260200182016040528015613b1a5781602001602082028036833780820191505090505b50905082600081518110613b2a57fe5b602002602001015181600081518110613b3f57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600181518110613ba957fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600084905081600181518110613bf557fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1682600081518110613c2057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614613dd0576060600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f87856040518363ffffffff1660e01b8152600401613ca2929190615142565b60006040518083038186803b158015613cba57600080fd5b505afa158015613cce573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613cf79190614157565b905080600182510381518110613d0957fe5b60200260200101519150600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173987848630426040518663ffffffff1660e01b8152600401613d769594939291906151c4565b600060405180830381600087803b158015613d9057600080fd5b505af1158015613da4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190613dcd9190614157565b50505b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e3370086600181518110613e1d57fe5b602002602001015185600181518110613e3257fe5b6020026020010151878660008030426040518963ffffffff1660e01b8152600401613e64989796959493929190614bf1565b606060405180830381600087803b158015613e7e57600080fd5b505af1158015613e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb69190614213565b92505050809650505050505050919050565b600081359050613ed78161549d565b92915050565b600082601f830112613eee57600080fd5b8151613f01613efc8261526a565b615239565b91508181835260208401935060208101905083856020840282011115613f2657600080fd5b60005b83811015613f565781613f3c8882613f9f565b845260208401935060208301925050600181019050613f29565b5050505092915050565b600081519050613f6f816154b4565b92915050565b600081359050613f84816154cb565b92915050565b600081359050613f99816154e2565b92915050565b600081519050613fae816154e2565b92915050565b600081359050613fc3816154f9565b92915050565b600060208284031215613fdb57600080fd5b6000613fe984828501613ec8565b91505092915050565b6000806040838503121561400557600080fd5b600061401385828601613ec8565b925050602061402485828601613ec8565b9150509250929050565b60008060006060848603121561404357600080fd5b600061405186828701613ec8565b935050602061406286828701613ec8565b925050604061407386828701613f8a565b9150509250925092565b600080600080600080600060e0888a03121561409857600080fd5b60006140a68a828b01613ec8565b97505060206140b78a828b01613ec8565b96505060406140c88a828b01613f8a565b95505060606140d98a828b01613f8a565b94505060806140ea8a828b01613fb4565b93505060a06140fb8a828b01613f75565b92505060c061410c8a828b01613f75565b91505092959891949750929550565b6000806040838503121561412e57600080fd5b600061413c85828601613ec8565b925050602061414d85828601613f8a565b9150509250929050565b60006020828403121561416957600080fd5b600082015167ffffffffffffffff81111561418357600080fd5b61418f84828501613edd565b91505092915050565b6000602082840312156141aa57600080fd5b60006141b884828501613f60565b91505092915050565b6000602082840312156141d357600080fd5b60006141e184828501613f8a565b91505092915050565b6000602082840312156141fc57600080fd5b600061420a84828501613f9f565b91505092915050565b60008060006060848603121561422857600080fd5b600061423686828701613f9f565b935050602061424786828701613f9f565b925050604061425886828701613f9f565b9150509250925092565b600080600080600060a0868803121561427a57600080fd5b600061428888828901613f8a565b955050602061429988828901613f8a565b94505060406142aa88828901613fb4565b93505060606142bb88828901613f75565b92505060806142cc88828901613f75565b9150509295509295909350565b60006142e58383614300565b60208301905092915050565b6142fa81615375565b82525050565b61430981615316565b82525050565b61431881615316565b82525050565b6000614329826152bb565b61433381856152de565b935061433e83615296565b8060005b8381101561436f57815161435688826142d9565b9750614361836152d1565b925050600181019050614342565b5085935050505092915050565b61438581615328565b82525050565b61439481615334565b82525050565b6143ab6143a682615334565b615480565b82525050565b6000815460018116600081146143ce57600181146143f357614437565b607f60028304166143df81876152ef565b955060ff1983168652808601935050614437565b6002820461440181876152ef565b955061440c856152a6565b60005b8281101561442e5781548189015260018201915060208101905061440f565b82880195505050505b505092915050565b61444881615387565b82525050565b614457816153ab565b82525050565b614466816153cf565b82525050565b614475816153f3565b82525050565b61448481615417565b82525050565b6000614495826152c6565b61449f81856152fa565b93506144af81856020860161544d565b6144b88161548c565b840191505092915050565b60006144d06026836152fa565b91507f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008301527f64647265737300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061453660028361530b565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000614576601b836152fa565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006145b66024836152fa565b91507f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160008301527f74757265000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061461c600e836152fa565b91507f616d6f756e7420746f6f206c6f770000000000000000000000000000000000006000830152602082019050919050565b600061465c601c836152fa565b91507f7265696e7665737420666565207472616e73666572206661696c6564000000006000830152602082019050919050565b600061469c600f836152fa565b91507f7065726d69743a3a6578706972656400000000000000000000000000000000006000830152602082019050919050565b60006146dc6016836152fa565b91507f4d494e5f544f4b454e535f544f5f5245494e56455354000000000000000000006000830152602082019050919050565b600061471c6019836152fa565b91507f61646d696e20666565207472616e73666572206661696c6564000000000000006000830152602082019050919050565b600061475c6021836152fa565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006147c26020836152fa565b91507f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726000830152602082019050919050565b6000614802601c836152fa565b91507f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006000830152602082019050919050565b60006148426034836152fa565b91507f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260008301527f20746f20746865207a65726f20616464726573730000000000000000000000006020830152604082019050919050565b60006148a86013836152fa565b91507f7472616e7366657246726f6d206661696c6564000000000000000000000000006000830152602082019050919050565b60006148e86012836152fa565b91507f61646d696e2066656520746f6f206869676800000000000000000000000000006000830152602082019050919050565b6000614928601c836152fa565b91507f63616e6e6f74207265636f766572206465706f73697420746f6b656e000000006000830152602082019050919050565b60006149686007836152fa565b91507f6f6e6c79454f41000000000000000000000000000000000000000000000000006000830152602082019050919050565b60006149a8600e836152fa565b91507f6465706f736974206661696c65640000000000000000000000000000000000006000830152602082019050919050565b60006149e8600f836152fa565b91507f7472616e73666572206661696c656400000000000000000000000000000000006000830152602082019050919050565b6000614a28601e836152fa565b91507f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006000830152602082019050919050565b6000614a686018836152fa565b91507f7265696e766573742072657761726420746f6f206869676800000000000000006000830152602082019050919050565b614aa48161535e565b82525050565b614ab381615368565b82525050565b6000614ac582846143b1565b915081905092915050565b6000614adb82614529565b9150614ae7828561439a565b602082019150614af7828461439a565b6020820191508190509392505050565b6000602082019050614b1c600083018461430f565b92915050565b6000606082019050614b3760008301866142f1565b614b44602083018561430f565b614b516040830184614a9b565b949350505050565b600060e082019050614b6e600083018a6142f1565b614b7b602083018961430f565b614b886040830188614a9b565b614b956060830187614a9b565b614ba26080830186614aaa565b614baf60a083018561438b565b614bbc60c083018461438b565b98975050505050505050565b6000604082019050614bdd60008301856142f1565b614bea6020830184614a9b565b9392505050565b600061010082019050614c07600083018b61430f565b614c14602083018a61430f565b614c216040830189614a9b565b614c2e6060830188614a9b565b614c3b608083018761447b565b614c4860a083018661447b565b614c5560c083018561430f565b614c6260e0830184614a9b565b9998505050505050505050565b6000604082019050614c84600083018561430f565b614c91602083018461447b565b9392505050565b6000604082019050614cad600083018561430f565b614cba6020830184614a9b565b9392505050565b6000602082019050614cd6600083018461437c565b92915050565b6000602082019050614cf1600083018461438b565b92915050565b600060c082019050614d0c600083018961438b565b614d19602083018861430f565b614d26604083018761430f565b614d336060830186614a9b565b614d406080830185614a9b565b614d4d60a0830184614a9b565b979650505050505050565b600060a082019050614d6d600083018861438b565b614d7a602083018761438b565b614d87604083018661438b565b614d946060830185614a9b565b614da1608083018461430f565b9695505050505050565b6000608082019050614dc0600083018761438b565b614dcd6020830186614aaa565b614dda604083018561438b565b614de7606083018461438b565b95945050505050565b6000602082019050614e05600083018461443f565b92915050565b6000602082019050614e20600083018461444e565b92915050565b6000602082019050614e3b600083018461445d565b92915050565b6000602082019050614e56600083018461446c565b92915050565b60006020820190508181036000830152614e76818461448a565b905092915050565b60006020820190508181036000830152614e97816144c3565b9050919050565b60006020820190508181036000830152614eb781614569565b9050919050565b60006020820190508181036000830152614ed7816145a9565b9050919050565b60006020820190508181036000830152614ef78161460f565b9050919050565b60006020820190508181036000830152614f178161464f565b9050919050565b60006020820190508181036000830152614f378161468f565b9050919050565b60006020820190508181036000830152614f57816146cf565b9050919050565b60006020820190508181036000830152614f778161470f565b9050919050565b60006020820190508181036000830152614f978161474f565b9050919050565b60006020820190508181036000830152614fb7816147b5565b9050919050565b60006020820190508181036000830152614fd7816147f5565b9050919050565b60006020820190508181036000830152614ff781614835565b9050919050565b600060208201905081810360008301526150178161489b565b9050919050565b60006020820190508181036000830152615037816148db565b9050919050565b600060208201905081810360008301526150578161491b565b9050919050565b600060208201905081810360008301526150778161495b565b9050919050565b600060208201905081810360008301526150978161499b565b9050919050565b600060208201905081810360008301526150b7816149db565b9050919050565b600060208201905081810360008301526150d781614a1b565b9050919050565b600060208201905081810360008301526150f781614a5b565b9050919050565b60006020820190506151136000830184614a9b565b92915050565b600060408201905061512e6000830185614a9b565b61513b602083018461430f565b9392505050565b60006040820190506151576000830185614a9b565b8181036020830152615169818461431e565b90509392505050565b60006040820190506151876000830185614a9b565b615194602083018461447b565b9392505050565b60006040820190506151b06000830185614a9b565b6151bd6020830184614a9b565b9392505050565b600060a0820190506151d96000830188614a9b565b6151e66020830187614a9b565b81810360408301526151f8818661431e565b9050615207606083018561430f565b6152146080830184614a9b565b9695505050505050565b60006020820190506152336000830184614aaa565b92915050565b6000604051905081810181811067ffffffffffffffff821117156152605761525f61548a565b5b8060405250919050565b600067ffffffffffffffff8211156152855761528461548a565b5b602082029050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006153218261533e565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600061538082615429565b9050919050565b600061539282615399565b9050919050565b60006153a48261533e565b9050919050565b60006153b6826153bd565b9050919050565b60006153c88261533e565b9050919050565b60006153da826153e1565b9050919050565b60006153ec8261533e565b9050919050565b60006153fe82615405565b9050919050565b60006154108261533e565b9050919050565b60006154228261535e565b9050919050565b60006154348261543b565b9050919050565b60006154468261533e565b9050919050565b60005b8381101561546b578082015181840152602081019050615450565b8381111561547a576000848401525b50505050565b6000819050919050565bfe5b6000601f19601f8301169050919050565b6154a681615316565b81146154b157600080fd5b50565b6154bd81615328565b81146154c857600080fd5b50565b6154d481615334565b81146154df57600080fd5b50565b6154eb8161535e565b81146154f657600080fd5b50565b61550281615368565b811461550d57600080fd5b5056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220071bb73077a3b645e507307aabd5f608b0f529f378f26a159cc69834ecfa4c3864736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "details": "Staking rewards accurue to contract on each deposit/withdrawal",
        "returns": {
          "_0": "Unclaimed rewards, plus contract balance"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "emergencyWithdraw()": {
        "details": "Reward tokens are not automatically collectedNew deposits will be effectively disabled"
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "reinvest()": {
        "details": "This external function requires minimum tokens to be met"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "revokeAllowance(address,address)": {
        "details": "Restricted to avoid griefing attacks",
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Restricted to avoid griefing attacks"
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateMinTokensToReinvestBeforeDeposit(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateReinvestReward(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of receipt tokens to redeem"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_TYPEHASH()": {
        "notice": "keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");"
      },
      "VERSION_HASH()": {
        "notice": "keccak256(\"1\");"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward token balance that can be reinvested"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "emergencyWithdraw()": {
        "notice": "Allows exit from Staking Contract without additional logic"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest rewards from staking contract to deposit tokens"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest minimum threshold for external callers"
      },
      "updateMinTokensToReinvestBeforeDeposit(uint256)": {
        "notice": "Update reinvest minimum threshold before a deposit"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "updateRequireReinvestBeforeDeposit()": {
        "notice": "Toggle requirement to reinvest before deposit"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw LP tokens by redeeming receipt tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1139,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1142,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1147,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1153,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1157,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1173,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2310,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 18,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "totalDeposits",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "router",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRouter)2279"
      },
      {
        "astId": 22,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IPair)1899"
      },
      {
        "astId": 24,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "token0",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)1749"
      },
      {
        "astId": 26,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "token1",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)1749"
      },
      {
        "astId": 28,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "rewardToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)1749"
      },
      {
        "astId": 30,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "stakingContract",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IOliveChef)1883"
      },
      {
        "astId": 32,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "PID",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 35,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 38,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 41,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 53,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "REQUIRE_REINVEST_BEFORE_DEPOSIT",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 56,
        "contract": "contracts/OliveStrategyForLP.sol:OliveStrategyForLP",
        "label": "MIN_TOKENS_TO_REINVEST_BEFORE_DEPOSIT",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1749": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOliveChef)1883": {
        "encoding": "inplace",
        "label": "contract IOliveChef",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)1899": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)2279": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}