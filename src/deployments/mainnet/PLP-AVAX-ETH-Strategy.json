{
  "address": "0xE8F4423a2ab1Bf71712Cc5dE8fBad4cAa42B101C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeCollector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract IRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingContract",
      "outputs": [
        {
          "internalType": "contract IBambooChef",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xE8F4423a2ab1Bf71712Cc5dE8fBad4cAa42B101C",
    "transactionIndex": 0,
    "gasUsed": "3745027",
    "logsBloom": "0x
    "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101",
    "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 981766,
        "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
        "address": "0x083E14c8C0E122E374E4c6fF2169D8DB7e6728BE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8f4423a2ab1bf71712cc5de8fbad4caa42b101c",
          "0x000000000000000000000000d335117acc6bf8b829fa0687776fe99b3888fbfd"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 981766,
        "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
        "address": "0x083E14c8C0E122E374E4c6fF2169D8DB7e6728BE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8f4423a2ab1bf71712cc5de8fbad4caa42b101c",
          "0x000000000000000000000000124737ce6a43a98caaf095accb9a9d6fccbb0e73"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 981766,
        "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
        "address": "0x083E14c8C0E122E374E4c6fF2169D8DB7e6728BE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8f4423a2ab1bf71712cc5de8fbad4caa42b101c",
          "0x00000000000000000000000067c58c8f01f50589a52c2c0b233db9af6a66a0f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 981766,
        "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
        "address": "0x9a928D7dcD8D7E5Cb6860B7768eC2D87B8934267",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8f4423a2ab1bf71712cc5de8fbad4caa42b101c",
          "0x00000000000000000000000067c58c8f01f50589a52c2c0b233db9af6a66a0f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 981766,
        "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
        "address": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8f4423a2ab1bf71712cc5de8fbad4caa42b101c",
          "0x00000000000000000000000067c58c8f01f50589a52c2c0b233db9af6a66a0f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 981766,
        "transactionHash": "0x5fceb7ce08244d63ec150b924165ad54972db8016cf83d69fc6f7b2c1bb4d2fd",
        "address": "0xf20d962a6c8f70c731bd838a3a388D7d48fA6e15",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e8f4423a2ab1bf71712cc5de8fbad4caa42b101c",
          "0x00000000000000000000000067c58c8f01f50589a52c2c0b233db9af6a66a0f0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0xb700c505ba688e0099cff0bb8e8d0404fc269f02709f82da08e931d617c76101"
      }
    ],
    "blockNumber": 981766,
    "cumulativeGasUsed": "3745027",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BambooLPWithReinvestFee",
    "0xd335117acC6BF8B829Fa0687776FE99B3888fbFD",
    "0x083E14c8C0E122E374E4c6fF2169D8DB7e6728BE",
    "0x9a928D7dcD8D7E5Cb6860B7768eC2D87B8934267",
    "0x124737ce6a43A98CAAF095AcCb9A9D6fccBb0E73",
    "0x67c58C8f01f50589A52C2C0b233Db9aF6A66a0F0",
    "15"
  ],
  "solcInputHash": "91851841dca0677740cf26c3638c39e5",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingContract\",\"outputs\":[{\"internalType\":\"contract IBambooChef\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkReward()\":{\"details\":\"Staking rewards accurue to contract on each deposit/withdrawal\",\"returns\":{\"_0\":\"Unclaimed rewards, plus contract balance\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"deposit tokens to deposit to strategy\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"Estimated rewards tokens earned for calling `reinvest()`\"}},\"getDeployedBalance()\":{\"details\":\"This must NOT include the strategy contract balance\",\"returns\":{\"_0\":\"deposit tokens\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"reinvest()\":{\"returns\":{\"_0\":\"deposit tokens received\"}},\"rescueDeployedFunds()\":{\"details\":\"This is should NOT transfer tokens out of the strategy contract\"},\"revokeAllowance(address,address)\":{\"details\":\"Restricted to avoid griefing attacks\",\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Restricted to avoid griefing attacks\"},\"updateAdminFee(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"min threshold in wei\"}},\"updateReinvestReward(uint256)\":{\"details\":\"Total fees cannot be greater than BIPS_DIVISOR (100%)\",\"params\":{\"newValue\":\"specified in BIPS\"}},\"withdraw(address,uint256)\":{\"params\":{\"account\":\"account to receive deposit tokens\",\"amount\":\"deposit tokens to withdraw from strategy\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkReward()\":{\"notice\":\"Reward token balance that can be reinvested\"},\"deposit(uint256)\":{\"notice\":\"Deposits `depositToken` to strategy\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward for caller\"},\"getDeployedBalance()\":{\"notice\":\"Helper function to get the current balance deployed by strategy\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvests `rewardToken` to `depositToken`\"},\"rescueDeployedFunds()\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest minimum threshold for external callers\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdraws `depositTokens` from strategy\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/BambooLPWithReinvestFee.sol\":\"BambooLPWithReinvestFee\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IBambooChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IBambooChef {\\n    function bamboo() external view returns (address);\\n    function bambooPerBlock() external view returns (uint256);\\n\\n    function poolLength() external view returns (uint256);\\n    function add(uint256 _allocPoint, address _lpToken, bool _withUpdate) external;\\n    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) external;\\n    function setMigrator(address _migrator) external;\\n    function migrate(uint256 _pid) external;\\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\\n    function pendingBamboo(uint256 _pid, address _user) external view returns (uint256);\\n    function massUpdatePools() external;\\n    function updatePool(uint256 _pid) external;\\n    function deposit(uint256 _pid, uint256 _amount) external;\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n    function emergencyWithdraw(uint256 _pid) external;\\n    function dev(address _devaddr) external;\\n    function poolInfo(uint pid) external view returns (\\n        address lpToken,\\n        uint allocPoint,\\n        uint lastRewardBlock,\\n        uint accSushiPerShare\\n    );\\n    function userInfo(uint pid, address user) external view returns (\\n        uint256 amount,\\n        uint256 rewardDebt\\n    );\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n}\",\"keccak256\":\"0x2895a35497a5297a67408b01f72560fd1e46ec73811d2ae3f82e780dd1a1e83e\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n}\\n\",\"keccak256\":\"0x95d20e03691f0c743661793bf9bcba6bbf47932bd37077ebd1341188da931c14\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IRouter {\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(address token, uint amountTokenDesired, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(address token, uint liquidity, uint amountTokenMin, uint amountAVAXMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s) external returns (uint amountAVAX);\\n    function swapExactTokensForTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] memory path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] memory path) external view returns (uint[] memory amounts);\\n}\",\"keccak256\":\"0xb1bf34011dee59a85fed0223e0d71993445c7b3dd02145ff0f06a883339ae904\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/BambooLPWithReinvestFee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../interfaces/IBambooChef.sol\\\";\\nimport \\\"../interfaces/IRouter.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\ncontract BambooLPWithReinvestFee is BaseStrategy {\\n    using SafeMath for uint;\\n\\n    uint public PID;\\n    uint public REINVEST_REWARD_BIPS = 500;\\n    uint public ADMIN_FEE_BIPS = 500;\\n    uint public MIN_TOKENS_TO_REINVEST = 20000;\\n\\n    address public feeCollector;\\n    IBambooChef public stakingContract;\\n    IRouter public router;\\n\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n\\n    constructor(\\n        string memory _name,\\n        address _vault,\\n        address _depositToken,\\n        address _rewardToken,\\n        address _stakingContract,\\n        address _router,\\n        uint _pid\\n    ) {\\n        vault = _vault;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(_rewardToken);\\n\\n        stakingContract = IBambooChef(_stakingContract);\\n        router = IRouter(_router);\\n        PID = _pid;\\n\\n        strategyManager = msg.sender;\\n        feeCollector = msg.sender;\\n\\n        name = _name;\\n        setAllowances();\\n    }\\n\\n    function setAllowances() public override onlyManager {\\n        depositToken.approve(vault, UINT_MAX);\\n        depositToken.approve(address(stakingContract), UINT_MAX);\\n        depositToken.approve(address(router), UINT_MAX);\\n\\n        rewardToken.approve(address(router), UINT_MAX);\\n\\n        IERC20 token0 = IERC20(IPair(address(depositToken)).token0());\\n        token0.approve(address(router), UINT_MAX);\\n\\n        IERC20 token1 = IERC20(IPair(address(depositToken)).token1());\\n        token1.approve(address(router), UINT_MAX);\\n    }\\n\\n    function deposit(uint amount) external override onlyVault {\\n        require(depositToken.transferFrom(msg.sender, address(this), amount), \\\"Strategy::deposit, transferFrom failed\\\");\\n        _stakeDepositTokens(amount);\\n    }\\n\\n    function withdraw(address account, uint amount) external override onlyVault {\\n        _withdrawDepositTokens(amount);\\n        require(depositToken.transfer(account, amount), \\\"Strategy::withdraw, transfer failed\\\");\\n    }\\n\\n    function reinvest() external override onlyVault returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards < MIN_TOKENS_TO_REINVEST) {\\n            return 0;\\n        }\\n        return _reinvest(unclaimedRewards);\\n    }\\n\\n    function estimateReinvestReward() external override view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards < MIN_TOKENS_TO_REINVEST) {\\n            return 0;\\n        }\\n        return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n    }\\n\\n    /**\\n     * @notice Reward token balance that can be reinvested\\n     * @dev Staking rewards accurue to contract on each deposit/withdrawal\\n     * @return Unclaimed rewards, plus contract balance\\n     */\\n    function checkReward() public override view returns (uint) {\\n        uint pendingReward = stakingContract.pendingBamboo(PID, address(this));\\n        uint contractBalance = rewardToken.balanceOf(address(this));\\n        return pendingReward.add(contractBalance);\\n    }\\n\\n    function getDeployedBalance() external override view returns (uint) {\\n        (uint amount,) = stakingContract.userInfo(PID, address(this));\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev This private function does not require mininmum tokens to be met\\n     * @dev Reward should go to tx.origin\\n     * @param amount reward tokens\\n     * @return deposit tokens reinvested\\n     */\\n    function _reinvest(uint amount) private returns (uint) {\\n        stakingContract.deposit(PID, 0);\\n\\n        uint adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (adminFee > 0) {\\n            require(rewardToken.transfer(feeCollector, adminFee), \\\"Strategy::_reinvest, admin fee transfer failed\\\");\\n        }\\n\\n        uint reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            require(rewardToken.transfer(tx.origin, reinvestFee), \\\"Strategy::_reinvest, reinvest reward transfer failed\\\");\\n        }\\n\\n        uint depositTokenAmount = _convertRewardTokensToDepositTokens(amount.sub(adminFee).sub(reinvestFee));\\n        _stakeDepositTokens(depositTokenAmount);\\n        return depositTokenAmount;\\n    }\\n\\n    /**\\n     * @notice Stakes deposit tokens in Staking Contract\\n     * @param amount deposit tokens to stake\\n     */\\n    function _stakeDepositTokens(uint amount) private {\\n        require(amount > 0, \\\"Strategy::_stakeDepositTokens, amount too low\\\");\\n        stakingContract.deposit(PID, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws deposit tokens from Staking Contract\\n     * @dev Reward tokens are automatically collected\\n     * @dev Reward tokens are not automatically reinvested\\n     * @param amount deposit tokens to remove\\n     */\\n    function _withdrawDepositTokens(uint amount) private {\\n        require(amount > 0, \\\"Strategy::_withdrawDepositTokens, amount too low\\\");\\n        stakingContract.withdraw(PID, amount);\\n    }\\n\\n    /**\\n     * @notice Converts entire reward token balance to deposit tokens\\n     * @dev Always converts through router; there are no price checks enabled\\n     * @return deposit tokens received\\n     */\\n    function _convertRewardTokensToDepositTokens(uint amount) private returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"amount too low\\\");\\n\\n        // swap to token0\\n        address token0 = IPair(address(depositToken)).token0();\\n        address[] memory path0 = new address[](2);\\n        path0[0] = address(rewardToken);\\n        path0[1] = token0;\\n\\n        uint amountOutToken0 = amountIn;\\n        if (path0[0] != path0[1]) {\\n            uint[] memory amountsOutToken0 = router.getAmountsOut(amountIn, path0);\\n            amountOutToken0 = amountsOutToken0[amountsOutToken0.length - 1];\\n            router.swapExactTokensForTokens(amountIn, amountOutToken0, path0, address(this), block.timestamp);\\n        }\\n\\n        // swap to token1\\n        address token1 = IPair(address(depositToken)).token1();\\n        address[] memory path1 = new address[](2);\\n        path1[0] = path0[0];\\n        path1[1] = token1;\\n\\n        uint amountOutToken1 = amountIn;\\n        if (path1[0] != path1[1]) {\\n            uint[] memory amountsOutToken1 = router.getAmountsOut(amountIn, path1);\\n            amountOutToken1 = amountsOutToken1[amountsOutToken1.length - 1];\\n            router.swapExactTokensForTokens(amountIn, amountOutToken1, path1, address(this), block.timestamp);\\n        }\\n\\n        (,,uint liquidity) = router.addLiquidity(\\n            path0[1], path1[1],\\n            amountOutToken0, amountOutToken1,\\n            0, 0,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @notice Update reinvest minimum threshold for external callers\\n     * @param newValue min threshold in wei\\n     */\\n    function updateMinTokensToReinvest(uint newValue) external onlyManager {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n     * @param newValue specified in BIPS\\n     */\\n    function updateAdminFee(uint newValue) external onlyManager {\\n        require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR, \\\"admin fee too high\\\");\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @dev Total fees cannot be greater than BIPS_DIVISOR (100%)\\n     * @param newValue specified in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) external onlyManager {\\n        require(newValue.add(ADMIN_FEE_BIPS) <= BIPS_DIVISOR, \\\"reinvest reward too high\\\");\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    function rescueDeployedFunds() external override onlyManagerOrVault {\\n        stakingContract.emergencyWithdraw(PID);\\n    }\\n}\",\"keccak256\":\"0xc8b01d641ed4cc36b77ac23c1b8cc66e2dce011bbcd306a861de03b4fa09153b\",\"license\":\"MIT\"},\"contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\nabstract contract BaseStrategy {\\n    using SafeMath for uint;\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public vault;\\n    address public strategyManager;\\n    string public name;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal UINT_MAX = uint256(-1);\\n\\n    /**\\n     * @dev May only be called by `vault`\\n     */\\n    modifier onlyVault() {\\n        require(msg.sender == vault, \\\"onlyVault\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev May only be called by `strategyManager`\\n     */\\n    modifier onlyManager() {\\n        require(msg.sender == strategyManager, \\\"onlyManager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev May only be called by `strategyManager` or `vault`\\n     */\\n    modifier onlyManagerOrVault() {\\n        require(\\n            msg.sender == strategyManager\\n            || msg.sender == vault\\n            , \\\"onlyManagerOrVault\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Restricted to avoid griefing attacks\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @dev Restricted to avoid griefing attacks\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyManager {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposits `depositToken` to strategy\\n     * @param amount deposit tokens to deposit to strategy\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n     * @notice Withdraws `depositTokens` from strategy\\n     * @param account account to receive deposit tokens\\n     * @param amount deposit tokens to withdraw from strategy\\n     */\\n    function withdraw(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvests `rewardToken` to `depositToken`\\n     * @return deposit tokens received\\n     */\\n    function reinvest() external virtual returns (uint);\\n\\n    /**\\n     * @notice Estimate reinvest reward for caller\\n     * @return Estimated rewards tokens earned for calling `reinvest()`\\n     */\\n    function estimateReinvestReward() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Reward token balance that can be reinvested\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Helper function to get the current balance deployed by strategy\\n     * @dev This must NOT include the strategy contract balance\\n     * @return deposit tokens\\n     */\\n    function getDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @dev This is should NOT transfer tokens out of the strategy contract\\n     */\\n    function rescueDeployedFunds() external virtual;\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyVault {\\n        require(tokenAmount > 0, 'Strategy::recoverERC20, amount too low');\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyVault {\\n        require(amount > 0, 'Strategy::recoverAVAX, amount too low');\\n        require(amount <= address(this).balance, \\\"Strategy::recoverAVAX, amount too high\\\");\\n        msg.sender.transfer(amount);\\n    }\\n\\n}\",\"keccak256\":\"0xe8a8029d752949f38f21ed584f3bc6535f0e40474fb74b40ac041ef1be29921d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063bd079f55116100de578063e0dac43511610097578063f7c618c111610071578063f7c618c1146105b2578063f887ea40146105e6578063fbfa77cf1461061a578063fdb5a03e1461064e5761018e565b8063e0dac43514610526578063ee99205c14610530578063f3fef3a3146105645761018e565b8063bd079f551461044a578063c415b95c14610468578063c4b24a461461049c578063c89039c5146104ba578063cff1b6ef146104ee578063dbd9a4d41461051c5761018e565b8063818372301161014b578063a378011f11610125578063a378011f146103b2578063a8ae2b7c146103d0578063b6b55f25146103fe578063b9e57b801461042c5761018e565b806381837230146103185780638980f11f146103465780638aff733d146103945761018e565b806306fdde0314610193578063076771111461021657806339b70e38146102345780634ebb7916146102685780635eaec0e4146102965780637ae26773146102b4575b600080fd5b61019b61066c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101db5780820151818401526020810190506101c0565b50505050905090810190601f1680156102085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61021e61070a565b6040518082815260200191505060405180910390f35b61023c610710565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102946004803603602081101561027e57600080fd5b8101908080359060200190929190505050610736565b005b61029e6108f5565b6040518082815260200191505060405180910390f35b610316600480360360408110156102ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108fb565b005b6103446004803603602081101561032e57600080fd5b8101908080359060200190929190505050610a78565b005b6103926004803603604081101561035c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610b86565b005b61039c610d5b565b6040518082815260200191505060405180910390f35b6103ba610d61565b6040518082815260200191505060405180910390f35b6103fc600480360360208110156103e657600080fd5b8101908080359060200190929190505050610e45565b005b61042a6004803603602081101561041457600080fd5b8101908080359060200190929190505050610fdf565b005b6104346111ed565b6040518082815260200191505060405180910390f35b61045261123e565b6040518082815260200191505060405180910390f35b610470611244565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104a461126a565b6040518082815260200191505060405180910390f35b6104c261141f565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61051a6004803603602081101561050457600080fd5b8101908080359060200190929190505050611443565b005b6105246115dd565b005b61052e611e0c565b005b610538611fb8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105b06004803603604081101561057a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611fde565b005b6105ba6121cf565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105ee6121f5565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61062261221b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610656612241565b6040518082815260200191505060405180910390f35b60048054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107025780601f106106d757610100808354040283529160200191610702565b820191906000526020600020905b8154815290600101906020018083116106e557829003601f168201915b505050505081565b60075481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6f6e6c795661756c74000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008111610852576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806139326025913960400191505060405180910390fd5b478111156108ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806138e66026913960400191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156108f1573d6000803e3d6000fd5b5050565b60055481565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6f6e6c794d616e6167657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663095ea7b38260006040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610a3057600080fd5b505af1158015610a44573d6000803e3d6000fd5b505050506040513d6020811015610a5a57600080fd5b8101908080519060200190929190505050610a7457600080fd5b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b3b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6f6e6c794d616e6167657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef84990110060085482604051808381526020018281526020019250505060405180910390a18060088190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c49576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6f6e6c795661756c74000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008111610ca2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613a096026913960400191505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610d1357600080fd5b505af1158015610d27573d6000803e3d6000fd5b505050506040513d6020811015610d3d57600080fd5b8101908080519060200190929190505050610d5757600080fd5b5050565b60065481565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166393f1a40b600554306040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050604080518083038186803b158015610df657600080fd5b505afa158015610e0a573d6000803e3d6000fd5b505050506040513d6040811015610e2057600080fd5b8101908080519060200190929190805190602001909291905050505090508091505090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6f6e6c794d616e6167657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b612710610f206007548361233690919063ffffffff16565b1115610f94576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f7265696e766573742072657761726420746f6f2068696768000000000000000081525060200191505060405180910390fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f260065482604051808381526020018281526020019250505060405180910390a18060068190555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110a2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6f6e6c795661756c74000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561115157600080fd5b505af1158015611165573d6000803e3d6000fd5b505050506040513d602081101561117b57600080fd5b81019080805190602001909291905050506111e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061390c6026913960400191505060405180910390fd5b6111ea816123be565b50565b6000806111f861126a565b905060085481101561120e57600091505061123b565b611237612710611229600654846124b190919063ffffffff16565b61253790919063ffffffff16565b9150505b90565b60085481565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de86b677600554306040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561130057600080fd5b505afa158015611314573d6000803e3d6000fd5b505050506040513d602081101561132a57600080fd5b810190808051906020019092919050505090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156113c857600080fd5b505afa1580156113dc573d6000803e3d6000fd5b505050506040513d60208110156113f257600080fd5b81019080805190602001909291905050509050611418818361233690919063ffffffff16565b9250505090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611506576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6f6e6c794d616e6167657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b61271061151e6006548361233690919063ffffffff16565b1115611592576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f61646d696e2066656520746f6f2068696768000000000000000000000000000081525060200191505060405180910390fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a60075482604051808381526020018281526020019250505060405180910390a18060078190555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f6f6e6c794d616e6167657200000000000000000000000000000000000000000081525060200191505060405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561177357600080fd5b505af1158015611787573d6000803e3d6000fd5b505050506040513d602081101561179d57600080fd5b81019080805190602001909291905050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561188257600080fd5b505af1158015611896573d6000803e3d6000fd5b505050506040513d60208110156118ac57600080fd5b81019080805190602001909291905050505060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561199157600080fd5b505af11580156119a5573d6000803e3d6000fd5b505050506040513d60208110156119bb57600080fd5b810190808051906020019092919050505050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611aa257600080fd5b505af1158015611ab6573d6000803e3d6000fd5b505050506040513d6020811015611acc57600080fd5b81019080805190602001909291905050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015611b4757600080fd5b505afa158015611b5b573d6000803e3d6000fd5b505050506040513d6020811015611b7157600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611c3757600080fd5b505af1158015611c4b573d6000803e3d6000fd5b505050506040513d6020811015611c6157600080fd5b81019080805190602001909291905050505060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015611cdc57600080fd5b505afa158015611cf0573d6000803e3d6000fd5b505050506040513d6020811015611d0657600080fd5b810190808051906020019092919050505090508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015611dcc57600080fd5b505af1158015611de0573d6000803e3d6000fd5b505050506040513d6020811015611df657600080fd5b8101908080519060200190929190505050505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611eb55750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611f27576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f6e6c794d616e616765724f725661756c74000000000000000000000000000081525060200191505060405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635312ea8e6005546040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015611f9e57600080fd5b505af1158015611fb2573d6000803e3d6000fd5b50505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146120a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6f6e6c795661756c74000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b6120aa81612581565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561213b57600080fd5b505af115801561214f573d6000803e3d6000fd5b505050506040513d602081101561216557600080fd5b81019080805190602001909291905050506121cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180613a2f6023913960400191505060405180910390fd5b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260098152602001807f6f6e6c795661756c74000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b600061231061126a565b9050600854811015612326576000915050612333565b61232f81612674565b9150505b90565b6000808284019050838110156123b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008111612417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d815260200180613957602d913960400191505060405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb158600554836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561249657600080fd5b505af11580156124aa573d6000803e3d6000fd5b5050505050565b6000808314156124c45760009050612531565b60008284029050828482816124d557fe5b041461252c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806139846021913960400191505060405180910390fd5b809150505b92915050565b600061257983836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a29565b905092915050565b600081116125da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806139d96030913960400191505060405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663441a3e70600554836040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561265957600080fd5b505af115801561266d573d6000803e3d6000fd5b5050505050565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e2bbb15860055460006040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b1580156126f657600080fd5b505af115801561270a573d6000803e3d6000fd5b50505050600061273961271061272b600754866124b190919063ffffffff16565b61253790919063ffffffff16565b9050600081111561288a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156127f957600080fd5b505af115801561280d573d6000803e3d6000fd5b505050506040513d602081101561282357600080fd5b8101908080519060200190929190505050612889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180613a52602e913960400191505060405180910390fd5b5b60006128b56127106128a7600654876124b190919063ffffffff16565b61253790919063ffffffff16565b905060008111156129e457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb32836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561295357600080fd5b505af1158015612967573d6000803e3d6000fd5b505050506040513d602081101561297d57600080fd5b81019080805190602001909291905050506129e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260348152602001806139a56034913960400191505060405180910390fd5b5b6000612a13612a0e83612a008689612aef90919063ffffffff16565b612aef90919063ffffffff16565b612b39565b9050612a1e816123be565b809350505050919050565b60008083118290612ad5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612a9a578082015181840152602081019050612a7f565b50505050905090810190601f168015612ac75780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838581612ae157fe5b049050809150509392505050565b6000612b3183836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250613825565b905092915050565b600080612b5060028461253790919063ffffffff16565b905060008111612bc8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f616d6f756e7420746f6f206c6f7700000000000000000000000000000000000081525060200191505060405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3157600080fd5b505afa158015612c45573d6000803e3d6000fd5b505050506040513d6020811015612c5b57600080fd5b810190808051906020019092919050505090506060600267ffffffffffffffff81118015612c8857600080fd5b50604051908082528060200260200182016040528015612cb75781602001602082028036833780820191505090505b509050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681600081518110612cea57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508181600181518110612d3257fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600083905081600181518110612d7e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1682600081518110612da957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161461313f576060600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f86856040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015612e66578082015181840152602081019050612e4b565b50505050905001935050505060006040518083038186803b158015612e8a57600080fd5b505afa158015612e9e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015612ec857600080fd5b8101908080516040519392919084640100000000821115612ee857600080fd5b83820191506020820185811115612efe57600080fd5b8251866020820283011164010000000082111715612f1b57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015612f52578082015181840152602081019050612f37565b50505050905001604052505050905080600182510381518110612f7157fe5b60200260200101519150600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173986848630426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561303e578082015181840152602081019050613023565b505050509050019650505050505050600060405180830381600087803b15801561306757600080fd5b505af115801561307b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156130a557600080fd5b81019080805160405193929190846401000000008211156130c557600080fd5b838201915060208201858111156130db57600080fd5b82518660208202830111640100000000821117156130f857600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561312f578082015181840152602081019050613114565b5050505090500160405250505050505b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156131a857600080fd5b505afa1580156131bc573d6000803e3d6000fd5b505050506040513d60208110156131d257600080fd5b810190808051906020019092919050505090506060600267ffffffffffffffff811180156131ff57600080fd5b5060405190808252806020026020018201604052801561322e5781602001602082028036833780820191505090505b5090508360008151811061323e57fe5b60200260200101518160008151811061325357fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818160018151811061329b57fe5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000869050816001815181106132e757fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff168260008151811061331257fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146136a8576060600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f89856040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b838110156133cf5780820151818401526020810190506133b4565b50505050905001935050505060006040518083038186803b1580156133f357600080fd5b505afa158015613407573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561343157600080fd5b810190808051604051939291908464010000000082111561345157600080fd5b8382019150602082018581111561346757600080fd5b825186602082028301116401000000008211171561348457600080fd5b8083526020830192505050908051906020019060200280838360005b838110156134bb5780820151818401526020810190506134a0565b505050509050016040525050509050806001825103815181106134da57fe5b60200260200101519150600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed173989848630426040518663ffffffff1660e01b815260040180868152602001858152602001806020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156135a757808201518184015260208101905061358c565b505050509050019650505050505050600060405180830381600087803b1580156135d057600080fd5b505af11580156135e4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101561360e57600080fd5b810190808051604051939291908464010000000082111561362e57600080fd5b8382019150602082018581111561364457600080fd5b825186602082028301116401000000008211171561366157600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561369857808201518184015260208101905061367d565b5050505090500160405250505050505b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e33700876001815181106136f557fe5b60200260200101518560018151811061370a57fe5b6020026020010151888660008030426040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200198505050505050505050606060405180830381600087803b1580156137c257600080fd5b505af11580156137d6573d6000803e3d6000fd5b505050506040513d60608110156137ec57600080fd5b81019080805190602001909291908051906020019092919080519060200190929190505050925050508098505050505050505050919050565b60008383111582906138d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561389757808201518184015260208101905061387c565b50505050905090810190601f1680156138c45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fe53747261746567793a3a7265636f766572415641582c20616d6f756e7420746f6f206869676853747261746567793a3a6465706f7369742c207472616e7366657246726f6d206661696c656453747261746567793a3a7265636f766572415641582c20616d6f756e7420746f6f206c6f7753747261746567793a3a5f7374616b654465706f736974546f6b656e732c20616d6f756e7420746f6f206c6f77536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7753747261746567793a3a5f7265696e766573742c207265696e7665737420726577617264207472616e73666572206661696c656453747261746567793a3a5f77697468647261774465706f736974546f6b656e732c20616d6f756e7420746f6f206c6f7753747261746567793a3a7265636f76657245524332302c20616d6f756e7420746f6f206c6f7753747261746567793a3a77697468647261772c207472616e73666572206661696c656453747261746567793a3a5f7265696e766573742c2061646d696e20666565207472616e73666572206661696c6564a264697066735822122006f76c90a9be777ef0d278e5927cb52a5b6277a2dbe18bb59b88279ccbc9746564736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkReward()": {
        "details": "Staking rewards accurue to contract on each deposit/withdrawal",
        "returns": {
          "_0": "Unclaimed rewards, plus contract balance"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "deposit tokens to deposit to strategy"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "Estimated rewards tokens earned for calling `reinvest()`"
        }
      },
      "getDeployedBalance()": {
        "details": "This must NOT include the strategy contract balance",
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "reinvest()": {
        "returns": {
          "_0": "deposit tokens received"
        }
      },
      "rescueDeployedFunds()": {
        "details": "This is should NOT transfer tokens out of the strategy contract"
      },
      "revokeAllowance(address,address)": {
        "details": "Restricted to avoid griefing attacks",
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Restricted to avoid griefing attacks"
      },
      "updateAdminFee(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "min threshold in wei"
        }
      },
      "updateReinvestReward(uint256)": {
        "details": "Total fees cannot be greater than BIPS_DIVISOR (100%)",
        "params": {
          "newValue": "specified in BIPS"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "account": "account to receive deposit tokens",
          "amount": "deposit tokens to withdraw from strategy"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkReward()": {
        "notice": "Reward token balance that can be reinvested"
      },
      "deposit(uint256)": {
        "notice": "Deposits `depositToken` to strategy"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward for caller"
      },
      "getDeployedBalance()": {
        "notice": "Helper function to get the current balance deployed by strategy"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvests `rewardToken` to `depositToken`"
      },
      "rescueDeployedFunds()": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest minimum threshold for external callers"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(address,uint256)": {
        "notice": "Withdraws `depositTokens` from strategy"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1697,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "depositToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)244"
      },
      {
        "astId": 1699,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)244"
      },
      {
        "astId": 1701,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1703,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "strategyManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1705,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 914,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "PID",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 917,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 920,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 923,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 925,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "feeCollector",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 927,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "stakingContract",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IBambooChef)143"
      },
      {
        "astId": 929,
        "contract": "contracts/strategies/BambooLPWithReinvestFee.sol:BambooLPWithReinvestFee",
        "label": "router",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IRouter)640"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IBambooChef)143": {
        "encoding": "inplace",
        "label": "contract IBambooChef",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)244": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRouter)640": {
        "encoding": "inplace",
        "label": "contract IRouter",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}