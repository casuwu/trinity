{
  "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poolRewardToken",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapPairToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPairPoolReward",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPairExtraReward",
              "type": "address"
            }
          ],
          "internalType": "struct PlatypusStrategy.SwapPairs",
          "name": "swapPairs",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_voterProxy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct YakStrategyV2.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IPlatypusAsset",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterchef",
      "outputs": [
        {
          "internalType": "contract IMasterPlatypus",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPlatypusPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxy",
      "outputs": [
        {
          "internalType": "contract IPlatypusVoterProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_extraTokenSwapPair",
          "type": "address"
        }
      ],
      "name": "setExtraRewardSwapPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voterProxy",
          "type": "address"
        }
      ],
      "name": "setPlatypusVoterProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapPairExtraReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slippageBips",
          "type": "uint256"
        }
      ],
      "name": "updateMaxSwapSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
    "transactionIndex": 4,
    "gasUsed": "4619253",
    "logsBloom": "0x
    "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd",
    "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002386f26fc10000",
        "logIndex": 11,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 12,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c",
        "logIndex": 13,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 14,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      },
      {
        "transactionIndex": 4,
        "blockNumber": 14858604,
        "transactionHash": "0x8ffaddc90dba47fe5abe7261f2e6744738b46177b637ff4128e29c6f0d13a049",
        "address": "0x4C11142dD4aA2755c2FcC7Edb7E4649deEeE25fe",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 16,
        "blockHash": "0x42b93df109622596e6152aa257a6d03137179bb33fe032bf57f0dad4d41a92bd"
      }
    ],
    "blockNumber": 14858604,
    "cumulativeGasUsed": "5175031",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Platypus YUSD",
    "0x111111111111ed1D73f860F57b2798b683f2d325",
    "0x22d4002028f537599be9f666d1c4fa138522f9c8",
    {
      "swapPairToken": "0xe73e1a31910a1345037fc6a924ee59e0fcf2d322",
      "swapPairPoolReward": "0xcdfd91eea657cc2701117fe9711c9a4f61feed23",
      "swapPairExtraReward": "0xbdc7ef37283bc67d50886c4afb64877e3e83f869"
    },
    "100",
    "0xc828d995c686aaba78a4ac89dfc8ec0ff4c5be83",
    "0x68c5f4374228BEEdFa078e77b5ed93C28a2f713E",
    "0x3969003d42976b021170ed82b1da5cd6675969d5",
    "16",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    {
      "minTokensToReinvest": "10000000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 700,
      "reinvestRewardBips": 300
    }
  ],
  "solcInputHash": "90a4dd2830a7e2f7822c0f5378975b29",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolRewardToken\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapPairToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPairPoolReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPairExtraReward\",\"type\":\"address\"}],\"internalType\":\"struct PlatypusStrategy.SwapPairs\",\"name\":\"swapPairs\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_voterProxy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct YakStrategyV2.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IPlatypusAsset\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterchef\",\"outputs\":[{\"internalType\":\"contract IMasterPlatypus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPlatypusPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxy\",\"outputs\":[{\"internalType\":\"contract IPlatypusVoterProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_extraTokenSwapPair\",\"type\":\"address\"}],\"name\":\"setExtraRewardSwapPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterProxy\",\"type\":\"address\"}],\"name\":\"setPlatypusVoterProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapPairExtraReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippageBips\",\"type\":\"uint256\"}],\"name\":\"updateMaxSwapSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens after withdraw fee\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setExtraRewardSwapPair(address)\":{\"details\":\"Function name matches interface for FeeCollector\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"details\":\"Deprecated; Kept for compatibility\",\"params\":{\"newValue\":\"fee in BIPS; required to be 0\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxSwapSlippage(uint256)\":{\"details\":\"Function name matches interface for FeeCollector\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit tokens to receive receipt tokens\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimate recoverable balance after withdraw fee\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setExtraRewardSwapPair(address)\":{\"notice\":\"Update extra reward swap pair (if applicable)\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxSwapSlippage(uint256)\":{\"notice\":\"Update max slippage for withdrawal\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/platypus/PlatypusStrategy.sol\":\"PlatypusStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n\\n    mapping(address => mapping(address => uint256)) internal allowances;\\n    mapping(address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint256) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint256) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 amount\\n    ) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != type(uint256).max) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(\\n        address signer,\\n        bytes32 encodeData,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal view {\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", getDomainSeparator(), encodeData));\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), VERSION_HASH, _getChainId(), address(this)));\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal view returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x6a1eba50e580678ef7b6b96dc90629e51f828e129060135fb7aeaba91a326d5f\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint256;\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint256 public MIN_TOKENS_TO_REINVEST;\\n    uint256 public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint256 public ADMIN_FEE_BIPS;\\n    uint256 public REINVEST_REWARD_BIPS;\\n    uint256 public DEV_FEE_BIPS;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    uint256 internal constant MAX_UINT = type(uint256).max;\\n\\n    event Deposit(address indexed account, uint256 amount);\\n    event Withdraw(address indexed account, uint256 amount);\\n    event Reinvest(uint256 newTotalDeposits, uint256 newTotalSupply);\\n    event Recovered(address token, uint256 amount);\\n    event UpdateAdminFee(uint256 oldValue, uint256 newValue);\\n    event UpdateDevFee(uint256 oldValue, uint256 newValue);\\n    event UpdateReinvestReward(uint256 oldValue, uint256 newValue);\\n    event UpdateMinTokensToReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint256 oldValue, uint256 newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    constructor(StrategySettings memory _strategySettings) {\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n    }\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @dev Should revert for tokens without Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint256 amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint256) {\\n        uint256 unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external view virtual returns (uint256);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint256 amount) public view returns (uint256) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint256 amount) public view returns (uint256) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint256 newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @dev Deprecated; Kept for compatibility\\n     * @param newValue fee in BIPS; required to be 0\\n     */\\n    function updateAdminFee(uint256 newValue) public onlyOwner {\\n        require(newValue == 0);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint256 newValue) public onlyOwner {\\n        require(newValue.add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint256 newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint256 amount) external onlyOwner {\\n        require(amount > 0);\\n        payable(msg.sender).transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2e20de5ac3ae62c4cc655c5ce4d785c3aed08eb8b2454d5d2b5d007842ab35bb\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x13986c2d371de8b29ffbbd5c2a5daa3fe6801801ba3b09530dbfc714d239adcb\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xdb4adbfe678b51139c50ca81931c58e0ce6aef9bc85195bf5dee3444aa9a2410\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function approve(address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x7770575951dbb745d5ba319363b64dd1165d9a6380e685f1e8aff5cf1ca2c608\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity 0.8.13;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb0e33a6c916e2b3c1669c15106d704c72403bb6c102dd1e48ed99a1fca92988\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x405ed171baa7364cae410dff96f36bfc945defc68675865b555206e14bb04b62\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair pair\\n    ) internal returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint256 amountOut1 = 0;\\n        uint256 amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        IERC20(fromToken).safeTransfer(address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(\\n        IPair pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (bool) {\\n        return\\n            (tokenA == pair.token0() || tokenA == pair.token1()) &&\\n            (tokenB == pair.token0() || tokenB == pair.token1()) &&\\n            tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(\\n        uint256 amountIn,\\n        address fromToken,\\n        address toToken,\\n        IPair swapPair\\n    ) internal view returns (uint256) {\\n        (address token0, ) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1, ) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(\\n        uint256 amount,\\n        address rewardToken,\\n        address depositToken,\\n        IPair swapPairToken0,\\n        IPair swapPairToken1\\n    ) internal returns (uint256) {\\n        uint256 amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint256 amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint256 amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(\\n        address depositToken,\\n        uint256 maxAmountIn0,\\n        uint256 maxAmountIn1\\n    ) internal returns (uint256) {\\n        (uint112 reserve0, uint112 reserve1, ) = IPair(address(depositToken)).getReserves();\\n        uint256 amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        IERC20(IPair(depositToken).token0()).safeTransfer(depositToken, maxAmountIn0);\\n        IERC20(IPair(depositToken).token1()).safeTransfer(depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(\\n        uint256 amountIn,\\n        uint256 reserve0,\\n        uint256 reserve1\\n    ) private pure returns (uint256) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256) {\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n}\\n\",\"keccak256\":\"0x7d3e51e6f2c95f4ee832db2e24d40328e23c5757ecac4a3b71233bd16d01d20c\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x5ca8cde9011572844c97557e6fd9f5c33673465b910c10cfcc9e07859da97a14\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint256;\\n\\n    uint256 public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\\n\",\"keccak256\":\"0xc1d5010fa46f3699ba89c0988895d0236c96d4f88490228698bdbd55a15dccf7\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0c0187783bd30018a8dddffa7e5aff1ad044dc6b7d63feca5010fdcb8dab2bac\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity 0.8.13;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc346884413e71a1422efe5e44741b2692cbabf006f562dbdf38186790f49b1c5\",\"license\":\"MIT\"},\"contracts/strategies/platypus/PlatypusStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.13;\\n\\nimport \\\"../../YakStrategyV2.sol\\\";\\nimport \\\"../../lib/DexLibrary.sol\\\";\\nimport \\\"../../lib/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IERC20.sol\\\";\\nimport \\\"../../interfaces/IPair.sol\\\";\\nimport \\\"../../interfaces/IWAVAX.sol\\\";\\n\\nimport \\\"./interfaces/IMasterPlatypus.sol\\\";\\nimport \\\"./interfaces/IPlatypusPool.sol\\\";\\nimport \\\"./interfaces/IPlatypusVoterProxy.sol\\\";\\nimport \\\"./interfaces/IPlatypusAsset.sol\\\";\\nimport \\\"./lib/DSMath.sol\\\";\\n\\ncontract PlatypusStrategy is YakStrategyV2 {\\n    using SafeMath for uint256;\\n    using DSMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    struct SwapPairs {\\n        address swapPairToken; // swap rewardToken to depositToken\\n        address swapPairPoolReward;\\n        address swapPairExtraReward;\\n    }\\n\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    uint256 internal constant WAD = 10**18;\\n    uint256 internal constant RAY = 10**27;\\n\\n    IMasterPlatypus public immutable masterchef;\\n    IPlatypusAsset public immutable asset;\\n    IPlatypusPool public pool;\\n    IPlatypusVoterProxy public proxy;\\n    uint256 public maxSlippage;\\n    address private swapPairToken;\\n    uint256 public immutable PID;\\n    address private poolRewardToken;\\n    IPair private swapPairPoolReward;\\n    address public swapPairExtraReward;\\n    address public extraToken;\\n\\n    constructor(\\n        string memory _name,\\n        address _depositToken,\\n        address _poolRewardToken,\\n        SwapPairs memory swapPairs,\\n        uint256 _maxSlippage,\\n        address _pool,\\n        address _stakingContract,\\n        address _voterProxy,\\n        uint256 _pid,\\n        address _timelock,\\n        StrategySettings memory _strategySettings\\n    ) YakStrategyV2(_strategySettings) {\\n        name = _name;\\n        depositToken = IERC20(_depositToken);\\n        rewardToken = IERC20(address(WAVAX));\\n        PID = _pid;\\n        devAddr = 0x2D580F9CF2fB2D09BC411532988F2aFdA4E7BefF;\\n\\n        masterchef = IMasterPlatypus(_stakingContract);\\n        pool = IPlatypusPool(_pool);\\n        asset = IPlatypusAsset(pool.assetOf(_depositToken));\\n        proxy = IPlatypusVoterProxy(_voterProxy);\\n        maxSlippage = _maxSlippage;\\n\\n        assignSwapPairSafely(swapPairs.swapPairToken, _poolRewardToken, swapPairs.swapPairPoolReward);\\n        _setExtraRewardSwapPair(swapPairs.swapPairExtraReward);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function setPlatypusVoterProxy(address _voterProxy) external onlyOwner {\\n        proxy = IPlatypusVoterProxy(_voterProxy);\\n    }\\n\\n    /**\\n     * @notice Update max slippage for withdrawal\\n     * @dev Function name matches interface for FeeCollector\\n     */\\n    function updateMaxSwapSlippage(uint256 slippageBips) public onlyDev {\\n        maxSlippage = slippageBips;\\n    }\\n\\n    /**\\n     * @notice Update extra reward swap pair (if applicable)\\n     * @dev Function name matches interface for FeeCollector\\n     */\\n    function setExtraRewardSwapPair(address _extraTokenSwapPair) external onlyDev {\\n        _setExtraRewardSwapPair(_extraTokenSwapPair);\\n    }\\n\\n    function assignSwapPairSafely(\\n        address _swapPairToken,\\n        address _poolRewardToken,\\n        address _swapPairPoolReward\\n    ) private {\\n        require(\\n            DexLibrary.checkSwapPairCompatibility(IPair(_swapPairToken), address(depositToken), address(rewardToken)),\\n            \\\"swap token does not match deposit and reward token\\\"\\n        );\\n        swapPairToken = _swapPairToken;\\n\\n        if (_poolRewardToken != address(rewardToken)) {\\n            DexLibrary.checkSwapPairCompatibility(IPair(_swapPairPoolReward), address(rewardToken), _poolRewardToken);\\n        }\\n        poolRewardToken = _poolRewardToken;\\n        swapPairPoolReward = IPair(_swapPairPoolReward);\\n    }\\n\\n    function _setExtraRewardSwapPair(address _extraTokenSwapPair) internal {\\n        if (_extraTokenSwapPair > address(0)) {\\n            if (IPair(_extraTokenSwapPair).token0() == address(rewardToken)) {\\n                extraToken = IPair(_extraTokenSwapPair).token1();\\n            } else if (IPair(_extraTokenSwapPair).token1() == address(rewardToken)) {\\n                extraToken = IPair(_extraTokenSwapPair).token0();\\n            } else {\\n                revert(\\\"PlatypusStrategy::_setExtraRewardSwapPair Swap pair does not contain reward token\\\");\\n            }\\n            swapPairExtraReward = _extraTokenSwapPair;\\n        } else {\\n            swapPairExtraReward = address(0);\\n            extraToken = address(0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Deposit tokens to receive receipt tokens\\n     * @param amount Amount of tokens to deposit\\n     */\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Deposit using Permit\\n     * @param amount Amount of tokens to deposit\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) internal {\\n        require(DEPOSITS_ENABLED == true, \\\"PlatypusStrategy::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (\\n                uint256 poolTokenAmount,\\n                uint256 extraTokenAmount,\\n                uint256 rewardTokenBalance,\\n                uint256 estimatedTotalReward\\n            ) = _checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(rewardTokenBalance, poolTokenAmount, extraTokenAmount);\\n            }\\n        } else {\\n            proxy.claimReward(address(masterchef), PID);\\n        }\\n        depositToken.safeTransferFrom(msg.sender, address(this), amount);\\n        uint256 depositFee = _calculateDepositFee(amount);\\n        _mint(account, getSharesForDepositTokens(amount.sub(depositFee)));\\n        _stakeDepositTokens(amount, depositFee);\\n        emit Deposit(account, amount.sub(depositFee));\\n    }\\n\\n    function _depositMasterchef(\\n        uint256 _pid,\\n        uint256 _amount,\\n        uint256 _fee\\n    ) internal {\\n        depositToken.safeTransfer(address(proxy), _amount);\\n        proxy.deposit(_pid, address(masterchef), address(pool), address(depositToken), address(asset), _amount, _fee);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        require(depositTokenAmount > 0, \\\"PlatypusStrategy::withdraw\\\");\\n        proxy.claimReward(address(masterchef), PID);\\n        uint256 withdrawalAmount = proxy.withdraw(\\n            PID,\\n            address(masterchef),\\n            address(pool),\\n            address(depositToken),\\n            address(asset),\\n            maxSlippage,\\n            depositTokenAmount\\n        );\\n        depositToken.safeTransfer(msg.sender, withdrawalAmount);\\n        _burn(msg.sender, amount);\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        (\\n            uint256 poolTokenAmount,\\n            uint256 extraTokenAmount,\\n            uint256 rewardTokenBalance,\\n            uint256 estimatedTotalReward\\n        ) = _checkReward();\\n        require(estimatedTotalReward >= MIN_TOKENS_TO_REINVEST, \\\"PlatypusStrategy::reinvest\\\");\\n        _reinvest(rewardTokenBalance, poolTokenAmount, extraTokenAmount);\\n    }\\n\\n    function _convertPoolTokensIntoReward(uint256 poolTokenAmount) private returns (uint256) {\\n        if (address(rewardToken) == poolRewardToken) {\\n            return poolTokenAmount;\\n        }\\n        return DexLibrary.swap(poolTokenAmount, address(poolRewardToken), address(rewardToken), swapPairPoolReward);\\n    }\\n\\n    function _convertExtraTokensIntoReward(uint256 rewardTokenBalance, uint256 extraTokenAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (extraTokenAmount > 0) {\\n            if (swapPairExtraReward > address(0)) {\\n                return DexLibrary.swap(extraTokenAmount, extraToken, address(rewardToken), IPair(swapPairExtraReward));\\n            }\\n\\n            uint256 avaxBalance = address(this).balance;\\n            if (avaxBalance > 0) {\\n                WAVAX.deposit{value: avaxBalance}();\\n            }\\n            return WAVAX.balanceOf(address(this)).sub(rewardTokenBalance);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `MasterChef`\\n     */\\n    function _reinvest(\\n        uint256 rewardTokenBalance,\\n        uint256 poolTokenAmount,\\n        uint256 extraTokenAmount\\n    ) private {\\n        proxy.claimReward(address(masterchef), PID);\\n        uint256 amount = rewardTokenBalance.add(_convertPoolTokensIntoReward(poolTokenAmount));\\n        amount.add(_convertExtraTokensIntoReward(rewardTokenBalance, extraTokenAmount));\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            rewardToken.safeTransfer(devAddr, devFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            rewardToken.safeTransfer(msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = _convertRewardTokenToDepositToken(amount.sub(devFee).sub(reinvestFee));\\n\\n        uint256 depositFee = _calculateDepositFee(depositTokenAmount);\\n        _stakeDepositTokens(depositTokenAmount, depositFee);\\n\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _convertRewardTokenToDepositToken(uint256 fromAmount) internal returns (uint256 toAmount) {\\n        toAmount = DexLibrary.swap(fromAmount, address(rewardToken), address(depositToken), IPair(swapPairToken));\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount, uint256 depositFee) private {\\n        require(amount.sub(depositFee) > 0, \\\"PlatypusStrategy::_stakeDepositTokens\\\");\\n        _depositMasterchef(PID, amount, depositFee);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        (, , , uint256 estimatedTotalReward) = _checkReward();\\n        return estimatedTotalReward;\\n    }\\n\\n    function _checkReward()\\n        internal\\n        view\\n        returns (\\n            uint256 _poolTokenAmount,\\n            uint256 _extraTokenAmount,\\n            uint256 _rewardTokenBalance,\\n            uint256 _estimatedTotalReward\\n        )\\n    {\\n        uint256 poolTokenBalance = IERC20(poolRewardToken).balanceOf(address(this));\\n        (uint256 pendingPoolTokenAmount, uint256 pendingExtraTokenAmount, address extraTokenAddress) = _pendingRewards(\\n            PID\\n        );\\n        uint256 poolTokenAmount = poolTokenBalance.add(pendingPoolTokenAmount);\\n\\n        uint256 pendingRewardTokenAmount = poolRewardToken != address(rewardToken)\\n            ? DexLibrary.estimateConversionThroughPair(\\n                poolTokenAmount,\\n                poolRewardToken,\\n                address(rewardToken),\\n                swapPairPoolReward\\n            )\\n            : pendingPoolTokenAmount;\\n        uint256 pendingExtraTokenRewardAmount = 0;\\n        if (extraTokenAddress > address(0)) {\\n            if (extraTokenAddress == address(WAVAX)) {\\n                pendingExtraTokenRewardAmount = pendingExtraTokenAmount;\\n            } else if (swapPairExtraReward > address(0)) {\\n                pendingExtraTokenAmount = pendingExtraTokenAmount.add(IERC20(extraToken).balanceOf(address(this)));\\n                pendingExtraTokenRewardAmount = DexLibrary.estimateConversionThroughPair(\\n                    pendingExtraTokenAmount,\\n                    extraTokenAddress,\\n                    address(rewardToken),\\n                    IPair(swapPairExtraReward)\\n                );\\n            }\\n        }\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this)).add(pendingExtraTokenRewardAmount);\\n        uint256 estimatedTotalReward = rewardTokenBalance.add(pendingRewardTokenAmount);\\n        return (poolTokenAmount, pendingExtraTokenAmount, rewardTokenBalance, estimatedTotalReward);\\n    }\\n\\n    function _pendingRewards(uint256 _pid)\\n        internal\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        )\\n    {\\n        (uint256 pendingPtp, uint256 pendingBonusToken, address bonusTokenAddress) = proxy.pendingRewards(\\n            address(masterchef),\\n            _pid\\n        );\\n        uint256 reinvestFeeBips = proxy.reinvestFeeBips();\\n        uint256 boostFee = pendingPtp.mul(reinvestFeeBips).div(BIPS_DIVISOR);\\n\\n        return (pendingPtp.sub(boostFee), pendingBonusToken, bonusTokenAddress);\\n    }\\n\\n    function _calculateDepositFee(uint256 amount) internal view returns (uint256 fee) {\\n        return\\n            _depositFee(\\n                pool.getSlippageParamK(),\\n                pool.getSlippageParamN(),\\n                pool.getC1(),\\n                pool.getXThreshold(),\\n                asset.cash(),\\n                asset.liability(),\\n                amount\\n            );\\n    }\\n\\n    function _depositFee(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 cash,\\n        uint256 liability,\\n        uint256 amount\\n    ) internal pure returns (uint256) {\\n        // cover case where the asset has no liquidity yet\\n        if (liability == 0) {\\n            return 0;\\n        }\\n\\n        uint256 covBefore = cash.wdiv(liability);\\n        if (covBefore <= 10**18) {\\n            return 0;\\n        }\\n\\n        uint256 covAfter = (cash.add(amount)).wdiv(liability.add(amount));\\n        uint256 slippageBefore = _slippageFunc(k, n, c1, xThreshold, covBefore);\\n        uint256 slippageAfter = _slippageFunc(k, n, c1, xThreshold, covAfter);\\n\\n        // (Li + Di) * g(cov_after) - Li * g(cov_before)\\n        return ((liability.add(amount)).wmul(slippageAfter)).sub(liability.wmul(slippageBefore));\\n    }\\n\\n    function _slippageFunc(\\n        uint256 k,\\n        uint256 n,\\n        uint256 c1,\\n        uint256 xThreshold,\\n        uint256 x\\n    ) internal pure returns (uint256) {\\n        if (x < xThreshold) {\\n            return c1.sub(x);\\n        } else {\\n            return k.wdiv((((x.mul(RAY)).div(WAD)).rpow(n).mul(WAD)).div(RAY)); // k / (x ** n)\\n        }\\n    }\\n\\n    /**\\n     * @notice Estimate recoverable balance after withdraw fee\\n     * @return deposit tokens after withdraw fee\\n     */\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        uint256 balance = totalDeposits();\\n        if (balance == 0) {\\n            return 0;\\n        }\\n        (uint256 expectedAmount, , ) = pool.quotePotentialWithdraw(address(depositToken), balance);\\n        return expectedAmount;\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        uint256 depositBalance = proxy.poolBalance(address(masterchef), PID);\\n        return depositBalance;\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        proxy.emergencyWithdraw(PID, address(masterchef), address(pool), address(depositToken), address(asset));\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted, \\\"PlatypusStrategy::rescueDeployedFunds\\\");\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81f316ea4d200e10db23dc8a88565cf16b517b0800880a928e821336c469ae33\",\"license\":\"MIT\"},\"contracts/strategies/platypus/interfaces/IMasterPlatypus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IMasterPlatypus {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVePtpBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 _amount,\\n            uint256 _rewardDebt,\\n            uint256 _factor\\n        );\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _lpToken,\\n            uint256 _allocPoint,\\n            uint256 _lastRewardTimestamp,\\n            uint256 _accPtpPerShare,\\n            address _rewarder,\\n            uint256 _sumOfFactors,\\n            uint256 _accPtpPerFactorShare\\n        );\\n}\\n\",\"keccak256\":\"0x10edc108aee5deb8d6ff8d96da926b16feb400d7bddbe1b8b14c8ad1bd2f12fe\",\"license\":\"MIT\"},\"contracts/strategies/platypus/interfaces/IPlatypusAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusAsset {\\n    function cash() external view returns (uint256);\\n\\n    function liability() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xbbf22f57ab3ede7d0ba9e0b4167fc8be9f1268ab15ccd26cd3cc1e7a9cf9da5d\",\"license\":\"MIT\"},\"contracts/strategies/platypus/interfaces/IPlatypusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusPool {\\n    function assetOf(address token) external view returns (address);\\n\\n    function deposit(\\n        address to,\\n        uint256 amount,\\n        address token,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function getHaircutRate() external view returns (uint256);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getC1() external view returns (uint256);\\n\\n    function getXThreshold() external view returns (uint256);\\n\\n    function getSlippageParamK() external view returns (uint256);\\n\\n    function getSlippageParamN() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3f0f782042eff8c0cbe26e594243ab6267eeb31560792babc301cbbdc7f66f90\",\"license\":\"MIT\"},\"contracts/strategies/platypus/interfaces/IPlatypusVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ninterface IPlatypusVoter {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function vePTPBalance() external view returns (uint256);\\n\\n    function wrapAvaxBalance() external returns (uint256);\\n\\n    function depositsEnabled() external view returns (bool);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function depositFromBalance(uint256 _value) external;\\n\\n    function setVoterProxy(address _voterProxy) external;\\n\\n    function claimVePTP() external;\\n}\\n\",\"keccak256\":\"0x7827dd64a8acaed1dfaed78260b8e010b395f90f7e19614557570fae47078bc1\",\"license\":\"MIT\"},\"contracts/strategies/platypus/interfaces/IPlatypusVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport \\\"./IPlatypusVoter.sol\\\";\\n\\ninterface IPlatypusVoterProxy {\\n    function withdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _maxSlippage,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset\\n    ) external;\\n\\n    function deposit(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) external;\\n\\n    function pendingRewards(address _stakingContract, uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function poolBalance(address _stakingContract, uint256 _pid) external view returns (uint256);\\n\\n    function platypusVoter() external view returns (IPlatypusVoter);\\n\\n    function claimReward(address _stakingContract, uint256 _pid) external;\\n\\n    function approveStrategy(address _stakingContract, address _strategy) external;\\n\\n    function reinvestFeeBips() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfcc2e3d12bda9990de184c871089dad4c40fd443f968ed9d8211677bf895d938\",\"license\":\"MIT\"},\"contracts/strategies/platypus/lib/DSMath.sol\":{\"content\":\"/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\n\\nimport \\\"../../../lib/SafeMath.sol\\\";\\n\\npragma solidity 0.8.13;\\n\\nlibrary DSMath {\\n    using SafeMath for uint256;\\n\\n    uint256 public constant WAD = 10**18;\\n    uint256 public constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x.mul(y)).add((WAD.div(2)))).div(WAD);\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x.mul(WAD)).add((y.div(2)))).div(y);\\n    }\\n\\n    function reciprocal(uint256 x) internal pure returns (uint256) {\\n        return wdiv(WAD, x);\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n.mod(2) != 0 ? x : RAY;\\n\\n        for (n = n.div(2); n != 0; n = n.div(2)) {\\n            x = rmul(x, x);\\n\\n            if (n.mod(2) != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = ((x.mul(y)).add((RAY.div(2)))).div(RAY);\\n    }\\n}\\n\",\"keccak256\":\"0xc085f08f8e44b55926a40c080ed27ab856cfbc55869f775eb4b8b57b07313bb2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052600960e0819052685969656c642059616b60b81b6101009081526200002e916000919062000c35565b506040805180820190915260038082526216549560ea1b60209092019182526200005b9160019162000c35565b503480156200006957600080fd5b5060405162005a4d38038062005a4d8339810160408190526200008c9162000e01565b600680546001600160a01b03191633908117909155604051829190819060009060008051602062005a2d833981519152908290a3508051620000ce906200028f565b6020810151620000de906200031f565b6040810151620000ee90620003d6565b508a51620001049060009060208e019062000c35565b50600980546001600160a01b038c81166001600160a01b03199283168117909355600a8054831673b31f66aa3c1e785363f0875a1b74e27b85fd66c717905560c0869052600b80548316732d580f9cf2fb2d09bc411532988f2afda4e7beff17905587811660805260128054918a169190921681179091556040516371f9621160e01b81526004810192909252906371f9621190602401602060405180830381865afa158015620001b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001df919062000f73565b6001600160a01b0390811660a052601380546001600160a01b0319169186169190911790556014879055875160208901516200021e91908b906200048d565b60408801516200022e90620005ae565b6200023a600162000854565b6200024582620008fe565b60408051600080825260208201527fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234910160405180910390a1505050505050505050505062000ff4565b6006546001600160a01b03163314620002de5760405162461bcd60e51b8152602060048201819052602482015260008051602062005a0d83398151915260448201526064015b60405180910390fd5b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b6006546001600160a01b031633146200036a5760405162461bcd60e51b8152602060048201819052602482015260008051602062005a0d8339815191526044820152606401620002d5565b6127106200038960105483620009fb60201b6200229b1790919060201c565b11156200039557600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b6006546001600160a01b03163314620004215760405162461bcd60e51b8152602060048201819052602482015260008051602062005a0d8339815191526044820152606401620002d5565b6127106200044060115483620009fb60201b6200229b1790919060201c565b11156200044c57600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b600954600a54620004b99185916001600160a01b03918216911662000a10602090811b620022a717901c565b620005225760405162461bcd60e51b815260206004820152603260248201527f7377617020746f6b656e20646f6573206e6f74206d61746368206465706f73696044820152713a1030b732103932bbb0b932103a37b5b2b760711b6064820152608401620002d5565b601580546001600160a01b0319166001600160a01b0385811691909117909155600a548116908316146200057f576200057d81600a60009054906101000a90046001600160a01b03168462000a1060201b620022a71760201c565b505b601680546001600160a01b039384166001600160a01b0319918216179091556017805492909316911617905550565b6001600160a01b038116156200083557600a5460408051630dfe168160e01b815290516001600160a01b0392831692841691630dfe16819160048083019260209291908290030181865afa1580156200060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000631919062000f73565b6001600160a01b031603620006cb57806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200067f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006a5919062000f73565b601980546001600160a01b0319166001600160a01b039290921691909117905562000815565b600a546040805163d21220a760e01b815290516001600160a01b039283169284169163d21220a79160048083019260209291908290030181865afa15801562000718573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200073e919062000f73565b6001600160a01b0316036200078c57806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200067f573d6000803e3d6000fd5b60405162461bcd60e51b815260206004820152605160248201527f506c61747970757353747261746567793a3a5f7365744578747261526577617260448201527f6453776170506169722053776170207061697220646f6573206e6f7420636f6e6064820152703a30b4b7103932bbb0b932103a37b5b2b760791b608482015260a401620002d5565b601880546001600160a01b0383166001600160a01b031990911617905550565b601880546001600160a01b031990811690915560198054909116905550565b6006546001600160a01b031633146200089f5760405162461bcd60e51b8152602060048201819052602482015260008051602062005a0d8339815191526044820152606401620002d5565b600e5481151560ff909116151503620008b757600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859060200160405180910390a150565b6006546001600160a01b03163314620009495760405162461bcd60e51b8152602060048201819052602482015260008051602062005a0d8339815191526044820152606401620002d5565b6001600160a01b038116620009b05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620002d5565b6006546040516001600160a01b0380841692169060008051602062005a2d83398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b600062000a09828462000f91565b9392505050565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000a51573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a77919062000f73565b6001600160a01b0316836001600160a01b0316148062000b0c5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ad1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000af7919062000f73565b6001600160a01b0316836001600160a01b0316145b801562000c0e5750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000b53573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b79919062000f73565b6001600160a01b0316826001600160a01b0316148062000c0e5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000bd3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bf9919062000f73565b6001600160a01b0316826001600160a01b0316145b801562000c2d5750816001600160a01b0316836001600160a01b031614155b949350505050565b82805462000c439062000fb8565b90600052602060002090601f01602090048101928262000c67576000855562000cb2565b82601f1062000c8257805160ff191683800117855562000cb2565b8280016001018555821562000cb2579182015b8281111562000cb257825182559160200191906001019062000c95565b5062000cc092915062000cc4565b5090565b5b8082111562000cc0576000815560010162000cc5565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b038111828210171562000d165762000d1662000cdb565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000d475762000d4762000cdb565b604052919050565b80516001600160a01b038116811462000d6757600080fd5b919050565b60006060828403121562000d7f57600080fd5b62000d8962000cf1565b905062000d968262000d4f565b815262000da66020830162000d4f565b602082015262000db96040830162000d4f565b604082015292915050565b60006060828403121562000dd757600080fd5b62000de162000cf1565b905081518152602082015160208201526040820151604082015292915050565b60008060008060008060008060008060006101e08c8e03121562000e2457600080fd5b8b516001600160401b038082111562000e3c57600080fd5b818e0191508e601f83011262000e5157600080fd5b81518181111562000e665762000e6662000cdb565b62000e7b601f8201601f191660200162000d1c565b91508082528f602082850101111562000e9357600080fd5b60005b8181101562000eb45760208185018101518483018201520162000e96565b8181111562000ec7576000602083850101525b5050809c50505062000edc60208d0162000d4f565b995062000eec60408d0162000d4f565b985062000efd8d60608e0162000d6c565b975060c08c0151965062000f1460e08d0162000d4f565b955062000f256101008d0162000d4f565b945062000f366101208d0162000d4f565b93506101408c0151925062000f4f6101608d0162000d4f565b915062000f618d6101808e0162000dc4565b90509295989b509295989b9093969950565b60006020828403121562000f8657600080fd5b62000a098262000d4f565b6000821982111562000fb357634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168062000fcd57607f821691505b60208210810362000fee57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051614956620010b7600039600081816105b901528181610be901528181610c7e015281816112d101528181611aea0152818161297201528181612dd80152818161318d015261384801526000818161051101528181610ce401528181611b5001528181613638015281816136ba0152613da20152600081816108d601528181610bc101528181610cac015281816112a901528181611b180152818161294a01528181613165015281816138a10152613d6a01526149566000f3fe608060405234801561001057600080fd5b50600436106103d05760003560e01c80638c04166f116101ff578063bd079f551161011a578063e21ac825116100ad578063f2fde38b1161007c578063f2fde38b146108ab578063f7c618c1146108be578063fb1db278146108d1578063fdb5a03e146108f857600080fd5b8063e21ac8251461086a578063eab89a5a1461087d578063ec55688914610890578063ed24911d146108a357600080fd5b8063d505accf116100e9578063d505accf146107f8578063da09c72c1461080b578063dd62ed3e1461081e578063dd8ce4d61461085757600080fd5b8063bd079f55146107c1578063c4b24a46146107ca578063c89039c5146107d2578063cff1b6ef146107e557600080fd5b8063a1a4ddeb11610192578063ac0d31ff11610161578063ac0d31ff14610786578063b52a321f14610799578063b6b55f25146107a6578063b9e57b80146107b957600080fd5b8063a1a4ddeb1461073a578063a8ae2b7c1461074d578063a9059cbb14610760578063abff19631461077357600080fd5b806395d89b41116101ce57806395d89b41146106e557806399729ec1146106ed5780639e4e7318146107005780639f0237b11461072757600080fd5b80638c04166f146106a55780638da5cb5b146106ae578063909ac8f4146106bf5780639291d563146106d257600080fd5b80634bebd1e7116102ef5780637ae26773116102825780638432e894116102515780638432e894146106635780638980f11f146106765780638aff733d146106895780638b73e6061461069257600080fd5b80637ae26773146106155780637d882097146106285780637ecebe0014610630578063818372301461065057600080fd5b80635eaec0e4116102be5780635eaec0e4146105b457806370a08231146105db578063715018a614610604578063789139bc1461060c57600080fd5b80634bebd1e7146105725780634e77ace5146105855780634ebb7916146105985780635ea682ea146105ab57600080fd5b80632e1a7d4d1161036757806338d52e0f1161033657806338d52e0f1461050c5780633bdc6e7214610533578063483c2ef01461053c5780634a970be71461055f57600080fd5b80632e1a7d4d146104a35780632f4f21e2146104b857806330adf81f146104cb578063313ce567146104f257600080fd5b806316f0115b116103a357806316f0115b1461043557806318160ddd1461046057806320606b701461046957806323b872dd1461049057600080fd5b806306fdde03146103d557806307677111146103f3578063095ea7b31461040a5780630f23475d1461042d575b600080fd5b6103dd610900565b6040516103ea9190614335565b60405180910390f35b6103fc600f5481565b6040519081526020016103ea565b61041d61041836600461435d565b61098e565b60405190151581526020016103ea565b6103fc6109a5565b601254610448906001600160a01b031681565b6040516001600160a01b0390911681526020016103ea565b6103fc60025481565b6103fc7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61041d61049e366004614389565b610a61565b6104b66104b13660046143ca565b610b45565b005b6104b66104c636600461435d565b610dc9565b6103fc7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6104fa601281565b60405160ff90911681526020016103ea565b6104487f000000000000000000000000000000000000000000000000000000000000000081565b6103fc60075481565b61041d61054a3660046143e3565b60086020526000908152604090205460ff1681565b6104b661056d366004614416565b610dd7565b6104b66105803660046143e3565b610e89565b6104b661059336600461446b565b610fa6565b6104b66105a63660046143ca565b61104d565b6103fc60115481565b6103fc7f000000000000000000000000000000000000000000000000000000000000000081565b6103fc6105e93660046143e3565b6001600160a01b031660009081526004602052604090205490565b6104b6611107565b6103fc600d5481565b6104b6610623366004614488565b611199565b6103fc611276565b6103fc61063e3660046143e3565b60056020526000908152604090205481565b6104b661065e3660046143ca565b611347565b6104b66106713660046143e3565b6113d0565b6104b661068436600461435d565b611436565b6103fc60105481565b6104b66106a03660046143e3565b61154b565b6103fc60145481565b6006546001600160a01b0316610448565b601854610448906001600160a01b031681565b6104b66106e03660046143e3565b611706565b6103dd6117c9565b6104b66106fb3660046143ca565b6117d6565b6103fc7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104b66107353660046143e3565b611882565b601954610448906001600160a01b031681565b6104b661075b3660046143ca565b6118ec565b61041d61076e36600461435d565b611998565b6104b66107813660046143ca565b6119a5565b6104b66107943660046144c1565b611a04565b600e5461041d9060ff1681565b6104b66107b43660046143ca565b611d18565b6103fc611d22565b6103fc600c5481565b6103fc611d67565b600954610448906001600160a01b031681565b6104b66107f33660046143ca565b611d7b565b6104b66108063660046144e6565b611e0f565b600b54610448906001600160a01b031681565b6103fc61082c366004614488565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103fc6108653660046143ca565b611f22565b6104b66108783660046143ca565b611f5c565b6103fc61088b3660046143ca565b611fe5565b601354610448906001600160a01b031681565b6103fc612019565b6104b66108b93660046143e3565b6120b9565b600a54610448906001600160a01b031681565b6104487f000000000000000000000000000000000000000000000000000000000000000081565b6104b66121d9565b6000805461090d90614554565b80601f016020809104026020016040519081016040528092919081815260200182805461093990614554565b80156109865780601f1061095b57610100808354040283529160200191610986565b820191906000526020600020905b81548152906001019060200180831161096957829003601f168201915b505050505081565b600061099b3384846124bc565b5060015b92915050565b6000806109b0611276565b9050806000036109c257600091505090565b6012546009546040517f907448ed0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101849052600092919091169063907448ed90604401606060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061458e565b5090949350505050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610a9b57506000198114155b15610b2c576000610ac7856040518060600160405280602f815260200161489d602f91398491906125ca565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610b378686866125f6565b6001925050505b9392505050565b6000610b5082611fe5565b905060008111610ba75760405162461bcd60e51b815260206004820152601a60248201527f506c61747970757353747261746567793a3a776974686472617700000000000060448201526064015b60405180910390fd5b6013546040516305d38c7160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301529091169063174e31c490604401600060405180830381600087803b158015610c3457600080fd5b505af1158015610c48573d6000803e3d6000fd5b50506013546012546009546014546040517fa530882e0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152938416604482015291831660648301527f00000000000000000000000000000000000000000000000000000000000000008316608483015260a482015260c48101869052600094509116915063a530882e9060e4016020604051808303816000875af1158015610d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6a91906145c7565b600954909150610d84906001600160a01b03163383612732565b610d8e33846127c7565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a2505050565b610dd3828261289d565b5050565b6009546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b50505050610e82338661289d565b5050505050565b6006546001600160a01b03163314610ed15760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6001600160a01b03811660009081526008602052604090205460ff1615610f3a5760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610b9e565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610f6c9161229b565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610fee5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600e5481151560ff90911615150361100557600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110955760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600081116110a257600080fd5b604051339082156108fc029083906000818181858888f193505050501580156110cf573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101611042565b6006546001600160a01b0316331461114f5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146111e15760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d91906145e0565b610dd357600080fd5b6013546040517f01e1c48d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000602483015260009283929116906301e1c48d90604401602060405180830381865afa158015611323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f91906145c7565b6006546001600160a01b0316331461138f5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b600b546001600160a01b0316331461142a5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610b9e565b61143381612a5e565b50565b6006546001600160a01b0316331461147e5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6000811161148b57600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc91906145e0565b61150557600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b6006546001600160a01b031633146115935760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b60006007541161160b5760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610b9e565b6001600160a01b03811660009081526008602052604090205460ff16151560011461169e5760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610b9e565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546116cc906001612d33565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b600b546001600160a01b031633146117605760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610b9e565b600b54604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461090d90614554565b6006546001600160a01b0316331461181e5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6127106118366010548361229b90919063ffffffff16565b111561184157600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b6006546001600160a01b031633146118ca5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146119345760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b61271061194c6011548361229b90919063ffffffff16565b111561195757600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b600061099b3384846125f6565b600b546001600160a01b031633146119ff5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610b9e565b601455565b6006546001600160a01b03163314611a4c5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab991906145c7565b6013546012546009546040517f02eb6f7e0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152928316604482015290821660648201527f00000000000000000000000000000000000000000000000000000000000000008216608482015292935016906302eb6f7e9060a401600060405180830381600087803b158015611b9e57600080fd5b505af1158015611bb2573d6000803e3d6000fd5b50506009546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2591906145c7565b905083611c328284612d33565b1015611ca65760405162461bcd60e51b815260206004820152602560248201527f506c61747970757353747261746567793a3a7265736375654465706c6f79656460448201527f46756e64730000000000000000000000000000000000000000000000000000006064820152608401610b9e565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611ccf611276565b6002546040805192835260208301919091520160405180910390a1600e5460ff1615156001148015611d0357506001831515145b15611d1257611d126000610fa6565b50505050565b611433338261289d565b600080611d2d611d67565b9050600c548110611d5f57611d59612710611d5360105484612d3f90919063ffffffff16565b90612d4b565b91505090565b600091505090565b600080611d72612d57565b95945050505050565b6006546001600160a01b03163314611dc35760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b8015611dce57600080fd5b600f5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600f55565b42841015611e5f5760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610b9e565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611eac83614613565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050611f0d8882868686612feb565b611f188888886124bc565b5050505050505050565b6000611f38611f2f611276565b60025490612d3f565b600003611f43575090565b61099f611f4e611276565b600254611d53908590612d3f565b6006546001600160a01b03163314611fa45760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600d5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600d55565b6000611ff2611f2f611276565b60000361200157506000919050565b61099f600254611d53612012611276565b8590612d3f565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161204e919061462c565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146121015760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6001600160a01b03811661217d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b9e565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146122285760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610b9e565b600080600080612236612d57565b9350935093509350600c548110156122905760405162461bcd60e51b815260206004820152601a60248201527f506c61747970757353747261746567793a3a7265696e766573740000000000006044820152606401610b9e565b611d1282858561314b565b6000610b3e82846146c7565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b91906146df565b6001600160a01b0316836001600160a01b0316148061239c5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612363573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238791906146df565b6001600160a01b0316836001600160a01b0316145b80156124965750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240591906146df565b6001600160a01b0316826001600160a01b031614806124965750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561245d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248191906146df565b6001600160a01b0316826001600160a01b0316145b80156124b45750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b0383166125125760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610b9e565b6001600160a01b0382166125685760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610b9e565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600081848411156125ee5760405162461bcd60e51b8152600401610b9e9190614335565b505050900390565b6001600160a01b0382166126725760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610b9e565b6126af816040518060600160405280602e81526020016148f3602e91396001600160a01b03861660009081526004602052604090205491906125ca565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546126de908261229b565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906125bd9085815260200190565b6040516001600160a01b0383166024820152604481018290526127c290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261331f565b505050565b612804816040518060600160405280602781526020016148cc602791396001600160a01b03851660009081526004602052604090205491906125ca565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612854816040518060600160405280602781526020016148566027913960025491906125ca565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600e5460ff1615156001146128f45760405162461bcd60e51b815260206004820152601a60248201527f506c61747970757353747261746567793a3a5f6465706f7369740000000000006044820152606401610b9e565b600d54156129305760008060008061290a612d57565b9350935093509350600d548111156129275761292782858561314b565b505050506129d6565b6013546040516305d38c7160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301529091169063174e31c490604401600060405180830381600087803b1580156129bd57600080fd5b505af11580156129d1573d6000803e3d6000fd5b505050505b6009546129ee906001600160a01b0316333084613404565b60006129f982613455565b9050612a1183612a0c6108658585612d33565b613740565b612a1b82826137c4565b6001600160a01b0383167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c612a508484612d33565b604051908152602001610dbc565b6001600160a01b03811615612d1457600a54604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692841691630dfe16819160048083019260209291908290030181865afa158015612ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af691906146df565b6001600160a01b031603612b8b57806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6691906146df565b601980546001600160a01b0319166001600160a01b0392909216919091179055612cf4565b600a54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039283169284169163d21220a79160048083019260209291908290030181865afa158015612bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1491906146df565b6001600160a01b031603612c6057806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b42573d6000803e3d6000fd5b60405162461bcd60e51b815260206004820152605160248201527f506c61747970757353747261746567793a3a5f7365744578747261526577617260448201527f6453776170506169722053776170207061697220646f6573206e6f7420636f6e60648201527f7461696e2072657761726420746f6b656e000000000000000000000000000000608482015260a401610b9e565b601880546001600160a01b0383166001600160a01b031990911617905550565b601880546001600160a01b031990811690915560198054909116905550565b6000610b3e82846146fc565b6000610b3e8284614713565b6000610b3e8284614748565b6016546040516370a0823160e01b815230600482015260009182918291829182916001600160a01b0316906370a0823190602401602060405180830381865afa158015612da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcc91906145c7565b90506000806000612dfc7f000000000000000000000000000000000000000000000000000000000000000061386e565b919450925090506000612e0f858561229b565b600a546016549192506000916001600160a01b03918216911603612e335784612e58565b601654600a54601754612e589285926001600160a01b039182169290821691166139d8565b905060006001600160a01b03841615612f4e577fffffffffffffffffffffffff4ce09955c3e187ac9c0f78a5e48b1d847a0299396001600160a01b03851601612ea2575083612f4e565b6018546001600160a01b031615612f4e576019546040516370a0823160e01b8152306004820152612f28916001600160a01b0316906370a0823190602401602060405180830381865afa158015612efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2191906145c7565b869061229b565b600a54601854919650612f4b91879187916001600160a01b0391821691166139d8565b90505b600a546040516370a0823160e01b8152306004820152600091612fc79184916001600160a01b0316906370a0823190602401602060405180830381865afa158015612f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc191906145c7565b9061229b565b90506000612fd5828561229b565b949d969c50909a50929850939650505050505050565b6000612ff5612019565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561309b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906130d15750866001600160a01b0316816001600160a01b0316145b6131425760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610b9e565b50505050505050565b6013546040516305d38c7160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301529091169063174e31c490604401600060405180830381600087803b1580156131d857600080fd5b505af11580156131ec573d6000803e3d6000fd5b5050505060006132056131fe84613aa4565b859061229b565b905061321b6132148584613ae8565b829061229b565b506000613239612710611d5360115485612d3f90919063ffffffff16565b9050801561325e57600b54600a5461325e916001600160a01b03918216911683612732565b600061327b612710611d5360105486612d3f90919063ffffffff16565b9050801561329a57600a5461329a906001600160a01b03163383612732565b60006132b86132b3836132ad8787612d33565b90612d33565b613c27565b905060006132c582613455565b90506132d182826137c4565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346132fa611276565b6002546040805192835260208301919091520160405180910390a15050505050505050565b6000613374826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c4f9092919063ffffffff16565b8051909150156127c2578080602001905181019061339291906145e0565b6127c25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b9e565b6040516001600160a01b0380851660248301528316604482015260648101829052611d129085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161275e565b600061099f601260009054906101000a90046001600160a01b03166001600160a01b03166355af008a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d191906145c7565b601260009054906101000a90046001600160a01b03166001600160a01b0316637727c6556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354891906145c7565b601260009054906101000a90046001600160a01b03166001600160a01b031663a76f54d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561359b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bf91906145c7565b601260009054906101000a90046001600160a01b03166001600160a01b0316637a1c36d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363691906145c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663961be3916040518163ffffffff1660e01b8152600401602060405180830381865afa158015613694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b891906145c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373a91906145c7565b88613c5e565b60025461374d908261229b565b6002556001600160a01b038216600090815260046020526040902054613773908261229b565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906128919085815260200190565b60006137d08383612d33565b116138435760405162461bcd60e51b815260206004820152602560248201527f506c61747970757353747261746567793a3a5f7374616b654465706f7369745460448201527f6f6b656e730000000000000000000000000000000000000000000000000000006064820152608401610b9e565b610dd37f00000000000000000000000000000000000000000000000000000000000000008383613d0d565b6013546040517f6099ecb20000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490526000928392839283928392839290911690636099ecb290604401606060405180830381865afa158015613905573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613929919061475c565b9250925092506000601360009054906101000a90046001600160a01b03166001600160a01b0316638583b7fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a891906145c7565b905060006139bc612710611d538785612d3f565b90506139c88582612d33565b9993985091965091945050505050565b6000806139e58585613e10565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4d91906147a8565b5091509150866001600160a01b0316836001600160a01b031614613a6d57905b613a9888836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613e41565b98975050505050505050565b601654600a546000916001600160a01b03908116911603613ac3575090565b601654600a5460175461099f9285926001600160a01b03918216929082169116613e7e565b60008115613c1e576018546001600160a01b031615613b2d57601954600a54601854613b269285926001600160a01b03918216929082169116613e7e565b905061099f565b478015613b9d5773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613b8357600080fd5b505af1158015613b97573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b8152306004820152613c1690859073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015613bf2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ad91906145c7565b91505061099f565b50600092915050565b600a5460095460155460009261099f9285926001600160a01b03928316929182169116613e7e565b60606124b48484600085614019565b600082600003613c7057506000613d02565b6000613c7c8585614156565b9050670de0b6b3a76400008111613c97576000915050613d02565b6000613cb6613ca6868661229b565b613cb0888761229b565b90614156565b90506000613cc78b8b8b8b8761417c565b90506000613cd88c8c8c8c8761417c565b9050613cfb613ce788846141d9565b6132ad83613cf58b8b61229b565b906141d9565b9450505050505b979650505050505050565b601354600954613d2a916001600160a01b03918216911684612732565b6013546012546009546040517f529ebc7d000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152928316604482015290821660648201527f00000000000000000000000000000000000000000000000000000000000000008216608482015260a4810185905260c4810184905291169063529ebc7d9060e401600060405180830381600087803b158015613dfc57600080fd5b505af1158015613142573d6000803e3d6000fd5b600080826001600160a01b0316846001600160a01b031610613e33578284613e36565b83835b915091509250929050565b600080613e50856103e5612d3f565b90506000613e5e8285612d3f565b90506000613e7283612fc1886103e8612d3f565b9050613d028282612d4b565b600080613e8b8585613e10565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef391906147a8565b5091509150866001600160a01b0316836001600160a01b031614613f1357905b600080613f418a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613e41565b9050886001600160a01b0316856001600160a01b031614613f5e57905b613f726001600160a01b038a16888c612732565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90613fca90859085903090602481016147ed565b600060405180830381600087803b158015613fe457600080fd5b505af1158015613ff8573d6000803e3d6000fd5b50505050818111614009578161400b565b805b9a9950505050505050505050565b6060824710156140915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b9e565b6001600160a01b0385163b6140e85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9e565b600080866001600160a01b031685876040516141049190614825565b60006040518083038185875af1925050503d8060008114614141576040519150601f19603f3d011682016040523d82523d6000602084013e614146565b606091505b5091509150613d028282866141ff565b6000610b3e82611d5361416a826002612d4b565b612fc187670de0b6b3a7640000612d3f565b600082821015614197576141908483612d33565b9050611d72565b6141906141d26b033b2e3c9fd0803ce8000000611d53670de0b6b3a76400006141cc8a6141c683858b88612d3f565b90614238565b90612d3f565b8790614156565b6000610b3e670de0b6b3a7640000611d536141f5826002612d4b565b612fc18787612d3f565b6060831561420e575081610b3e565b82511561421e5782518084602001fd5b8160405162461bcd60e51b8152600401610b9e9190614335565b60006142458260026142b1565b60000361425e576b033b2e3c9fd0803ce8000000614260565b825b905061426d826002612d4b565b91505b811561099f5761428083846142bd565b925061428d8260026142b1565b1561429f5761429c81846142bd565b90505b6142aa826002612d4b565b9150614270565b6000610b3e8284614841565b6000610b3e6b033b2e3c9fd0803ce8000000611d536141f5826002612d4b565b60005b838110156142f85781810151838201526020016142e0565b83811115611d125750506000910152565b600081518084526143218160208601602086016142dd565b601f01601f19169290920160200192915050565b602081526000610b3e6020830184614309565b6001600160a01b038116811461143357600080fd5b6000806040838503121561437057600080fd5b823561437b81614348565b946020939093013593505050565b60008060006060848603121561439e57600080fd5b83356143a981614348565b925060208401356143b981614348565b929592945050506040919091013590565b6000602082840312156143dc57600080fd5b5035919050565b6000602082840312156143f557600080fd5b8135610b3e81614348565b803560ff8116811461441157600080fd5b919050565b600080600080600060a0868803121561442e57600080fd5b853594506020860135935061444560408701614400565b94979396509394606081013594506080013592915050565b801515811461143357600080fd5b60006020828403121561447d57600080fd5b8135610b3e8161445d565b6000806040838503121561449b57600080fd5b82356144a681614348565b915060208301356144b681614348565b809150509250929050565b600080604083850312156144d457600080fd5b8235915060208301356144b68161445d565b600080600080600080600060e0888a03121561450157600080fd5b873561450c81614348565b9650602088013561451c81614348565b9550604088013594506060880135935061453860808901614400565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061456857607f821691505b60208210810361458857634e487b7160e01b600052602260045260246000fd5b50919050565b6000806000606084860312156145a357600080fd5b835192506020840151915060408401516145bc8161445d565b809150509250925092565b6000602082840312156145d957600080fd5b5051919050565b6000602082840312156145f257600080fd5b8151610b3e8161445d565b634e487b7160e01b600052601160045260246000fd5b600060018201614625576146256145fd565b5060010190565b600080835481600182811c91508083168061464857607f831692505b6020808410820361466757634e487b7160e01b86526022600452602486fd5b81801561467b576001811461468c576146b9565b60ff198616895284890196506146b9565b60008a81526020902060005b868110156146b15781548b820152908501908301614698565b505084890196505b509498975050505050505050565b600082198211156146da576146da6145fd565b500190565b6000602082840312156146f157600080fd5b8151610b3e81614348565b60008282101561470e5761470e6145fd565b500390565b600081600019048311821515161561472d5761472d6145fd565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261475757614757614732565b500490565b60008060006060848603121561477157600080fd5b835192506020840151915060408401516145bc81614348565b80516dffffffffffffffffffffffffffff8116811461441157600080fd5b6000806000606084860312156147bd57600080fd5b6147c68461478a565b92506147d46020850161478a565b9150604084015163ffffffff811681146145bc57600080fd5b8481528360208201526001600160a01b038316604082015260806060820152600061481b6080830184614309565b9695505050505050565b600082516148378184602087016142dd565b9190910192915050565b60008261485057614850614732565b50069056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220577c1087d627e4b3867af598f5a0f1858d919da64de31d2cd9a5960a74750a6764736f6c634300080d00334f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103d05760003560e01c80638c04166f116101ff578063bd079f551161011a578063e21ac825116100ad578063f2fde38b1161007c578063f2fde38b146108ab578063f7c618c1146108be578063fb1db278146108d1578063fdb5a03e146108f857600080fd5b8063e21ac8251461086a578063eab89a5a1461087d578063ec55688914610890578063ed24911d146108a357600080fd5b8063d505accf116100e9578063d505accf146107f8578063da09c72c1461080b578063dd62ed3e1461081e578063dd8ce4d61461085757600080fd5b8063bd079f55146107c1578063c4b24a46146107ca578063c89039c5146107d2578063cff1b6ef146107e557600080fd5b8063a1a4ddeb11610192578063ac0d31ff11610161578063ac0d31ff14610786578063b52a321f14610799578063b6b55f25146107a6578063b9e57b80146107b957600080fd5b8063a1a4ddeb1461073a578063a8ae2b7c1461074d578063a9059cbb14610760578063abff19631461077357600080fd5b806395d89b41116101ce57806395d89b41146106e557806399729ec1146106ed5780639e4e7318146107005780639f0237b11461072757600080fd5b80638c04166f146106a55780638da5cb5b146106ae578063909ac8f4146106bf5780639291d563146106d257600080fd5b80634bebd1e7116102ef5780637ae26773116102825780638432e894116102515780638432e894146106635780638980f11f146106765780638aff733d146106895780638b73e6061461069257600080fd5b80637ae26773146106155780637d882097146106285780637ecebe0014610630578063818372301461065057600080fd5b80635eaec0e4116102be5780635eaec0e4146105b457806370a08231146105db578063715018a614610604578063789139bc1461060c57600080fd5b80634bebd1e7146105725780634e77ace5146105855780634ebb7916146105985780635ea682ea146105ab57600080fd5b80632e1a7d4d1161036757806338d52e0f1161033657806338d52e0f1461050c5780633bdc6e7214610533578063483c2ef01461053c5780634a970be71461055f57600080fd5b80632e1a7d4d146104a35780632f4f21e2146104b857806330adf81f146104cb578063313ce567146104f257600080fd5b806316f0115b116103a357806316f0115b1461043557806318160ddd1461046057806320606b701461046957806323b872dd1461049057600080fd5b806306fdde03146103d557806307677111146103f3578063095ea7b31461040a5780630f23475d1461042d575b600080fd5b6103dd610900565b6040516103ea9190614335565b60405180910390f35b6103fc600f5481565b6040519081526020016103ea565b61041d61041836600461435d565b61098e565b60405190151581526020016103ea565b6103fc6109a5565b601254610448906001600160a01b031681565b6040516001600160a01b0390911681526020016103ea565b6103fc60025481565b6103fc7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b61041d61049e366004614389565b610a61565b6104b66104b13660046143ca565b610b45565b005b6104b66104c636600461435d565b610dc9565b6103fc7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6104fa601281565b60405160ff90911681526020016103ea565b6104487f000000000000000000000000000000000000000000000000000000000000000081565b6103fc60075481565b61041d61054a3660046143e3565b60086020526000908152604090205460ff1681565b6104b661056d366004614416565b610dd7565b6104b66105803660046143e3565b610e89565b6104b661059336600461446b565b610fa6565b6104b66105a63660046143ca565b61104d565b6103fc60115481565b6103fc7f000000000000000000000000000000000000000000000000000000000000000081565b6103fc6105e93660046143e3565b6001600160a01b031660009081526004602052604090205490565b6104b6611107565b6103fc600d5481565b6104b6610623366004614488565b611199565b6103fc611276565b6103fc61063e3660046143e3565b60056020526000908152604090205481565b6104b661065e3660046143ca565b611347565b6104b66106713660046143e3565b6113d0565b6104b661068436600461435d565b611436565b6103fc60105481565b6104b66106a03660046143e3565b61154b565b6103fc60145481565b6006546001600160a01b0316610448565b601854610448906001600160a01b031681565b6104b66106e03660046143e3565b611706565b6103dd6117c9565b6104b66106fb3660046143ca565b6117d6565b6103fc7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b6104b66107353660046143e3565b611882565b601954610448906001600160a01b031681565b6104b661075b3660046143ca565b6118ec565b61041d61076e36600461435d565b611998565b6104b66107813660046143ca565b6119a5565b6104b66107943660046144c1565b611a04565b600e5461041d9060ff1681565b6104b66107b43660046143ca565b611d18565b6103fc611d22565b6103fc600c5481565b6103fc611d67565b600954610448906001600160a01b031681565b6104b66107f33660046143ca565b611d7b565b6104b66108063660046144e6565b611e0f565b600b54610448906001600160a01b031681565b6103fc61082c366004614488565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6103fc6108653660046143ca565b611f22565b6104b66108783660046143ca565b611f5c565b6103fc61088b3660046143ca565b611fe5565b601354610448906001600160a01b031681565b6103fc612019565b6104b66108b93660046143e3565b6120b9565b600a54610448906001600160a01b031681565b6104487f000000000000000000000000000000000000000000000000000000000000000081565b6104b66121d9565b6000805461090d90614554565b80601f016020809104026020016040519081016040528092919081815260200182805461093990614554565b80156109865780601f1061095b57610100808354040283529160200191610986565b820191906000526020600020905b81548152906001019060200180831161096957829003601f168201915b505050505081565b600061099b3384846124bc565b5060015b92915050565b6000806109b0611276565b9050806000036109c257600091505090565b6012546009546040517f907448ed0000000000000000000000000000000000000000000000000000000081526001600160a01b03918216600482015260248101849052600092919091169063907448ed90604401606060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a57919061458e565b5090949350505050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610a9b57506000198114155b15610b2c576000610ac7856040518060600160405280602f815260200161489d602f91398491906125ca565b6001600160a01b038881166000818152600360209081526040808320948916808452948252918290208590559051848152939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b610b378686866125f6565b6001925050505b9392505050565b6000610b5082611fe5565b905060008111610ba75760405162461bcd60e51b815260206004820152601a60248201527f506c61747970757353747261746567793a3a776974686472617700000000000060448201526064015b60405180910390fd5b6013546040516305d38c7160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301529091169063174e31c490604401600060405180830381600087803b158015610c3457600080fd5b505af1158015610c48573d6000803e3d6000fd5b50506013546012546009546014546040517fa530882e0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152938416604482015291831660648301527f00000000000000000000000000000000000000000000000000000000000000008316608483015260a482015260c48101869052600094509116915063a530882e9060e4016020604051808303816000875af1158015610d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6a91906145c7565b600954909150610d84906001600160a01b03163383612732565b610d8e33846127c7565b60405182815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364906020015b60405180910390a2505050565b610dd3828261289d565b5050565b6009546040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526064810186905260ff8516608482015260a4810184905260c481018390526001600160a01b039091169063d505accf9060e401600060405180830381600087803b158015610e6057600080fd5b505af1158015610e74573d6000803e3d6000fd5b50505050610e82338661289d565b5050505050565b6006546001600160a01b03163314610ed15760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6001600160a01b03811660009081526008602052604090205460ff1615610f3a5760405162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f72000000006044820152606401610b9e565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610f6c9161229b565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6006546001600160a01b03163314610fee5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600e5481151560ff90911615150361100557600080fd5b600e805460ff19168215159081179091556040519081527f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85906020015b60405180910390a150565b6006546001600160a01b031633146110955760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600081116110a257600080fd5b604051339082156108fc029083906000818181858888f193505050501580156110cf573d6000803e3d6000fd5b506040805160008152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa289101611042565b6006546001600160a01b0316331461114f5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600680546001600160a01b0319169055565b6006546001600160a01b031633146111e15760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301526000602483015283169063095ea7b3906044016020604051808303816000875af1158015611249573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126d91906145e0565b610dd357600080fd5b6013546040517f01e1c48d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f0000000000000000000000000000000000000000000000000000000000000000602483015260009283929116906301e1c48d90604401602060405180830381865afa158015611323573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099f91906145c7565b6006546001600160a01b0316331461138f5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600c5460408051918252602082018390527f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100910160405180910390a1600c55565b600b546001600160a01b0316331461142a5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610b9e565b61143381612a5e565b50565b6006546001600160a01b0316331461147e5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6000811161148b57600080fd5b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156114d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fc91906145e0565b61150557600080fd5b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b6006546001600160a01b031633146115935760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b60006007541161160b5760405162461bcd60e51b815260206004820152603460248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f20616c6c6f776564206465706f7369746f72730000000000000000000000006064820152608401610b9e565b6001600160a01b03811660009081526008602052604090205460ff16151560011461169e5760405162461bcd60e51b815260206004820152602a60248201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60448201527f6f7420616c6c6f776564000000000000000000000000000000000000000000006064820152608401610b9e565b6001600160a01b0381166000908152600860205260409020805460ff191690556007546116cc906001612d33565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b600b546001600160a01b031633146117605760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610b9e565b600b54604080516001600160a01b03928316815291831660208301527fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00910160405180910390a1600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001805461090d90614554565b6006546001600160a01b0316331461181e5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6127106118366010548361229b90919063ffffffff16565b111561184157600080fd5b60115460408051918252602082018390527f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131910160405180910390a1601155565b6006546001600160a01b031633146118ca5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b601380546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031633146119345760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b61271061194c6011548361229b90919063ffffffff16565b111561195757600080fd5b60105460408051918252602082018390527fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2910160405180910390a1601055565b600061099b3384846125f6565b600b546001600160a01b031633146119ff5760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c794465760000000000000000000000006044820152606401610b9e565b601455565b6006546001600160a01b03163314611a4c5760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6009546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab991906145c7565b6013546012546009546040517f02eb6f7e0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152928316604482015290821660648201527f00000000000000000000000000000000000000000000000000000000000000008216608482015292935016906302eb6f7e9060a401600060405180830381600087803b158015611b9e57600080fd5b505af1158015611bb2573d6000803e3d6000fd5b50506009546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2591906145c7565b905083611c328284612d33565b1015611ca65760405162461bcd60e51b815260206004820152602560248201527f506c61747970757353747261746567793a3a7265736375654465706c6f79656460448201527f46756e64730000000000000000000000000000000000000000000000000000006064820152608401610b9e565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611ccf611276565b6002546040805192835260208301919091520160405180910390a1600e5460ff1615156001148015611d0357506001831515145b15611d1257611d126000610fa6565b50505050565b611433338261289d565b600080611d2d611d67565b9050600c548110611d5f57611d59612710611d5360105484612d3f90919063ffffffff16565b90612d4b565b91505090565b600091505090565b600080611d72612d57565b95945050505050565b6006546001600160a01b03163314611dc35760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b8015611dce57600080fd5b600f5460408051918252602082018390527f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a910160405180910390a1600f55565b42841015611e5f5760405162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a6578706972656400000000000000000000000000000000006044820152606401610b9e565b6001600160a01b038716600090815260056020526040812080547f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9918a918a918a919086611eac83614613565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e001604051602081830303815290604052805190602001209050611f0d8882868686612feb565b611f188888886124bc565b5050505050505050565b6000611f38611f2f611276565b60025490612d3f565b600003611f43575090565b61099f611f4e611276565b600254611d53908590612d3f565b6006546001600160a01b03163314611fa45760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b600d5460408051918252602082018390527fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f910160405180910390a1600d55565b6000611ff2611f2f611276565b60000361200157506000919050565b61099f600254611d53612012611276565b8590612d3f565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405161204e919061462c565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc646604080516020810195909552840192909252606083015260808201523060a082015260c00160405160208183030381529060405280519060200120905090565b6006546001600160a01b031633146121015760405162461bcd60e51b8152602060048201819052602482015260008051602061487d8339815191526044820152606401610b9e565b6001600160a01b03811661217d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610b9e565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b3233146122285760405162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f410000000000000000000000006044820152606401610b9e565b600080600080612236612d57565b9350935093509350600c548110156122905760405162461bcd60e51b815260206004820152601a60248201527f506c61747970757353747261746567793a3a7265696e766573740000000000006044820152606401610b9e565b611d1282858561314b565b6000610b3e82846146c7565b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b91906146df565b6001600160a01b0316836001600160a01b0316148061239c5750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612363573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238791906146df565b6001600160a01b0316836001600160a01b0316145b80156124965750836001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240591906146df565b6001600160a01b0316826001600160a01b031614806124965750836001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561245d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248191906146df565b6001600160a01b0316826001600160a01b0316145b80156124b45750816001600160a01b0316836001600160a01b031614155b949350505050565b6001600160a01b0383166125125760405162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f2061646472657373000000006044820152606401610b9e565b6001600160a01b0382166125685760405162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f206164647265737300006044820152606401610b9e565b6001600160a01b0383811660008181526003602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b600081848411156125ee5760405162461bcd60e51b8152600401610b9e9190614335565b505050900390565b6001600160a01b0382166126725760405162461bcd60e51b815260206004820152603460248201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260448201527f20746f20746865207a65726f20616464726573730000000000000000000000006064820152608401610b9e565b6126af816040518060600160405280602e81526020016148f3602e91396001600160a01b03861660009081526004602052604090205491906125ca565b6001600160a01b0380851660009081526004602052604080822093909355908416815220546126de908261229b565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906125bd9085815260200190565b6040516001600160a01b0383166024820152604481018290526127c290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261331f565b505050565b612804816040518060600160405280602781526020016148cc602791396001600160a01b03851660009081526004602052604090205491906125ca565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612854816040518060600160405280602781526020016148566027913960025491906125ca565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600e5460ff1615156001146128f45760405162461bcd60e51b815260206004820152601a60248201527f506c61747970757353747261746567793a3a5f6465706f7369740000000000006044820152606401610b9e565b600d54156129305760008060008061290a612d57565b9350935093509350600d548111156129275761292782858561314b565b505050506129d6565b6013546040516305d38c7160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301529091169063174e31c490604401600060405180830381600087803b1580156129bd57600080fd5b505af11580156129d1573d6000803e3d6000fd5b505050505b6009546129ee906001600160a01b0316333084613404565b60006129f982613455565b9050612a1183612a0c6108658585612d33565b613740565b612a1b82826137c4565b6001600160a01b0383167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c612a508484612d33565b604051908152602001610dbc565b6001600160a01b03811615612d1457600a54604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831692841691630dfe16819160048083019260209291908290030181865afa158015612ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612af691906146df565b6001600160a01b031603612b8b57806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b6691906146df565b601980546001600160a01b0319166001600160a01b0392909216919091179055612cf4565b600a54604080517fd21220a700000000000000000000000000000000000000000000000000000000815290516001600160a01b039283169284169163d21220a79160048083019260209291908290030181865afa158015612bf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1491906146df565b6001600160a01b031603612c6057806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b42573d6000803e3d6000fd5b60405162461bcd60e51b815260206004820152605160248201527f506c61747970757353747261746567793a3a5f7365744578747261526577617260448201527f6453776170506169722053776170207061697220646f6573206e6f7420636f6e60648201527f7461696e2072657761726420746f6b656e000000000000000000000000000000608482015260a401610b9e565b601880546001600160a01b0383166001600160a01b031990911617905550565b601880546001600160a01b031990811690915560198054909116905550565b6000610b3e82846146fc565b6000610b3e8284614713565b6000610b3e8284614748565b6016546040516370a0823160e01b815230600482015260009182918291829182916001600160a01b0316906370a0823190602401602060405180830381865afa158015612da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dcc91906145c7565b90506000806000612dfc7f000000000000000000000000000000000000000000000000000000000000000061386e565b919450925090506000612e0f858561229b565b600a546016549192506000916001600160a01b03918216911603612e335784612e58565b601654600a54601754612e589285926001600160a01b039182169290821691166139d8565b905060006001600160a01b03841615612f4e577fffffffffffffffffffffffff4ce09955c3e187ac9c0f78a5e48b1d847a0299396001600160a01b03851601612ea2575083612f4e565b6018546001600160a01b031615612f4e576019546040516370a0823160e01b8152306004820152612f28916001600160a01b0316906370a0823190602401602060405180830381865afa158015612efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2191906145c7565b869061229b565b600a54601854919650612f4b91879187916001600160a01b0391821691166139d8565b90505b600a546040516370a0823160e01b8152306004820152600091612fc79184916001600160a01b0316906370a0823190602401602060405180830381865afa158015612f9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc191906145c7565b9061229b565b90506000612fd5828561229b565b949d969c50909a50929850939650505050505050565b6000612ff5612019565b6040517f1901000000000000000000000000000000000000000000000000000000000000602082015260228101919091526042810186905260620160408051601f198184030181528282528051602091820120600080855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa15801561309b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906130d15750866001600160a01b0316816001600160a01b0316145b6131425760405162461bcd60e51b8152602060048201526024808201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160448201527f74757265000000000000000000000000000000000000000000000000000000006064820152608401610b9e565b50505050505050565b6013546040516305d38c7160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301527f000000000000000000000000000000000000000000000000000000000000000060248301529091169063174e31c490604401600060405180830381600087803b1580156131d857600080fd5b505af11580156131ec573d6000803e3d6000fd5b5050505060006132056131fe84613aa4565b859061229b565b905061321b6132148584613ae8565b829061229b565b506000613239612710611d5360115485612d3f90919063ffffffff16565b9050801561325e57600b54600a5461325e916001600160a01b03918216911683612732565b600061327b612710611d5360105486612d3f90919063ffffffff16565b9050801561329a57600a5461329a906001600160a01b03163383612732565b60006132b86132b3836132ad8787612d33565b90612d33565b613c27565b905060006132c582613455565b90506132d182826137c4565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346132fa611276565b6002546040805192835260208301919091520160405180910390a15050505050505050565b6000613374826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613c4f9092919063ffffffff16565b8051909150156127c2578080602001905181019061339291906145e0565b6127c25760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b9e565b6040516001600160a01b0380851660248301528316604482015260648101829052611d129085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161275e565b600061099f601260009054906101000a90046001600160a01b03166001600160a01b03166355af008a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134d191906145c7565b601260009054906101000a90046001600160a01b03166001600160a01b0316637727c6556040518163ffffffff1660e01b8152600401602060405180830381865afa158015613524573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061354891906145c7565b601260009054906101000a90046001600160a01b03166001600160a01b031663a76f54d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561359b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bf91906145c7565b601260009054906101000a90046001600160a01b03166001600160a01b0316637a1c36d16040518163ffffffff1660e01b8152600401602060405180830381865afa158015613612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363691906145c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663961be3916040518163ffffffff1660e01b8152600401602060405180830381865afa158015613694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b891906145c7565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663705727b56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061373a91906145c7565b88613c5e565b60025461374d908261229b565b6002556001600160a01b038216600090815260046020526040902054613773908261229b565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906128919085815260200190565b60006137d08383612d33565b116138435760405162461bcd60e51b815260206004820152602560248201527f506c61747970757353747261746567793a3a5f7374616b654465706f7369745460448201527f6f6b656e730000000000000000000000000000000000000000000000000000006064820152608401610b9e565b610dd37f00000000000000000000000000000000000000000000000000000000000000008383613d0d565b6013546040517f6099ecb20000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490526000928392839283928392839290911690636099ecb290604401606060405180830381865afa158015613905573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613929919061475c565b9250925092506000601360009054906101000a90046001600160a01b03166001600160a01b0316638583b7fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139a891906145c7565b905060006139bc612710611d538785612d3f565b90506139c88582612d33565b9993985091965091945050505050565b6000806139e58585613e10565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613a29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4d91906147a8565b5091509150866001600160a01b0316836001600160a01b031614613a6d57905b613a9888836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613e41565b98975050505050505050565b601654600a546000916001600160a01b03908116911603613ac3575090565b601654600a5460175461099f9285926001600160a01b03918216929082169116613e7e565b60008115613c1e576018546001600160a01b031615613b2d57601954600a54601854613b269285926001600160a01b03918216929082169116613e7e565b905061099f565b478015613b9d5773b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613b8357600080fd5b505af1158015613b97573d6000803e3d6000fd5b50505050505b6040516370a0823160e01b8152306004820152613c1690859073b31f66aa3c1e785363f0875a1b74e27b85fd66c7906370a0823190602401602060405180830381865afa158015613bf2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132ad91906145c7565b91505061099f565b50600092915050565b600a5460095460155460009261099f9285926001600160a01b03928316929182169116613e7e565b60606124b48484600085614019565b600082600003613c7057506000613d02565b6000613c7c8585614156565b9050670de0b6b3a76400008111613c97576000915050613d02565b6000613cb6613ca6868661229b565b613cb0888761229b565b90614156565b90506000613cc78b8b8b8b8761417c565b90506000613cd88c8c8c8c8761417c565b9050613cfb613ce788846141d9565b6132ad83613cf58b8b61229b565b906141d9565b9450505050505b979650505050505050565b601354600954613d2a916001600160a01b03918216911684612732565b6013546012546009546040517f529ebc7d000000000000000000000000000000000000000000000000000000008152600481018790526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166024830152928316604482015290821660648201527f00000000000000000000000000000000000000000000000000000000000000008216608482015260a4810185905260c4810184905291169063529ebc7d9060e401600060405180830381600087803b158015613dfc57600080fd5b505af1158015613142573d6000803e3d6000fd5b600080826001600160a01b0316846001600160a01b031610613e33578284613e36565b83835b915091509250929050565b600080613e50856103e5612d3f565b90506000613e5e8285612d3f565b90506000613e7283612fc1886103e8612d3f565b9050613d028282612d4b565b600080613e8b8585613e10565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015613ecf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef391906147a8565b5091509150866001600160a01b0316836001600160a01b031614613f1357905b600080613f418a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613e41565b9050886001600160a01b0316856001600160a01b031614613f5e57905b613f726001600160a01b038a16888c612732565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f90613fca90859085903090602481016147ed565b600060405180830381600087803b158015613fe457600080fd5b505af1158015613ff8573d6000803e3d6000fd5b50505050818111614009578161400b565b805b9a9950505050505050505050565b6060824710156140915760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b9e565b6001600160a01b0385163b6140e85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b9e565b600080866001600160a01b031685876040516141049190614825565b60006040518083038185875af1925050503d8060008114614141576040519150601f19603f3d011682016040523d82523d6000602084013e614146565b606091505b5091509150613d028282866141ff565b6000610b3e82611d5361416a826002612d4b565b612fc187670de0b6b3a7640000612d3f565b600082821015614197576141908483612d33565b9050611d72565b6141906141d26b033b2e3c9fd0803ce8000000611d53670de0b6b3a76400006141cc8a6141c683858b88612d3f565b90614238565b90612d3f565b8790614156565b6000610b3e670de0b6b3a7640000611d536141f5826002612d4b565b612fc18787612d3f565b6060831561420e575081610b3e565b82511561421e5782518084602001fd5b8160405162461bcd60e51b8152600401610b9e9190614335565b60006142458260026142b1565b60000361425e576b033b2e3c9fd0803ce8000000614260565b825b905061426d826002612d4b565b91505b811561099f5761428083846142bd565b925061428d8260026142b1565b1561429f5761429c81846142bd565b90505b6142aa826002612d4b565b9150614270565b6000610b3e8284614841565b6000610b3e6b033b2e3c9fd0803ce8000000611d536141f5826002612d4b565b60005b838110156142f85781810151838201526020016142e0565b83811115611d125750506000910152565b600081518084526143218160208601602086016142dd565b601f01601f19169290920160200192915050565b602081526000610b3e6020830184614309565b6001600160a01b038116811461143357600080fd5b6000806040838503121561437057600080fd5b823561437b81614348565b946020939093013593505050565b60008060006060848603121561439e57600080fd5b83356143a981614348565b925060208401356143b981614348565b929592945050506040919091013590565b6000602082840312156143dc57600080fd5b5035919050565b6000602082840312156143f557600080fd5b8135610b3e81614348565b803560ff8116811461441157600080fd5b919050565b600080600080600060a0868803121561442e57600080fd5b853594506020860135935061444560408701614400565b94979396509394606081013594506080013592915050565b801515811461143357600080fd5b60006020828403121561447d57600080fd5b8135610b3e8161445d565b6000806040838503121561449b57600080fd5b82356144a681614348565b915060208301356144b681614348565b809150509250929050565b600080604083850312156144d457600080fd5b8235915060208301356144b68161445d565b600080600080600080600060e0888a03121561450157600080fd5b873561450c81614348565b9650602088013561451c81614348565b9550604088013594506060880135935061453860808901614400565b925060a0880135915060c0880135905092959891949750929550565b600181811c9082168061456857607f821691505b60208210810361458857634e487b7160e01b600052602260045260246000fd5b50919050565b6000806000606084860312156145a357600080fd5b835192506020840151915060408401516145bc8161445d565b809150509250925092565b6000602082840312156145d957600080fd5b5051919050565b6000602082840312156145f257600080fd5b8151610b3e8161445d565b634e487b7160e01b600052601160045260246000fd5b600060018201614625576146256145fd565b5060010190565b600080835481600182811c91508083168061464857607f831692505b6020808410820361466757634e487b7160e01b86526022600452602486fd5b81801561467b576001811461468c576146b9565b60ff198616895284890196506146b9565b60008a81526020902060005b868110156146b15781548b820152908501908301614698565b505084890196505b509498975050505050505050565b600082198211156146da576146da6145fd565b500190565b6000602082840312156146f157600080fd5b8151610b3e81614348565b60008282101561470e5761470e6145fd565b500390565b600081600019048311821515161561472d5761472d6145fd565b500290565b634e487b7160e01b600052601260045260246000fd5b60008261475757614757614732565b500490565b60008060006060848603121561477157600080fd5b835192506020840151915060408401516145bc81614348565b80516dffffffffffffffffffffffffffff8116811461441157600080fd5b6000806000606084860312156147bd57600080fd5b6147c68461478a565b92506147d46020850161478a565b9150604084015163ffffffff811681146145bc57600080fd5b8481528360208201526001600160a01b038316604082015260806060820152600061481b6080830184614309565b9695505050505050565b600082516148378184602087016142dd565b9190910192915050565b60008261485057614850614732565b50069056fe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65727472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220577c1087d627e4b3867af598f5a0f1858d919da64de31d2cd9a5960a74750a6764736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "params": {
          "amount": "Amount of tokens to deposit"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens after withdraw fee"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setExtraRewardSwapPair(address)": {
        "details": "Function name matches interface for FeeCollector"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "details": "Deprecated; Kept for compatibility",
        "params": {
          "newValue": "fee in BIPS; required to be 0"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxSwapSlippage(uint256)": {
        "details": "Function name matches interface for FeeCollector"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit tokens to receive receipt tokens"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimate recoverable balance after withdraw fee"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setExtraRewardSwapPair(address)": {
        "notice": "Update extra reward swap pair (if applicable)"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxSwapSlippage(uint256)": {
        "notice": "Update max slippage for withdrawal"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 556,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 559,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 564,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 570,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 574,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 590,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7409,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 7522,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7526,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1965,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)4869"
      },
      {
        "astId": 1968,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)4869"
      },
      {
        "astId": 1970,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1972,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1974,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1976,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1978,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1980,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 1982,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 38512,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "pool",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IPlatypusPool)41815"
      },
      {
        "astId": 38515,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "proxy",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IPlatypusVoterProxy)41972"
      },
      {
        "astId": 38517,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "maxSlippage",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 38519,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "swapPairToken",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 38523,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "poolRewardToken",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 38526,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "swapPairPoolReward",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IPair)4915"
      },
      {
        "astId": 38528,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "swapPairExtraReward",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 38530,
        "contract": "contracts/strategies/platypus/PlatypusStrategy.sol:PlatypusStrategy",
        "label": "extraToken",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)4869": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)4915": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_contract(IPlatypusPool)41815": {
        "encoding": "inplace",
        "label": "contract IPlatypusPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPlatypusVoterProxy)41972": {
        "encoding": "inplace",
        "label": "contract IPlatypusVoterProxy",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}