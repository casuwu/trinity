{
  "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rewardController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDelegator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardToken0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairToken0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minMinting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensToReinvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reinvestRewardBips",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAVAXRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
    "transactionIndex": 0,
    "gasUsed": "4996423",
    "logsBloom": "0x0000000000000000000000000000000040000000000000000488000000000000000000020000000000000000000000000000000001000001000000000020000001000000000000400000000800000000000100000000080008000000000000000000000002000000000000000000080000000000001408200000000000000040020000000000000000000002020000000804000800000000040000001000000002a00011000000040000000008000020000002c004000000000000000000080000000000000000000000000000000000000000000002000001000000020020000010020010000000000000000000000082000000000000000000000000000000",
    "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666",
    "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x000000000000000000000000c22f01ddc8010ee05574028528614634684ec29e000000000000000000000000f6ccf601bd024612aaf85440153c2df0524e4607",
        "logIndex": 1,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xC22F01ddc8010Ee05574028528614634684EC29e",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000f6ccf601bd024612aaf85440153c2df0524e4607",
          "0x000000000000000000000000c22f01ddc8010ee05574028528614634684ec29e"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 3,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 4,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 6,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x0000000000000000000000008d36c5c6947adccd25ef49ea1aac2ceacfff0bd7"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5602552,
        "transactionHash": "0x7206aaffb4821e8f905eb65f4da11443a484a2abef729274a8f2968cc10294ab",
        "address": "0xf6cCf601bd024612aAF85440153c2df0524E4607",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0x14c6c8a9225a8e06a9d008900d477f19889ec9b6f6bc96320220af7729b00666"
      }
    ],
    "blockNumber": 5602552,
    "cumulativeGasUsed": "4996423",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Banker Joe AVAX",
    "0xdc13687554205E5b89Ac783db14bb5bba4A1eDaC",
    "0xC22F01ddc8010Ee05574028528614634684EC29e",
    "0x6e84a6216eA6dACC71eE8E6b0a5B7322EEbC0fDd",
    "0x454e67025631c065d3cfad6d71e6892f74487a15",
    "0x8d36C5c6947ADCcd25Ef49Ea1aAC2ceACFff0bD7",
    "1000000000000",
    "36996",
    "10000",
    "100000000000000",
    700,
    0,
    100
  ],
  "solcInputHash": "dbad7681b6184ab8610f6e669b9e9903",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDelegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairToken0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minMinting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reinvestRewardBips\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAVAXRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Banker Joe emits rewards in AVAX and ERC20. During AVAX claim, contract becomes gas bound\",\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"amount that can be reinvested\"}},\"claimAVAXRewards()\":{\"details\":\"Contract becomes gas bound hereConditional for gas savings on repeat actionsPublic permission in case of stuck state\"},\"deposit()\":{\"details\":\"Must mint receipt tokens to `msg.sender`\"},\"deposit(uint256)\":{\"details\":\"Must mint receipt tokens to `msg.sender`\",\"params\":{\"amount\":\"deposit tokens\"}},\"depositFor(address)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Should revert for tokens without Permit\",\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"title\":\"Strategy for Banker Joe AVAX\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Returns balance available to reinvest\"},\"claimAVAXRewards()\":{\"notice\":\"Claims AVAX rewards on behalf of strategy\"},\"deposit()\":{\"notice\":\"Deposit and deploy deposits tokens to the strategy using AVAX\"},\"deposit(uint256)\":{\"notice\":\"Deposit and deploy deposits tokens to the strategy\"},\"depositFor(address)\":{\"notice\":\"Deposit on behalf of another account using AVAX\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimated deposit token balance deployed by strategy, excluding balance\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/JoeLendingStrategyAvaxV1.sol\":\"JoeLendingStrategyAvaxV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9d569919319add1e8ee2020ad24e1cba09c67094b58a40f825522d1f7729de64\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0x8ce774ed685b2fc2ad94f2aa5bc57809d1f62c6d833e2a74e9006920fc6b03b5\",\"license\":\"MIT\"},\"contracts/YakStrategyV2Payable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./YakStrategyV2.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2Payable is YakStrategyV2 {\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy using AVAX\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     */\\n    function deposit() external payable virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account using AVAX\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     */\\n    function depositFor(address account) external payable virtual;\\n\\n}\",\"keccak256\":\"0xfa1357987d17d8db1dd004ee417fd6239952719ab03e9abefec94e798bf6cc6d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeAVAXDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IJoeERC20Delegator.sol\\\";\\n\\ninterface IJoeAVAXDelegator is IJoeERC20Delegator {\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when a flashloan occured\\n     */\\n    event Flashloan(\\n        address indexed receiver,\\n        uint256 amount,\\n        uint256 totalFee,\\n        uint256 reservesFee\\n    );\\n\\n    /*** User Interface ***/\\n\\n    function mintNative() external payable returns (uint256);\\n\\n    function redeemNative(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlyingNative(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrowNative(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrowNative() external payable returns (uint256);\\n\\n    function repayBorrowBehalfNative(address borrower)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    function _addReservesNative() external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x893d3097758affbb64ae578dd422aac68608946ee27e3fab98eeee52ba462489\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeERC20Delegator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\n// https://github.com/traderjoe-xyz/joe-lending/blob/main/contracts/JCollateralCapErc20Delegator.sol\\n// Note: Unlike IERC20, this interface has no permit method.\\ninterface IJoeERC20Delegator is IERC20 {\\n    /**\\n     * @notice Sender supplies assets into the market and receives jTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender redeems jTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of jTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    /**\\n     * @notice Sender redeems jTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender borrows assets from the protocol to their own address\\n     * @param borrowAmount The amount of the underlying asset to borrow\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function repayBorrowBehalf(address borrower, uint256 repayAmount) external returns (uint256);\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this jToken to be liquidated\\n     * @param jTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    // function liquidateBorrow(address borrower, uint256 repayAmount, JTokenInterface jTokenCollateral) external returns (uint256);\\n\\n    /**\\n     * @notice Gulps excess contract cash to reserves\\n     * @dev This function calculates excess ERC20 gained from a ERC20.transfer() call and adds the excess to reserves.\\n     */\\n    function gulp() external;\\n\\n    /**\\n     * @notice Flash loan funds to a given account.\\n     * @param receiver The receiver address for the funds\\n     * @param initiator flash loan initiator\\n     * @param amount The amount of the funds to be loaned\\n     * @param data The other data\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function flashLoan(ERC3156FlashBorrowerInterface receiver, address initiator, uint256 amount, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @notice Register account collateral tokens if there is space.\\n     * @param account The account to register\\n     * @dev This function could only be called by joetroller.\\n     * @return The actual registered amount of collateral\\n     */\\n    function registerCollateral(address account) external returns (uint256);\\n\\n    /**\\n     * @notice Unregister account collateral tokens if the account still has enough collateral.\\n     * @dev This function could only be called by joetroller.\\n     * @param account The account to unregister\\n     */\\n    function unregisterCollateral(address account) external;\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) external returns (uint256);\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by joetroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) external view returns (uint256, uint256, uint256, uint256);\\n    \\n\\n    /**\\n     * @notice Returns the current per-sec borrow interest rate for this jToken\\n     * @return The borrow interest rate per sec, scaled by 1e18\\n     */\\n    function borrowRatePerSecond() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current per-sec supply interest rate for this jToken\\n     * @return The supply interest rate per sec, scaled by 1e18\\n     */\\n    function supplyRatePerSecond() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() external returns (uint256);\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the JToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    /**\\n     * @notice Get cash balance of this jToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() external view returns (uint256);\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves.\\n     * @dev This calculates interest accrued from the last checkpointed timestamp\\n     *      up to the current timestamp and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() external returns (uint256);\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another jToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed jToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of jTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint256 seizeTokens) external returns (uint256);\\n}\\n\\n// https://github.com/traderjoe-xyz/joe-lending/blob/main/contracts/ERC3156FlashBorrowerInterface.sol\\ninterface ERC3156FlashBorrowerInterface {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(address initiator, address token, uint256 amount, uint256 fee, bytes calldata data) external returns (bytes32);\\n}\",\"keccak256\":\"0x5f4c88cc50b4853b1318807aa30bdbe70b3d5f9e193f29a080c14e3518af86d4\",\"license\":\"MIT\"},\"contracts/interfaces/IJoeRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// https://github.com/traderjoe-xyz/joe-lending/blob/main/contracts/RewardDistributor.sol\\ninterface IJoeRewardDistributor {\\n    // rewardType  0 = JOE, 1 = AVAX\\n    function rewardSupplyState(uint8 rewardType, address holder)\\n        external\\n        view\\n        returns (uint224, uint32);\\n\\n    function rewardBorrowState(uint8 rewardType, address holder)\\n        external\\n        view\\n        returns (uint224, uint32);\\n\\n    function rewardSupplierIndex(\\n        uint8 rewardType,\\n        address contractAddress,\\n        address holder\\n    ) external view returns (uint256 supplierIndex);\\n\\n    function rewardBorrowerIndex(\\n        uint8 rewardType,\\n        address contractAddress,\\n        address holder\\n    ) external view returns (uint256 borrowerIndex);\\n\\n    function rewardAccrued(uint8, address) external view returns (uint256);\\n\\n    function claimReward(uint8 rewardType, address payable holder) external;\\n}\\n\",\"keccak256\":\"0x82126659d86892678f551c5f6ffbbb5ba3ff19cd8061e1a6d73054506a53d05a\",\"license\":\"MIT\"},\"contracts/interfaces/IJoetroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// https://github.com/traderjoe-xyz/joe-lending/blob/HEAD/contracts/JoetrollerInterface.sol\\ninterface IJoetroller {\\n    /*** Assets You Are In ***/\\n    function enterMarkets(address[] calldata jTokens)\\n        external\\n        returns (uint256[] memory);\\n\\n    function exitMarket(address jToken) external returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n    function mintAllowed(\\n        address jToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address jToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address jToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address jToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address jToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address jToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address jToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address jToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address jTokenBorrowed,\\n        address jTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address jTokenBorrowed,\\n        address jTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address jTokenCollateral,\\n        address jTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address jTokenCollateral,\\n        address jTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address jToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address jToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    function markets(address jToken) external view returns (bool, uint256);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n    function liquidateCalculateSeizeTokens(\\n        address jTokenBorrowed,\\n        address jTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n\\n    /*** Reward distribution functions ***/\\n    function rewardDistributor() external view returns (address);\\n\\n    function claimReward(uint8 rewardType, address holder) external; //reward type 0 is joe, 1 is avax\\n\\n    // rewardType  0 = JOE, 1 = AVAX\\n    function rewardSupplyState(uint8 rewardType, address holder)\\n        external\\n        view\\n        returns (uint224, uint32);\\n\\n    function rewardBorrowState(uint8 rewardType, address holder)\\n        external\\n        view\\n        returns (uint224, uint32);\\n\\n    function rewardSupplierIndex(\\n        uint8 rewardType,\\n        address contractAddress,\\n        address holder\\n    ) external view returns (uint256 supplierIndex);\\n\\n    function rewardBorrowerIndex(\\n        uint8 rewardType,\\n        address contractAddress,\\n        address holder\\n    ) external view returns (uint256 borrowerIndex);\\n\\n    function rewardAccrued(uint8, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9e3b4f5835b41653d39f5546247e425f49ace89bc1790a4d11b90982bfafa753\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xffc66e7958e75c670c60c085052bcbdd23b794477bf483e805d23a6f25e5ca9d\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0xf32787e609bf7d28e7ea925b3d0f4b48d8f4ebde9a7fa41e3441756394eb393c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2b4fa4eb579d1a4dab58d5a1fadc1338e2a8313707b29ec447335b9b8f2b39dc\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0xf20805a7ca92edda58e5812cf5cfe20b0f2698bbd8215af57a00e04c27ca7e3f\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/JoeLendingStrategyAvaxV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../YakStrategyV2Payable.sol\\\";\\nimport \\\"../interfaces/IJoetroller.sol\\\";\\nimport \\\"../interfaces/IJoeRewardDistributor.sol\\\";\\nimport \\\"../interfaces/IJoeAVAXDelegator.sol\\\";\\nimport \\\"../interfaces/IJoeERC20Delegator.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Strategy for Banker Joe AVAX\\n * @dev Banker Joe emits rewards in AVAX and ERC20. During AVAX claim, contract becomes gas bound\\n */\\ncontract JoeLendingStrategyAvaxV1 is YakStrategyV2Payable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n\\n    IJoetroller private rewardController;\\n    IJoeAVAXDelegator private tokenDelegator; // jAVAX\\n    IERC20 private rewardToken0; // JOE\\n    IERC20 private rewardToken1; // WAVAX\\n    IPair private swapPairToken0; // JOE-AVAX\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    uint256 private leverageLevel;\\n    uint256 private leverageBips;\\n    uint256 private minMinting;\\n\\n    constructor(\\n        string memory _name,\\n        address _rewardController,\\n        address _tokenDelegator,\\n        address _rewardToken0,\\n        address _swapPairToken0,\\n        address _timelock,\\n        uint256 _minMinting,\\n        uint256 _leverageLevel,\\n        uint256 _leverageBips,\\n        uint256 _minTokensToReinvest,\\n        uint256 _adminFeeBips,\\n        uint256 _devFeeBips,\\n        uint256 _reinvestRewardBips\\n    ) {\\n        name = _name;\\n        rewardController = IJoetroller(_rewardController);\\n        tokenDelegator = IJoeAVAXDelegator(_tokenDelegator);\\n        rewardToken0 = IERC20(_rewardToken0);\\n        rewardToken1 = IERC20(address(WAVAX));\\n        rewardToken = rewardToken1;\\n        minMinting = _minMinting;\\n        _updateLeverage(_leverageLevel, _leverageBips);\\n        devAddr = msg.sender;\\n\\n        _enterMarket();\\n\\n        assignSwapPairSafely(_swapPairToken0);\\n        setAllowances();\\n        updateMinTokensToReinvest(_minTokensToReinvest);\\n        updateAdminFee(_adminFeeBips);\\n        updateDevFee(_devFeeBips);\\n        updateReinvestReward(_reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        (\\n            ,\\n            uint256 internalBalance,\\n            uint256 borrow,\\n            uint256 exchangeRate\\n        ) = tokenDelegator.getAccountSnapshot(address(this));\\n        return internalBalance.mul(exchangeRate).div(1e18).sub(borrow);\\n    }\\n\\n    function _totalDepositsFresh() internal returns (uint256) {\\n        uint256 borrow = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 balance = tokenDelegator.balanceOfUnderlying(address(this));\\n        return balance.sub(borrow);\\n    }\\n\\n    function _enterMarket() internal {\\n        address[] memory tokens = new address[](1);\\n        tokens[0] = address(tokenDelegator);\\n        rewardController.enterMarkets(tokens);\\n    }\\n\\n    function _updateLeverage(uint256 _leverageLevel, uint256 _leverageBips) internal {\\n        leverageLevel = _leverageLevel;\\n        leverageBips = _leverageBips;\\n    }\\n\\n    function updateLeverage(uint256 _leverageLevel, uint256 _leverageBips)\\n        external\\n        onlyDev\\n    {\\n        _updateLeverage(_leverageLevel, _leverageBips);\\n        uint256 balance = _totalDepositsFresh();\\n        _unrollDebt(balance);\\n        if (balance > 0) {\\n            _rollupDebt(balance, 0);\\n        }\\n    }\\n\\n    /**\\n     * @notice Initialization helper for Pair deposit tokens\\n     * @dev Checks that selected Pairs are valid for trading deposit tokens\\n     * @dev Assigns values to swapPairToken0 and swapPairToken1\\n     */\\n    function assignSwapPairSafely(address _swapPairToken0) private {\\n        require(\\n            _swapPairToken0 > address(0),\\n            \\\"Swap pair 0 is necessary but not supplied\\\"\\n        );\\n        require(\\n            address(rewardToken0) == IPair(address(_swapPairToken0)).token0() ||\\n                address(rewardToken0) == IPair(address(_swapPairToken0)).token1(),\\n            \\\"Swap pair 0 does not match rewardToken0\\\"\\n        );\\n\\n        require(\\n            address(rewardToken1) == IPair(address(_swapPairToken0)).token0() ||\\n                address(rewardToken1) == IPair(address(_swapPairToken0)).token1(),\\n            \\\"Swap pair 0 does not match rewardToken1\\\"\\n        );\\n\\n        swapPairToken0 = IPair(_swapPairToken0);\\n    }\\n\\n    function setAllowances() public override onlyOwner {\\n        tokenDelegator.approve(address(tokenDelegator), type(uint256).max);\\n    }\\n\\n    function deposit() external payable override nonReentrant {\\n        _deposit(msg.sender, msg.value);\\n    }\\n\\n    function depositFor(address account) external payable override nonReentrant {\\n        _deposit(account, msg.value);\\n    }\\n\\n    function deposit(uint256 amount) external override {\\n        revert();\\n    }\\n\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        revert();\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        revert();\\n    }\\n\\n    function _deposit(address account, uint256 amount) private onlyAllowedDeposits {\\n        require(DEPOSITS_ENABLED == true, \\\"JoeLendingStrategyAvaxV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (uint256 joeRewards, uint256 avaxBalance, uint256 amountToReinvest) = _checkRewards();\\n            if (\\n                amountToReinvest > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\\n            ) {\\n                _reinvest(joeRewards, avaxBalance, amountToReinvest);\\n            }\\n        }\\n        uint256 shareTokenAmount = amount;\\n        uint256 balance = _totalDepositsFresh();\\n        if (totalSupply.mul(balance) > 0) {\\n            shareTokenAmount = amount.mul(totalSupply).div(balance);\\n        }\\n        _mint(account, shareTokenAmount);\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n        claimAVAXRewards();\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = _totalDepositsFresh().mul(amount).div(totalSupply);\\n        require(\\n            depositTokenAmount > minMinting,\\n            \\\"JoeLendingStrategyAvaxV1:: below minimum withdraw\\\"\\n        );\\n        _burn(msg.sender, amount);\\n        _withdrawDepositTokens(depositTokenAmount);\\n        (bool success, ) = msg.sender.call{value: depositTokenAmount}(\\\"\\\");\\n        require(success, \\\"JoeLendingStrategyAvaxV1::withdraw transfer failed\\\");\\n        emit Withdraw(msg.sender, depositTokenAmount);\\n        claimAVAXRewards();\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private {\\n        _unrollDebt(amount);\\n        require(\\n            tokenDelegator.redeemUnderlyingNative(amount) == 0,\\n            \\\"JoeLendingStrategyAvaxV1::redeem failed\\\"\\n        );\\n        uint256 balance = tokenDelegator.balanceOfUnderlying(address(this));\\n        uint256 borrow = tokenDelegator.borrowBalanceCurrent(address(this));\\n        if (balance > 0) {\\n            _rollupDebt(balance, borrow);\\n        }\\n    }\\n\\n    function reinvest() external override onlyEOA nonReentrant {\\n        (uint256 joeRewards, uint256 avaxBalance, uint256 amountToReinvest) = _checkRewards();\\n        require(\\n            amountToReinvest >= MIN_TOKENS_TO_REINVEST,\\n            \\\"JoeLendingStrategyAvaxV1::reinvest\\\"\\n        );\\n        _reinvest(joeRewards, avaxBalance, amountToReinvest);\\n        claimAVAXRewards();\\n    }\\n\\n    receive() external payable {\\n        require(\\n            msg.sender == address(rewardController) ||\\n                msg.sender == address(WAVAX) ||\\n                msg.sender == address(tokenDelegator),\\n            \\\"JoeLendingStrategyAvaxV1::payments not allowed\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `stakingContract`\\n     * @param joeRewards amount of JOE tokens to reinvest\\n     * @param avaxBalance amount of AVAX to reinvest\\n     * @param amount total amount of reward tokens to reinvest\\n     */\\n    function _reinvest(uint256 joeRewards, uint256 avaxBalance, uint256 amount) private {\\n        if (joeRewards > 0) {\\n            rewardController.claimReward(0, address(this));\\n            uint256 joeAsWavax = DexLibrary.swap(\\n                joeRewards,\\n                address(rewardToken0),\\n                address(rewardToken1),\\n                swapPairToken0\\n            );\\n            WAVAX.withdraw(joeAsWavax);\\n        }\\n\\n        uint256 fees = amount.mul(\\n            DEV_FEE_BIPS.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS)\\n        ).div(BIPS_DIVISOR);\\n        WAVAX.deposit{value: fees}();\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (adminFee > 0) {\\n            _safeTransfer(address(rewardToken), owner(), adminFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        _stakeDepositTokens(address(this).balance);\\n\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    /**\\n     * @notice Claims AVAX rewards on behalf of strategy\\n     * @dev Contract becomes gas bound here\\n     * @dev Conditional for gas savings on repeat actions\\n     * @dev Public permission in case of stuck state\\n     */\\n    function claimAVAXRewards() public {\\n        if (DEPOSITS_ENABLED == true) {\\n            if (_getReward(1, address(this)) >= MIN_TOKENS_TO_REINVEST) {\\n                rewardController.claimReward(1, address(this));\\n            }\\n        }\\n    }\\n\\n    function _rollupDebt(uint256 principal, uint256 borrowed) internal {\\n        (uint256 borrowLimit, uint256 borrowBips) = _getBorrowLimit();\\n        uint256 supplied = principal;\\n        uint256 lendTarget = principal.sub(borrowed).mul(leverageLevel).div(\\n            leverageBips\\n        );\\n        uint256 totalBorrowed = borrowed;\\n\\n        while (supplied < lendTarget) {\\n            uint256 toBorrowAmount = _getBorrowable(\\n                supplied,\\n                totalBorrowed,\\n                borrowLimit,\\n                borrowBips\\n            );\\n            if (supplied.add(toBorrowAmount) > lendTarget) {\\n                toBorrowAmount = lendTarget.sub(supplied);\\n            }\\n            // safeguard needed because we can't mint below a certain threshold\\n            if (toBorrowAmount < minMinting) {\\n                break;\\n            }\\n            require(\\n                tokenDelegator.borrowNative(toBorrowAmount) == 0,\\n                \\\"JoeLendingStrategyAvaxV1::borrowing failed\\\"\\n            );\\n            require(\\n                tokenDelegator.mintNative{value: toBorrowAmount}() == 0,\\n                \\\"JoeLendingStrategyAvaxV1::lending failed\\\"\\n            );\\n            supplied = tokenDelegator.balanceOfUnderlying(address(this));\\n            totalBorrowed = totalBorrowed.add(toBorrowAmount);\\n        }\\n    }\\n\\n    function _getBorrowable(\\n        uint256 balance,\\n        uint256 borrowed,\\n        uint256 borrowLimit,\\n        uint256 bips\\n    ) internal pure returns (uint256) {\\n        return balance.mul(borrowLimit).div(bips).sub(borrowed).mul(950).div(1000);\\n    }\\n\\n    function _getBorrowLimit() internal view returns (uint256, uint256) {\\n        (, uint256 borrowLimit) = rewardController.markets(address(tokenDelegator));\\n        return (borrowLimit, 1e18);\\n    }\\n\\n    function _unrollDebt(uint256 amountToFreeUp) internal {\\n        uint256 borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 balance = tokenDelegator.balanceOfUnderlying(address(this));\\n        (uint256 borrowLimit, uint256 borrowBips) = _getBorrowLimit();\\n        uint256 targetBorrow = balance\\n            .sub(borrowed)\\n            .sub(amountToFreeUp)\\n            .mul(leverageLevel)\\n            .div(leverageBips)\\n            .sub(balance.sub(borrowed).sub(amountToFreeUp));\\n        uint256 toRepay = borrowed.sub(targetBorrow);\\n\\n        while (toRepay > 0) {\\n            uint256 unrollAmount = _getBorrowable(\\n                balance,\\n                borrowed,\\n                borrowLimit,\\n                borrowBips\\n            );\\n            if (unrollAmount > borrowed) {\\n                unrollAmount = borrowed;\\n            }\\n            require(\\n                tokenDelegator.redeemUnderlyingNative(unrollAmount) == 0,\\n                \\\"JoeLendingStrategyAvaxV1::failed to redeem\\\"\\n            );\\n            require(\\n                tokenDelegator.repayBorrowNative{value: unrollAmount}() == 0,\\n                \\\"JoeLendingStrategyAvaxV1::failed to repay borrow\\\"\\n            );\\n            balance = tokenDelegator.balanceOfUnderlying(address(this));\\n            borrowed = borrowed.sub(unrollAmount);\\n            if (targetBorrow >= borrowed) {\\n                break;\\n            }\\n            toRepay = borrowed.sub(targetBorrow);\\n        }\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"JoeLendingStrategyAvaxV1::_stakeDepositTokens\\\");\\n        require(\\n            tokenDelegator.mintNative{value: amount}() == 0,\\n            \\\"JoeLendingStrategyAvaxV1::Deposit failed\\\"\\n        );\\n        uint256 borrowed = tokenDelegator.borrowBalanceCurrent(address(this));\\n        uint256 principal = tokenDelegator.balanceOfUnderlying(address(this));\\n        _rollupDebt(principal, borrowed);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(\\n            IERC20(token).transfer(to, value),\\n            \\\"JoeLendingStrategyAvaxV1::TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    /// @notice Returns rewards that can be reinvested\\n    function _checkRewards()\\n        internal\\n        view\\n        returns (\\n            uint256 joeRewards,\\n            uint256 avaxBalance,\\n            uint256 totalAmount\\n        )\\n    {\\n        uint256 joeRewards = _getReward(0, address(this));\\n        uint256 avaxBalance = address(this).balance;\\n\\n        uint256 joeRewardsAsWavax = DexLibrary.estimateConversionThroughPair(\\n            joeRewards,\\n            address(rewardToken0),\\n            address(rewardToken1),\\n            swapPairToken0\\n        );\\n        return (joeRewards, avaxBalance, avaxBalance.add(joeRewardsAsWavax));\\n    }\\n\\n    /**\\n     * @notice Returns balance available to reinvest\\n     * @return amount that can be reinvested\\n     */\\n    function checkReward() public view override returns (uint256) {\\n        (,, uint256 totalAmount) = _checkRewards();\\n        return totalAmount;\\n    }\\n\\n    function _getReward(uint8 tokenIndex, address account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        IJoeRewardDistributor rewardDistributor = IJoeRewardDistributor(\\n            rewardController.rewardDistributor()\\n        );\\n        (uint224 supplyIndex, ) = rewardDistributor.rewardSupplyState(\\n            tokenIndex,\\n            account\\n        );\\n        uint256 supplierIndex = rewardDistributor.rewardSupplierIndex(\\n            tokenIndex,\\n            address(tokenDelegator),\\n            account\\n        );\\n\\n        uint256 supplyIndexDelta = 0;\\n        if (supplyIndex > supplierIndex) {\\n            supplyIndexDelta = supplyIndex - supplierIndex;\\n        }\\n        (uint224 borrowIndex, ) = rewardDistributor.rewardBorrowState(\\n            tokenIndex,\\n            account\\n        );\\n        uint256 borrowerIndex = rewardDistributor.rewardBorrowerIndex(\\n            tokenIndex,\\n            address(tokenDelegator),\\n            account\\n        );\\n        uint256 borrowIndexDelta = 0;\\n        if (borrowIndex > borrowerIndex) {\\n            borrowIndexDelta = borrowIndex - borrowerIndex;\\n        }\\n        return\\n            rewardDistributor.rewardAccrued(tokenIndex, account).add(\\n                tokenDelegator.balanceOf(account).mul(supplyIndexDelta).sub(\\n                    tokenDelegator.borrowBalanceStored(account).mul(borrowIndexDelta)\\n                )\\n            );\\n    }\\n\\n    function getActualLeverage() public view returns (uint256) {\\n        (\\n            ,\\n            uint256 internalBalance,\\n            uint256 borrow,\\n            uint256 exchangeRate\\n        ) = tokenDelegator.getAccountSnapshot(address(this));\\n        uint256 balance = internalBalance.mul(exchangeRate).div(1e18);\\n        return balance.mul(1e18).div(balance.sub(borrow));\\n    }\\n\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        return totalDeposits();\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 balanceBefore = address(this).balance;\\n        uint256 balance = _totalDepositsFresh();\\n        _unrollDebt(balance);\\n        tokenDelegator.redeemUnderlying(balance);\\n        uint256 balanceAfter = address(this).balance;\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"JoeLendingStrategyAvaxV1::rescueDeployedFunds\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1ddc555cde0391273a3c9f0e4465a6cad7d5295b8112c7b20222aacc5cc52ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260096080819052685969656c642059616b60b81b60a09081526200002c916000919062000e43565b506040805180820190915260038082526216549560ea1b6020909201918252620000599160019162000e43565b503480156200006757600080fd5b5060405162005e4238038062005e4283398181016040526101a08110156200008e57600080fd5b8101908080516040519392919084640100000000821115620000af57600080fd5b908301906020820185811115620000c557600080fd5b8251640100000000811182820188101715620000e057600080fd5b82525081516020918201929091019080838360005b838110156200010f578181015183820152602001620000f5565b50505050905090810190601f1680156200013d5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c086015160e08701516101008801516101208901516101408a01516101608b0151610180909b0151999c50979a509598949793969295919490939192916000620001a56200033e565b600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062005dd4833981519152908290a35060016012819055508c600090805190602001906200020292919062000e43565b50601380546001600160a01b03808f166001600160a01b031992831617909255601480548e8416908316179055601580548d841690831617905560168054821673b31f66aa3c1e785363f0875a1b74e27b85fd66c71790819055600a80549092169216919091179055601a8790556200027c868662000342565b600b80546001600160a01b03191633179055620002986200034d565b620002a389620004fa565b620002ad620007d1565b620002b884620008c0565b620002c3836200096a565b620002ce8262000a5a565b620002d98162000b36565b620002e5600162000c12565b620002f08862000cd8565b604080516000808252602082015281517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234929181900390910190a15050505050505050505050505062000edf565b3390565b601891909155601955565b60408051600180825281830190925260609160208083019080368337505060145482519293506001600160a01b0316918391506000906200038a57fe5b6001600160a01b03928316602091820292909201810191909152601354604051631853304760e31b815260048101838152855160248301528551929094169363c299823893869391928392604490910191858101910280838360005b8381101562000400578181015183820152602001620003e6565b5050505090500192505050600060405180830381600087803b1580156200042657600080fd5b505af11580156200043b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156200046557600080fd5b81019080805160405193929190846401000000008211156200048657600080fd5b9083019060208201858111156200049c57600080fd5b8251866020820283011164010000000082111715620004ba57600080fd5b82525081516020918201928201910280838360005b83811015620004e9578181015183820152602001620004cf565b505050509050016040525050505050565b6001600160a01b038116620005415760405162461bcd60e51b815260040180806020018281038252602981526020018062005d8b6029913960400191505060405180910390fd5b806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156200057b57600080fd5b505afa15801562000590573d6000803e3d6000fd5b505050506040513d6020811015620005a757600080fd5b50516015546001600160a01b03908116911614806200063b5750806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b158015620005fb57600080fd5b505afa15801562000610573d6000803e3d6000fd5b505050506040513d60208110156200062757600080fd5b50516015546001600160a01b039081169116145b620006785760405162461bcd60e51b815260040180806020018281038252602781526020018062005e1b6027913960400191505060405180910390fd5b806001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b158015620006b257600080fd5b505afa158015620006c7573d6000803e3d6000fd5b505050506040513d6020811015620006de57600080fd5b50516016546001600160a01b0390811691161480620007725750806001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156200073257600080fd5b505afa15801562000747573d6000803e3d6000fd5b505050506040513d60208110156200075e57600080fd5b50516016546001600160a01b039081169116145b620007af5760405162461bcd60e51b815260040180806020018281038252602781526020018062005df46027913960400191505060405180910390fd5b601780546001600160a01b0319166001600160a01b0392909216919091179055565b620007db6200033e565b6001600160a01b0316620007ee62000dd2565b6001600160a01b03161462000839576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b6014546040805163095ea7b360e01b81526001600160a01b039092166004830181905260001960248401529051909163095ea7b39160448083019260209291908290030181600087803b1580156200089057600080fd5b505af1158015620008a5573d6000803e3d6000fd5b505050506040513d6020811015620008bc57600080fd5b5050565b620008ca6200033e565b6001600160a01b0316620008dd62000dd2565b6001600160a01b03161462000928576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b600c54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600c55565b620009746200033e565b6001600160a01b03166200098762000dd2565b6001600160a01b031614620009d2576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b61271062000a0c600f54620009f86011548562000de160201b620028d41790919060201c565b62000de160201b620028d41790919060201c565b111562000a1857600080fd5b601054604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601055565b62000a646200033e565b6001600160a01b031662000a7762000dd2565b6001600160a01b03161462000ac2576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b61271062000ae8600f54620009f86010548562000de160201b620028d41790919060201c565b111562000af457600080fd5b601154604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601155565b62000b406200033e565b6001600160a01b031662000b5362000dd2565b6001600160a01b03161462000b9e576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b61271062000bc4601154620009f86010548562000de160201b620028d41790919060201c565b111562000bd057600080fd5b600f54604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1600f55565b62000c1c6200033e565b6001600160a01b031662000c2f62000dd2565b6001600160a01b03161462000c7a576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b600e5460ff161515811515141562000c9157600080fd5b600e805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b62000ce26200033e565b6001600160a01b031662000cf562000dd2565b6001600160a01b03161462000d40576040805162461bcd60e51b8152602060048201819052602482015260008051602062005db4833981519152604482015290519081900360640190fd5b6001600160a01b03811662000d875760405162461bcd60e51b815260040180806020018281038252602681526020018062005d656026913960400191505060405180910390fd5b6006546040516001600160a01b0380841692169060008051602062005dd483398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b031690565b60008282018381101562000e3c576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000e8657805160ff191683800117855562000eb6565b8280016001018555821562000eb6579182015b8281111562000eb657825182559160200191906001019062000e99565b5062000ec492915062000ec8565b5090565b5b8082111562000ec4576000815560010162000ec9565b614e768062000eef6000396000f3fe6080604052600436106103905760003560e01c80638da5cb5b116101dc578063c89039c511610102578063dd62ed3e116100a0578063ed24911d1161006f578063ed24911d14610cc4578063f2fde38b14610cd9578063f7c618c114610d0c578063fdb5a03e14610d2157610413565b8063dd62ed3e14610c0b578063dd8ce4d614610c46578063e21ac82514610c70578063eab89a5a14610c9a57610413565b8063d505accf116100dc578063d505accf14610b6e578063da09c72c14610bcc578063db8dd95c14610be1578063dbd9a4d414610bf657610413565b8063c89039c514610b27578063cff1b6ef14610b3c578063d0e30db014610b6657610413565b8063a9059cbb1161017a578063b6b55f2511610149578063b6b55f2514610abe578063b9e57b8014610ae8578063bd079f5514610afd578063c4b24a4614610b1257610413565b8063a9059cbb14610a18578063aa67c91914610a51578063ac0d31ff14610a77578063b52a321f14610aa957610413565b806399729ec1116101b657806399729ec11461097f5780639e4e7318146109a9578063a24159d3146109be578063a8ae2b7c146109ee57610413565b80638da5cb5b146109065780639291d5631461093757806395d89b411461096a57610413565b80634bebd1e7116102c1578063789139bc1161025f578063818372301161022e578063818372301461085b5780638980f11f146108855780638aff733d146108be5780638b73e606146108d357610413565b8063789139bc146107c35780637ae26773146107d85780637d882097146108135780637ecebe001461082857610413565b80635b53ce101161029b5780635b53ce10146107515780635ea682ea1461076657806370a082311461077b578063715018a6146107ae57610413565b80634bebd1e7146106c85780634e77ace5146106fb5780634ebb79161461072757610413565b80632e1a7d4d1161032e578063313ce56711610308578063313ce567146106105780633bdc6e721461063b578063483c2ef0146106505780634a970be71461068357610413565b80632e1a7d4d146105985780632f4f21e2146105c257806330adf81f146105fb57610413565b80630f23475d1161036a5780630f23475d1461051657806318160ddd1461052b57806320606b701461054057806323b872dd1461055557610413565b806306fdde031461041857806307677111146104a2578063095ea7b3146104c957610413565b36610413576013546001600160a01b03163314806103c157503373b31f66aa3c1e785363f0875a1b74e27b85fd66c7145b806103d657506014546001600160a01b031633145b6104115760405162461bcd60e51b815260040180806020018281038252602e8152602001806149f3602e913960400191505060405180910390fd5b005b600080fd5b34801561042457600080fd5b5061042d610d36565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561046757818101518382015260200161044f565b50505050905090810190601f1680156104945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ae57600080fd5b506104b7610dc4565b60408051918252519081900360200190f35b3480156104d557600080fd5b50610502600480360360408110156104ec57600080fd5b506001600160a01b038135169060200135610dca565b604080519115158252519081900360200190f35b34801561052257600080fd5b506104b7610de1565b34801561053757600080fd5b506104b7610df1565b34801561054c57600080fd5b506104b7610df7565b34801561056157600080fd5b506105026004803603606081101561057857600080fd5b506001600160a01b03813581169160208101359091169060400135610e1b565b3480156105a457600080fd5b50610411600480360360208110156105bb57600080fd5b5035610efd565b3480156105ce57600080fd5b50610411600480360360408110156105e557600080fd5b506001600160a01b038135169060200135610413565b34801561060757600080fd5b506104b761103c565b34801561061c57600080fd5b50610625611060565b6040805160ff9092168252519081900360200190f35b34801561064757600080fd5b506104b7611065565b34801561065c57600080fd5b506105026004803603602081101561067357600080fd5b50356001600160a01b031661106b565b34801561068f57600080fd5b50610411600480360360a08110156106a657600080fd5b5080359060208101359060ff6040820135169060608101359060800135610413565b3480156106d457600080fd5b50610411600480360360208110156106eb57600080fd5b50356001600160a01b0316611080565b34801561070757600080fd5b506104116004803603602081101561071e57600080fd5b503515156111bc565b34801561073357600080fd5b506104116004803603602081101561074a57600080fd5b503561127b565b34801561075d57600080fd5b50610411611357565b34801561077257600080fd5b506104b76113e8565b34801561078757600080fd5b506104b76004803603602081101561079e57600080fd5b50356001600160a01b03166113ee565b3480156107ba57600080fd5b5061041161140d565b3480156107cf57600080fd5b506104b76114c6565b3480156107e457600080fd5b50610411600480360360408110156107fb57600080fd5b506001600160a01b03813581169160200135166114cc565b34801561081f57600080fd5b506104b76115bf565b34801561083457600080fd5b506104b76004803603602081101561084b57600080fd5b50356001600160a01b031661167b565b34801561086757600080fd5b506104116004803603602081101561087e57600080fd5b503561168d565b34801561089157600080fd5b50610411600480360360408110156108a857600080fd5b506001600160a01b038135169060200135611731565b3480156108ca57600080fd5b506104b7611885565b3480156108df57600080fd5b50610411600480360360208110156108f657600080fd5b50356001600160a01b031661188b565b34801561091257600080fd5b5061091b6119f2565b604080516001600160a01b039092168252519081900360200190f35b34801561094357600080fd5b506104116004803603602081101561095a57600080fd5b50356001600160a01b0316611a01565b34801561097657600080fd5b5061042d611ad7565b34801561098b57600080fd5b50610411600480360360208110156109a257600080fd5b5035611b31565b3480156109b557600080fd5b506104b7611c04565b3480156109ca57600080fd5b50610411600480360360408110156109e157600080fd5b5080359060200135611c28565b3480156109fa57600080fd5b5061041160048036036020811015610a1157600080fd5b5035611cb7565b348015610a2457600080fd5b5061050260048036036040811015610a3b57600080fd5b506001600160a01b038135169060200135611d84565b61041160048036036020811015610a6757600080fd5b50356001600160a01b0316611d91565b348015610a8357600080fd5b5061041160048036036040811015610a9a57600080fd5b50803590602001351515611e00565b348015610ab557600080fd5b50610502611fc8565b348015610aca57600080fd5b5061041160048036036020811015610ae157600080fd5b5035610413565b348015610af457600080fd5b506104b7611fd1565b348015610b0957600080fd5b506104b7612012565b348015610b1e57600080fd5b506104b7612018565b348015610b3357600080fd5b5061091b612023565b348015610b4857600080fd5b5061041160048036036020811015610b5f57600080fd5b5035612032565b6104116120ff565b348015610b7a57600080fd5b50610411600480360360e0811015610b9157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561216d565b348015610bd857600080fd5b5061091b61226d565b348015610bed57600080fd5b506104b761227c565b348015610c0257600080fd5b50610411612352565b348015610c1757600080fd5b506104b760048036036040811015610c2e57600080fd5b506001600160a01b038135811691602001351661244d565b348015610c5257600080fd5b506104b760048036036020811015610c6957600080fd5b5035612478565b348015610c7c57600080fd5b5061041160048036036020811015610c9357600080fd5b50356124b2565b348015610ca657600080fd5b506104b760048036036020811015610cbd57600080fd5b5035612556565b348015610cd057600080fd5b506104b7612587565b348015610ce557600080fd5b5061041160048036036020811015610cfc57600080fd5b50356001600160a01b0316612694565b348015610d1857600080fd5b5061091b6127a4565b348015610d2d57600080fd5b506104116127b3565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbc5780601f10610d9157610100808354040283529160200191610dbc565b820191906000526020600020905b815481529060010190602001808311610d9f57829003601f168201915b505050505081565b60105481565b6000610dd7338484612935565b5060015b92915050565b6000610deb6115bf565b90505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610e5557506000198114155b15610ee6576000610e81856040518060600160405280602f8152602001614d3d602f9139849190612a4d565b6001600160a01b0380891660008181526003602090815260408083209489168084529482529182902085905581518581529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b610ef1868686612ae4565b50600195945050505050565b6000610f1d600254610f1784610f11612bf1565b90612cff565b90612d58565b9050601a548111610f5f5760405162461bcd60e51b8152600401808060200182810382526031815260200180614cab6031913960400191505060405180910390fd5b610f693383612d9a565b610f7281612e6f565b604051600090339083908381818185875af1925050503d8060008114610fb4576040519150601f19603f3d011682016040523d82523d6000602084013e610fb9565b606091505b5050905080610ff95760405162461bcd60e51b8152600401808060200182810382526032815260200180614b656032913960400191505060405180910390fd5b60408051838152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2611037611357565b505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b611088613036565b6001600160a01b03166110996119f2565b6001600160a01b0316146110e2576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615611150576040805162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754611182916128d4565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6111c4613036565b6001600160a01b03166111d56119f2565b6001600160a01b03161461121e576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600e5460ff161515811515141561123457600080fd5b600e805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b611283613036565b6001600160a01b03166112946119f2565b6001600160a01b0316146112dd576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600081116112ea57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611317573d6000803e3d6000fd5b5060408051600081526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a150565b600e5460ff161515600114156113e657600c5461137560013061303a565b106113e65760135460408051630952c56360e01b81526001600482015230602482015290516001600160a01b0390921691630952c5639160448082019260009290919082900301818387803b1580156113cd57600080fd5b505af11580156113e1573d6000803e3d6000fd5b505050505b565b60115481565b6001600160a01b0381166000908152600460205260409020545b919050565b611415613036565b6001600160a01b03166114266119f2565b6001600160a01b03161461146f576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600d5481565b6114d4613036565b6001600160a01b03166114e56119f2565b6001600160a01b03161461152e576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b816001600160a01b031663095ea7b38260006040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050506040513d60208110156115b057600080fd5b50516115bb57600080fd5b5050565b601454604080516361bfb47160e11b815230600482015290516000928392839283926001600160a01b03169163c37f68e2916024808301926080929190829003018186803b15801561161057600080fd5b505afa158015611624573d6000803e3d6000fd5b505050506040513d608081101561163a57600080fd5b506020810151604082015160609092015190945090925090506116738261166d670de0b6b3a7640000610f178786612cff565b90613528565b935050505090565b60056020526000908152604090205481565b611695613036565b6001600160a01b03166116a66119f2565b6001600160a01b0316146116ef576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600c54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600c55565b611739613036565b6001600160a01b031661174a6119f2565b6001600160a01b031614611793576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600081116117a057600080fd5b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561180857600080fd5b505af115801561181c573d6000803e3d6000fd5b505050506040513d602081101561183257600080fd5b505161183d57600080fd5b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b600f5481565b611893613036565b6001600160a01b03166118a46119f2565b6001600160a01b0316146118ed576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b60006007541161192e5760405162461bcd60e51b8152600401808060200182810382526034815260200180614a9c6034913960400191505060405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff16151560011461198a5760405162461bcd60e51b815260040180806020018281038252602a815260200180614bc7602a913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460ff191690556007546119b8906001613528565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b03163314611a60576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b600b54604080516001600160a01b039283168152918316602083015280517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009281900390910190a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbc5780601f10610d9157610100808354040283529160200191610dbc565b611b39613036565b6001600160a01b0316611b4a6119f2565b6001600160a01b031614611b93576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b612710611bb7600f54611bb1601054856128d490919063ffffffff16565b906128d4565b1115611bc257600080fd5b601154604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600b546001600160a01b03163314611c87576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b611c91828261356a565b6000611c9b612bf1565b9050611ca681613575565b801561103757611037816000613903565b611cbf613036565b6001600160a01b0316611cd06119f2565b6001600160a01b031614611d19576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b612710611d37601154611bb1601054856128d490919063ffffffff16565b1115611d4257600080fd5b600f54604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1600f55565b6000610dd7338484612ae4565b60026012541415611de9576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002601255611df88134613b97565b506001601255565b611e08613036565b6001600160a01b0316611e196119f2565b6001600160a01b031614611e62576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b476000611e6d612bf1565b9050611e7881613575565b601454604080517f852a12e30000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163852a12e3916024808201926020929091908290030181600087803b158015611edf57600080fd5b505af1158015611ef3573d6000803e3d6000fd5b505050506040513d6020811015611f0957600080fd5b5047905084611f188285613528565b1015611f555760405162461bcd60e51b815260040180806020018281038252602d815260200180614b16602d913960400191505060405180910390fd5b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611f7e6115bf565b6002546040805192835260208301919091528051918290030190a1600e5460ff1615156001148015611fb257506001841515145b15611fc157611fc160006111bc565b5050505050565b600e5460ff1681565b600080611fdc612018565b9050600c54811061200a57612002612710610f17600f5484612cff90919063ffffffff16565b915050610dee565b600091505090565b600c5481565b600080611673613d0c565b6009546001600160a01b031681565b61203a613036565b6001600160a01b031661204b6119f2565b6001600160a01b031614612094576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6127106120b2600f54611bb1601154856128d490919063ffffffff16565b11156120bd57600080fd5b601054604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601055565b60026012541415612157576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026012556121663334613b97565b6001601255565b428410156121c2576040805162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938a1660608401526080830189905260a083019390935260c08083018890528151808403909101815260e0909201905280519101206122588882868686613d66565b612263888888612935565b5050505050505050565b600b546001600160a01b031681565b601454604080516361bfb47160e11b815230600482015290516000928392839283926001600160a01b03169163c37f68e2916024808301926080929190829003018186803b1580156122cd57600080fd5b505afa1580156122e1573d6000803e3d6000fd5b505050506040513d60808110156122f757600080fd5b506020810151604082015160609092015190945090925090506000612328670de0b6b3a7640000610f178685612cff565b90506123496123378285613528565b610f1783670de0b6b3a7640000612cff565b94505050505090565b61235a613036565b6001600160a01b031661236b6119f2565b6001600160a01b0316146123b4576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b601454604080517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039092166004830181905260001960248401529051909163095ea7b39160448083019260209291908290030181600087803b15801561242357600080fd5b505af1158015612437573d6000803e3d6000fd5b505050506040513d60208110156115bb57600080fd5b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061248e6124856115bf565b60025490612cff565b612499575080611408565b610ddb6124a46115bf565b600254610f17908590612cff565b6124ba613036565b6001600160a01b03166124cb6119f2565b6001600160a01b031614612514576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f9281900390910190a1600d55565b60006125636124856115bf565b61256f57506000611408565b610ddb600254610f176125806115bf565b8590612cff565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051808280546001816001161561010002031660029004801561260a5780601f106125e857610100808354040283529182019161260a565b820191906000526020600020905b8154815290600101906020018083116125f6575b505091505060405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b612643613e95565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61269c613036565b6001600160a01b03166126ad6119f2565b6001600160a01b0316146126f6576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6001600160a01b03811661273b5760405162461bcd60e51b8152600401808060200182810382526026815260200180614a486026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314612807576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604482015290519081900360640190fd5b6002601254141561285f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260125560008080612870613d0c565b925092509250600c548110156128b75760405162461bcd60e51b8152600401808060200182810382526022815260200180614b436022913960400191505060405180910390fd5b6128c2838383613e99565b6128ca611357565b5050600160125550565b60008282018381101561292e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038316612990576040805162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604482015290519081900360640190fd5b6001600160a01b0382166129eb576040805162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008184841115612adc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612aa1578181015183820152602001612a89565b50505050905090810190601f168015612ace5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216612b295760405162461bcd60e51b8152600401808060200182810382526034815260200180614cdc6034913960400191505060405180910390fd5b612b66816040518060600160405280602e8152602001614e13602e91396001600160a01b0386166000908152600460205260409020549190612a4d565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612b9590826128d4565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b601454604080516305eff7ef60e21b8152306004820152905160009283926001600160a01b03909116916317bfdfbc9160248082019260209290919082900301818787803b158015612c4257600080fd5b505af1158015612c56573d6000803e3d6000fd5b505050506040513d6020811015612c6c57600080fd5b505160145460408051633af9e66960e01b815230600482015290519293506000926001600160a01b0390921691633af9e6699160248082019260209290919082900301818787803b158015612cc057600080fd5b505af1158015612cd4573d6000803e3d6000fd5b505050506040513d6020811015612cea57600080fd5b50519050612cf88183613528565b9250505090565b600082612d0e57506000610ddb565b82820282848281612d1b57fe5b041461292e5760405162461bcd60e51b8152600401808060200182810382526021815260200180614c6a6021913960400191505060405180910390fd5b600061292e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061414f565b612dd781604051806060016040528060278152602001614d94602791396001600160a01b0385166000908152600460205260409020549190612a4d565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612e2781604051806060016040528060278152602001614c1b602791396002549190612a4d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b612e7881613575565b601454604080516337fdd92160e21b81526004810184905290516001600160a01b039092169163dff76484916024808201926020929091908290030181600087803b158015612ec657600080fd5b505af1158015612eda573d6000803e3d6000fd5b505050506040513d6020811015612ef057600080fd5b505115612f2e5760405162461bcd60e51b8152600401808060200182810382526027815260200180614a216027913960400191505060405180910390fd5b60145460408051633af9e66960e01b815230600482015290516000926001600160a01b031691633af9e66991602480830192602092919082900301818787803b158015612f7a57600080fd5b505af1158015612f8e573d6000803e3d6000fd5b505050506040513d6020811015612fa457600080fd5b5051601454604080516305eff7ef60e21b815230600482015290519293506000926001600160a01b03909216916317bfdfbc9160248082019260209290919082900301818787803b158015612ff857600080fd5b505af115801561300c573d6000803e3d6000fd5b505050506040513d602081101561302257600080fd5b505190508115611037576110378282613903565b3390565b600080601360009054906101000a90046001600160a01b03166001600160a01b031663acc2166a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561308b57600080fd5b505afa15801561309f573d6000803e3d6000fd5b505050506040513d60208110156130b557600080fd5b5051604080517fd81c5e4500000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b03868116602483015282519394506000939085169263d81c5e459260448082019391829003018186803b15801561312457600080fd5b505afa158015613138573d6000803e3d6000fd5b505050506040513d604081101561314e57600080fd5b5051601454604080517f88e972b800000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b03928316602482015287831660448201529051929350600092918516916388e972b891606480820192602092909190829003018186803b1580156131cd57600080fd5b505afa1580156131e1573d6000803e3d6000fd5b505050506040513d60208110156131f757600080fd5b5051905060006001600160e01b03831682101561321d5781836001600160e01b03160390505b604080517f4b3a0a7400000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b038881166024830152825160009391881692634b3a0a74926044808301939192829003018186803b15801561328857600080fd5b505afa15801561329c573d6000803e3d6000fd5b505050506040513d60408110156132b257600080fd5b5051601454604080517f7937969d00000000000000000000000000000000000000000000000000000000815260ff8c1660048201526001600160a01b0392831660248201528a83166044820152905192935060009291881691637937969d91606480820192602092909190829003018186803b15801561333157600080fd5b505afa158015613345573d6000803e3d6000fd5b505050506040513d602081101561335b57600080fd5b5051905060006001600160e01b0383168210156133815781836001600160e01b03160390505b601454604080517f95dd91930000000000000000000000000000000000000000000000000000000081526001600160a01b038c81166004830152915161351a936134909361342793879391909216916395dd9193916024808301926020929190829003018186803b1580156133f557600080fd5b505afa158015613409573d6000803e3d6000fd5b505050506040513d602081101561341f57600080fd5b505190612cff565b601454604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038f81166004830152915161166d938b9316916370a08231916024808301926020929190829003018186803b1580156133f557600080fd5b886001600160a01b03166305b9783d8d8d6040518363ffffffff1660e01b8152600401808360ff168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156134e857600080fd5b505afa1580156134fc573d6000803e3d6000fd5b505050506040513d602081101561351257600080fd5b5051906128d4565b9a9950505050505050505050565b600061292e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612a4d565b601891909155601955565b601454604080516305eff7ef60e21b815230600482015290516000926001600160a01b0316916317bfdfbc91602480830192602092919082900301818787803b1580156135c157600080fd5b505af11580156135d5573d6000803e3d6000fd5b505050506040513d60208110156135eb57600080fd5b505160145460408051633af9e66960e01b815230600482015290519293506000926001600160a01b0390921691633af9e6699160248082019260209290919082900301818787803b15801561363f57600080fd5b505af1158015613653573d6000803e3d6000fd5b505050506040513d602081101561366957600080fd5b505190506000806136786141b4565b909250905060006136b36136908761166d8789613528565b61166d601954610f17601854610f118c61166d8d8d61352890919063ffffffff16565b905060006136c18683613528565b90505b80156138fa5760006136d88688878761425e565b9050868111156136e55750855b601454604080516337fdd92160e21b81526004810184905290516001600160a01b039092169163dff76484916024808201926020929091908290030181600087803b15801561373357600080fd5b505af1158015613747573d6000803e3d6000fd5b505050506040513d602081101561375d57600080fd5b50511561379b5760405162461bcd60e51b815260040180806020018281038252602a815260200180614de9602a913960400191505060405180910390fd5b601460009054906101000a90046001600160a01b03166001600160a01b0316638d3f9c62826040518263ffffffff1660e01b81526004016020604051808303818588803b1580156137eb57600080fd5b505af11580156137ff573d6000803e3d6000fd5b50505050506040513d602081101561381657600080fd5b5051156138545760405162461bcd60e51b8152600401808060200182810382526030815260200180614b976030913960400191505060405180910390fd5b60145460408051633af9e66960e01b815230600482015290516001600160a01b0390921691633af9e669916024808201926020929091908290030181600087803b1580156138a157600080fd5b505af11580156138b5573d6000803e3d6000fd5b505050506040513d60208110156138cb57600080fd5b505195506138d98782613528565b96508683106138e857506138fa565b6138f28784613528565b9150506136c4565b50505050505050565b60008061390e6141b4565b9150915060008490506000613938601954610f17601854610f11898b61352890919063ffffffff16565b9050845b818310156138fa5760006139528483888861425e565b90508261395f85836128d4565b11156139725761396f8385613528565b90505b601a5481101561398257506138fa565b601454604080517f884b93430000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163884b9343916024808201926020929091908290030181600087803b1580156139e957600080fd5b505af11580156139fd573d6000803e3d6000fd5b505050506040513d6020811015613a1357600080fd5b505115613a515760405162461bcd60e51b815260040180806020018281038252602a815260200180614bf1602a913960400191505060405180910390fd5b601460009054906101000a90046001600160a01b03166001600160a01b031663219f2fe7826040518263ffffffff1660e01b81526004016020604051808303818588803b158015613aa157600080fd5b505af1158015613ab5573d6000803e3d6000fd5b50505050506040513d6020811015613acc57600080fd5b505115613b0a5760405162461bcd60e51b8152600401808060200182810382526028815260200180614d6c6028913960400191505060405180910390fd5b60145460408051633af9e66960e01b815230600482015290516001600160a01b0390921691633af9e669916024808201926020929091908290030181600087803b158015613b5757600080fd5b505af1158015613b6b573d6000803e3d6000fd5b505050506040513d6020811015613b8157600080fd5b50519350613b8f82826128d4565b91505061393c565b60075415613bf2573360009081526008602052604090205460ff161515600114613bf25760405162461bcd60e51b815260040180806020018281038252602e815260200180614a6e602e913960400191505060405180910390fd5b600e5460ff161515600114613c385760405162461bcd60e51b8152600401808060200182810382526022815260200180614af46022913960400191505060405180910390fd5b600d5415613c6c576000806000613c4d613d0c565b925092509250600d54811115613c6857613c68838383613e99565b5050505b806000613c77612bf1565b90506000613c9082600254612cff90919063ffffffff16565b1115613cb257613caf81610f1760025486612cff90919063ffffffff16565b91505b613cbc8483614285565b613cc583614310565b6040805184815290516001600160a01b038616917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a26113e1611357565b600080600080613d1d60003061303a565b6015546016546017549293504792600092613d4a9286926001600160a01b0392831692918216911661450a565b90508282613d5881846128d4565b955095509550505050909192565b6000613d70612587565b8560405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613e24573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590613e5a5750866001600160a01b0316816001600160a01b0316145b6138fa5760405162461bcd60e51b8152600401808060200182810382526024815260200180614ad06024913960400191505060405180910390fd5b4690565b8215613fa65760135460408051630952c56360e01b815260006004820181905230602483015291516001600160a01b0390931692630952c5639260448084019391929182900301818387803b158015613ef157600080fd5b505af1158015613f05573d6000803e3d6000fd5b505060155460165460175460009450613f30935087926001600160a01b0390811692811691166145da565b905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b50505050505b6000613fce612710610f17612580600f54611bb16010546011546128d490919063ffffffff16565b905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561401f57600080fd5b505af1158015614033573d6000803e3d6000fd5b50505050506000614055612710610f1760115486612cff90919063ffffffff16565b9050801561407a57600a54600b5461407a916001600160a01b039081169116836147e7565b6000614097612710610f1760105487612cff90919063ffffffff16565b905080156140bd57600a546140bd906001600160a01b03166140b76119f2565b836147e7565b60006140da612710610f17600f5488612cff90919063ffffffff16565b905080156140f957600a546140f9906001600160a01b031633836147e7565b61410247614310565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461412b6115bf565b6002546040805192835260208301919091528051918290030190a150505050505050565b6000818361419e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612aa1578181015183820152602001612a89565b5060008385816141aa57fe5b0495945050505050565b601354601454604080517f8e8f294b0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152815160009485948594911692638e8f294b9260248083019392829003018186803b15801561421e57600080fd5b505afa158015614232573d6000803e3d6000fd5b505050506040513d604081101561424857600080fd5b506020015193670de0b6b3a76400009350915050565b600061427c6103e8610f176103b6610f118861166d88858d8c612cff565b95945050505050565b60025461429290826128d4565b6002556001600160a01b0382166000908152600460205260409020546142b890826128d4565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000811161434f5760405162461bcd60e51b815260040180806020018281038252602d815260200180614d10602d913960400191505060405180910390fd5b601460009054906101000a90046001600160a01b03166001600160a01b031663219f2fe7826040518263ffffffff1660e01b81526004016020604051808303818588803b15801561439f57600080fd5b505af11580156143b3573d6000803e3d6000fd5b50505050506040513d60208110156143ca57600080fd5b5051156144085760405162461bcd60e51b8152600401808060200182810382526028815260200180614c426028913960400191505060405180910390fd5b601454604080516305eff7ef60e21b815230600482015290516000926001600160a01b0316916317bfdfbc91602480830192602092919082900301818787803b15801561445457600080fd5b505af1158015614468573d6000803e3d6000fd5b505050506040513d602081101561447e57600080fd5b505160145460408051633af9e66960e01b815230600482015290519293506000926001600160a01b0390921691633af9e6699160248082019260209290919082900301818787803b1580156144d257600080fd5b505af11580156144e6573d6000803e3d6000fd5b505050506040513d60208110156144fc57600080fd5b505190506110378183613903565b60008061451785856148a5565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561455657600080fd5b505afa15801561456a573d6000803e3d6000fd5b505050506040513d606081101561458057600080fd5b50805160209091015190925090506001600160a01b03838116908816146145a357905b6145ce88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff166148d6565b98975050505050505050565b6000806145e785856148a5565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561462657600080fd5b505afa15801561463a573d6000803e3d6000fd5b505050506040513d606081101561465057600080fd5b50805160209091015190925090506001600160a01b038381169088161461467357905b6000806146a18a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166148d6565b9050886001600160a01b0316856001600160a01b0316146146be57905b6146c989888c61491e565b60408051600080825260208201928390527f022c0d9f00000000000000000000000000000000000000000000000000000000835260248201858152604483018590523060648401819052608060848501908152845160a486018190526001600160a01b038e169663022c0d9f968a968a9691949193919260c486019290918190849084905b8381101561476657818101518382015260200161474e565b50505050905090810190601f1680156147935780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156147b557600080fd5b505af11580156147c9573d6000803e3d6000fd5b505050508181116147da578161351a565b9998505050505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561483e57600080fd5b505af1158015614852573d6000803e3d6000fd5b505050506040513d602081101561486857600080fd5b50516110375760405162461bcd60e51b815260040180806020018281038252602e815260200180614dbb602e913960400191505060405180910390fd5b600080826001600160a01b0316846001600160a01b0316106148c85782846148cb565b83835b915091509250929050565b6000806148e5856103e5612cff565b905060006148f38285612cff565b9050600061490783611bb1886103e8612cff565b90506149138282612d58565b979650505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561497557600080fd5b505af1158015614989573d6000803e3d6000fd5b505050506040513d602081101561499f57600080fd5b5051611037576040805162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015290519081900360640190fdfe4a6f654c656e64696e6753747261746567794176617856313a3a7061796d656e7473206e6f7420616c6c6f7765644a6f654c656e64696e6753747261746567794176617856313a3a72656465656d206661696c65644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f736974732c206e6f7420616c6c6f7765645065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f20616c6c6f776564206465706f7369746f7273417263683a3a76616c69646174655369673a20696e76616c6964207369676e61747572654a6f654c656e64696e6753747261746567794176617856313a3a5f6465706f7369744a6f654c656e64696e6753747261746567794176617856313a3a7265736375654465706c6f79656446756e64734a6f654c656e64696e6753747261746567794176617856313a3a7265696e766573744a6f654c656e64696e6753747261746567794176617856313a3a7769746864726177207472616e73666572206661696c65644a6f654c656e64696e6753747261746567794176617856313a3a6661696c656420746f20726570617920626f72726f775065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f7420616c6c6f7765644a6f654c656e64696e6753747261746567794176617856313a3a626f72726f77696e67206661696c65645f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794a6f654c656e64696e6753747261746567794176617856313a3a4465706f736974206661696c6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724a6f654c656e64696e6753747261746567794176617856313a3a2062656c6f77206d696e696d756d2077697468647261775f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573734a6f654c656e64696e6753747261746567794176617856313a3a5f7374616b654465706f736974546f6b656e737472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654a6f654c656e64696e6753747261746567794176617856313a3a6c656e64696e67206661696c65645f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63654a6f654c656e64696e6753747261746567794176617856313a3a5452414e534645525f46524f4d5f4641494c45444a6f654c656e64696e6753747261746567794176617856313a3a6661696c656420746f2072656465656d5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220575b283a0b417000070961c374d9237a7763b5596860df588b6e2924490c972664736f6c634300070300334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735377617020706169722030206973206e656365737361727920627574206e6f7420737570706c6965644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0537761702070616972203020646f6573206e6f74206d6174636820726577617264546f6b656e31537761702070616972203020646f6573206e6f74206d6174636820726577617264546f6b656e30",
  "deployedBytecode": "0x6080604052600436106103905760003560e01c80638da5cb5b116101dc578063c89039c511610102578063dd62ed3e116100a0578063ed24911d1161006f578063ed24911d14610cc4578063f2fde38b14610cd9578063f7c618c114610d0c578063fdb5a03e14610d2157610413565b8063dd62ed3e14610c0b578063dd8ce4d614610c46578063e21ac82514610c70578063eab89a5a14610c9a57610413565b8063d505accf116100dc578063d505accf14610b6e578063da09c72c14610bcc578063db8dd95c14610be1578063dbd9a4d414610bf657610413565b8063c89039c514610b27578063cff1b6ef14610b3c578063d0e30db014610b6657610413565b8063a9059cbb1161017a578063b6b55f2511610149578063b6b55f2514610abe578063b9e57b8014610ae8578063bd079f5514610afd578063c4b24a4614610b1257610413565b8063a9059cbb14610a18578063aa67c91914610a51578063ac0d31ff14610a77578063b52a321f14610aa957610413565b806399729ec1116101b657806399729ec11461097f5780639e4e7318146109a9578063a24159d3146109be578063a8ae2b7c146109ee57610413565b80638da5cb5b146109065780639291d5631461093757806395d89b411461096a57610413565b80634bebd1e7116102c1578063789139bc1161025f578063818372301161022e578063818372301461085b5780638980f11f146108855780638aff733d146108be5780638b73e606146108d357610413565b8063789139bc146107c35780637ae26773146107d85780637d882097146108135780637ecebe001461082857610413565b80635b53ce101161029b5780635b53ce10146107515780635ea682ea1461076657806370a082311461077b578063715018a6146107ae57610413565b80634bebd1e7146106c85780634e77ace5146106fb5780634ebb79161461072757610413565b80632e1a7d4d1161032e578063313ce56711610308578063313ce567146106105780633bdc6e721461063b578063483c2ef0146106505780634a970be71461068357610413565b80632e1a7d4d146105985780632f4f21e2146105c257806330adf81f146105fb57610413565b80630f23475d1161036a5780630f23475d1461051657806318160ddd1461052b57806320606b701461054057806323b872dd1461055557610413565b806306fdde031461041857806307677111146104a2578063095ea7b3146104c957610413565b36610413576013546001600160a01b03163314806103c157503373b31f66aa3c1e785363f0875a1b74e27b85fd66c7145b806103d657506014546001600160a01b031633145b6104115760405162461bcd60e51b815260040180806020018281038252602e8152602001806149f3602e913960400191505060405180910390fd5b005b600080fd5b34801561042457600080fd5b5061042d610d36565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561046757818101518382015260200161044f565b50505050905090810190601f1680156104945780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156104ae57600080fd5b506104b7610dc4565b60408051918252519081900360200190f35b3480156104d557600080fd5b50610502600480360360408110156104ec57600080fd5b506001600160a01b038135169060200135610dca565b604080519115158252519081900360200190f35b34801561052257600080fd5b506104b7610de1565b34801561053757600080fd5b506104b7610df1565b34801561054c57600080fd5b506104b7610df7565b34801561056157600080fd5b506105026004803603606081101561057857600080fd5b506001600160a01b03813581169160208101359091169060400135610e1b565b3480156105a457600080fd5b50610411600480360360208110156105bb57600080fd5b5035610efd565b3480156105ce57600080fd5b50610411600480360360408110156105e557600080fd5b506001600160a01b038135169060200135610413565b34801561060757600080fd5b506104b761103c565b34801561061c57600080fd5b50610625611060565b6040805160ff9092168252519081900360200190f35b34801561064757600080fd5b506104b7611065565b34801561065c57600080fd5b506105026004803603602081101561067357600080fd5b50356001600160a01b031661106b565b34801561068f57600080fd5b50610411600480360360a08110156106a657600080fd5b5080359060208101359060ff6040820135169060608101359060800135610413565b3480156106d457600080fd5b50610411600480360360208110156106eb57600080fd5b50356001600160a01b0316611080565b34801561070757600080fd5b506104116004803603602081101561071e57600080fd5b503515156111bc565b34801561073357600080fd5b506104116004803603602081101561074a57600080fd5b503561127b565b34801561075d57600080fd5b50610411611357565b34801561077257600080fd5b506104b76113e8565b34801561078757600080fd5b506104b76004803603602081101561079e57600080fd5b50356001600160a01b03166113ee565b3480156107ba57600080fd5b5061041161140d565b3480156107cf57600080fd5b506104b76114c6565b3480156107e457600080fd5b50610411600480360360408110156107fb57600080fd5b506001600160a01b03813581169160200135166114cc565b34801561081f57600080fd5b506104b76115bf565b34801561083457600080fd5b506104b76004803603602081101561084b57600080fd5b50356001600160a01b031661167b565b34801561086757600080fd5b506104116004803603602081101561087e57600080fd5b503561168d565b34801561089157600080fd5b50610411600480360360408110156108a857600080fd5b506001600160a01b038135169060200135611731565b3480156108ca57600080fd5b506104b7611885565b3480156108df57600080fd5b50610411600480360360208110156108f657600080fd5b50356001600160a01b031661188b565b34801561091257600080fd5b5061091b6119f2565b604080516001600160a01b039092168252519081900360200190f35b34801561094357600080fd5b506104116004803603602081101561095a57600080fd5b50356001600160a01b0316611a01565b34801561097657600080fd5b5061042d611ad7565b34801561098b57600080fd5b50610411600480360360208110156109a257600080fd5b5035611b31565b3480156109b557600080fd5b506104b7611c04565b3480156109ca57600080fd5b50610411600480360360408110156109e157600080fd5b5080359060200135611c28565b3480156109fa57600080fd5b5061041160048036036020811015610a1157600080fd5b5035611cb7565b348015610a2457600080fd5b5061050260048036036040811015610a3b57600080fd5b506001600160a01b038135169060200135611d84565b61041160048036036020811015610a6757600080fd5b50356001600160a01b0316611d91565b348015610a8357600080fd5b5061041160048036036040811015610a9a57600080fd5b50803590602001351515611e00565b348015610ab557600080fd5b50610502611fc8565b348015610aca57600080fd5b5061041160048036036020811015610ae157600080fd5b5035610413565b348015610af457600080fd5b506104b7611fd1565b348015610b0957600080fd5b506104b7612012565b348015610b1e57600080fd5b506104b7612018565b348015610b3357600080fd5b5061091b612023565b348015610b4857600080fd5b5061041160048036036020811015610b5f57600080fd5b5035612032565b6104116120ff565b348015610b7a57600080fd5b50610411600480360360e0811015610b9157600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c0013561216d565b348015610bd857600080fd5b5061091b61226d565b348015610bed57600080fd5b506104b761227c565b348015610c0257600080fd5b50610411612352565b348015610c1757600080fd5b506104b760048036036040811015610c2e57600080fd5b506001600160a01b038135811691602001351661244d565b348015610c5257600080fd5b506104b760048036036020811015610c6957600080fd5b5035612478565b348015610c7c57600080fd5b5061041160048036036020811015610c9357600080fd5b50356124b2565b348015610ca657600080fd5b506104b760048036036020811015610cbd57600080fd5b5035612556565b348015610cd057600080fd5b506104b7612587565b348015610ce557600080fd5b5061041160048036036020811015610cfc57600080fd5b50356001600160a01b0316612694565b348015610d1857600080fd5b5061091b6127a4565b348015610d2d57600080fd5b506104116127b3565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbc5780601f10610d9157610100808354040283529160200191610dbc565b820191906000526020600020905b815481529060010190602001808311610d9f57829003601f168201915b505050505081565b60105481565b6000610dd7338484612935565b5060015b92915050565b6000610deb6115bf565b90505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610e5557506000198114155b15610ee6576000610e81856040518060600160405280602f8152602001614d3d602f9139849190612a4d565b6001600160a01b0380891660008181526003602090815260408083209489168084529482529182902085905581518581529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b610ef1868686612ae4565b50600195945050505050565b6000610f1d600254610f1784610f11612bf1565b90612cff565b90612d58565b9050601a548111610f5f5760405162461bcd60e51b8152600401808060200182810382526031815260200180614cab6031913960400191505060405180910390fd5b610f693383612d9a565b610f7281612e6f565b604051600090339083908381818185875af1925050503d8060008114610fb4576040519150601f19603f3d011682016040523d82523d6000602084013e610fb9565b606091505b5050905080610ff95760405162461bcd60e51b8152600401808060200182810382526032815260200180614b656032913960400191505060405180910390fd5b60408051838152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2611037611357565b505050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b611088613036565b6001600160a01b03166110996119f2565b6001600160a01b0316146110e2576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615611150576040805162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754611182916128d4565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b6111c4613036565b6001600160a01b03166111d56119f2565b6001600160a01b03161461121e576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600e5460ff161515811515141561123457600080fd5b600e805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b611283613036565b6001600160a01b03166112946119f2565b6001600160a01b0316146112dd576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600081116112ea57600080fd5b604051339082156108fc029083906000818181858888f19350505050158015611317573d6000803e3d6000fd5b5060408051600081526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a150565b600e5460ff161515600114156113e657600c5461137560013061303a565b106113e65760135460408051630952c56360e01b81526001600482015230602482015290516001600160a01b0390921691630952c5639160448082019260009290919082900301818387803b1580156113cd57600080fd5b505af11580156113e1573d6000803e3d6000fd5b505050505b565b60115481565b6001600160a01b0381166000908152600460205260409020545b919050565b611415613036565b6001600160a01b03166114266119f2565b6001600160a01b03161461146f576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600d5481565b6114d4613036565b6001600160a01b03166114e56119f2565b6001600160a01b03161461152e576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b816001600160a01b031663095ea7b38260006040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050506040513d60208110156115b057600080fd5b50516115bb57600080fd5b5050565b601454604080516361bfb47160e11b815230600482015290516000928392839283926001600160a01b03169163c37f68e2916024808301926080929190829003018186803b15801561161057600080fd5b505afa158015611624573d6000803e3d6000fd5b505050506040513d608081101561163a57600080fd5b506020810151604082015160609092015190945090925090506116738261166d670de0b6b3a7640000610f178786612cff565b90613528565b935050505090565b60056020526000908152604090205481565b611695613036565b6001600160a01b03166116a66119f2565b6001600160a01b0316146116ef576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600c54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600c55565b611739613036565b6001600160a01b031661174a6119f2565b6001600160a01b031614611793576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600081116117a057600080fd5b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561180857600080fd5b505af115801561181c573d6000803e3d6000fd5b505050506040513d602081101561183257600080fd5b505161183d57600080fd5b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b600f5481565b611893613036565b6001600160a01b03166118a46119f2565b6001600160a01b0316146118ed576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b60006007541161192e5760405162461bcd60e51b8152600401808060200182810382526034815260200180614a9c6034913960400191505060405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff16151560011461198a5760405162461bcd60e51b815260040180806020018281038252602a815260200180614bc7602a913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460ff191690556007546119b8906001613528565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b03163314611a60576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b600b54604080516001600160a01b039283168152918316602083015280517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009281900390910190a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610dbc5780601f10610d9157610100808354040283529160200191610dbc565b611b39613036565b6001600160a01b0316611b4a6119f2565b6001600160a01b031614611b93576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b612710611bb7600f54611bb1601054856128d490919063ffffffff16565b906128d4565b1115611bc257600080fd5b601154604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b600b546001600160a01b03163314611c87576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b611c91828261356a565b6000611c9b612bf1565b9050611ca681613575565b801561103757611037816000613903565b611cbf613036565b6001600160a01b0316611cd06119f2565b6001600160a01b031614611d19576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b612710611d37601154611bb1601054856128d490919063ffffffff16565b1115611d4257600080fd5b600f54604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1600f55565b6000610dd7338484612ae4565b60026012541415611de9576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002601255611df88134613b97565b506001601255565b611e08613036565b6001600160a01b0316611e196119f2565b6001600160a01b031614611e62576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b476000611e6d612bf1565b9050611e7881613575565b601454604080517f852a12e30000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163852a12e3916024808201926020929091908290030181600087803b158015611edf57600080fd5b505af1158015611ef3573d6000803e3d6000fd5b505050506040513d6020811015611f0957600080fd5b5047905084611f188285613528565b1015611f555760405162461bcd60e51b815260040180806020018281038252602d815260200180614b16602d913960400191505060405180910390fd5b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611f7e6115bf565b6002546040805192835260208301919091528051918290030190a1600e5460ff1615156001148015611fb257506001841515145b15611fc157611fc160006111bc565b5050505050565b600e5460ff1681565b600080611fdc612018565b9050600c54811061200a57612002612710610f17600f5484612cff90919063ffffffff16565b915050610dee565b600091505090565b600c5481565b600080611673613d0c565b6009546001600160a01b031681565b61203a613036565b6001600160a01b031661204b6119f2565b6001600160a01b031614612094576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6127106120b2600f54611bb1601154856128d490919063ffffffff16565b11156120bd57600080fd5b601054604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601055565b60026012541415612157576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026012556121663334613b97565b6001601255565b428410156121c2576040805162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938a1660608401526080830189905260a083019390935260c08083018890528151808403909101815260e0909201905280519101206122588882868686613d66565b612263888888612935565b5050505050505050565b600b546001600160a01b031681565b601454604080516361bfb47160e11b815230600482015290516000928392839283926001600160a01b03169163c37f68e2916024808301926080929190829003018186803b1580156122cd57600080fd5b505afa1580156122e1573d6000803e3d6000fd5b505050506040513d60808110156122f757600080fd5b506020810151604082015160609092015190945090925090506000612328670de0b6b3a7640000610f178685612cff565b90506123496123378285613528565b610f1783670de0b6b3a7640000612cff565b94505050505090565b61235a613036565b6001600160a01b031661236b6119f2565b6001600160a01b0316146123b4576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b601454604080517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b039092166004830181905260001960248401529051909163095ea7b39160448083019260209291908290030181600087803b15801561242357600080fd5b505af1158015612437573d6000803e3d6000fd5b505050506040513d60208110156115bb57600080fd5b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061248e6124856115bf565b60025490612cff565b612499575080611408565b610ddb6124a46115bf565b600254610f17908590612cff565b6124ba613036565b6001600160a01b03166124cb6119f2565b6001600160a01b031614612514576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f9281900390910190a1600d55565b60006125636124856115bf565b61256f57506000611408565b610ddb600254610f176125806115bf565b8590612cff565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051808280546001816001161561010002031660029004801561260a5780601f106125e857610100808354040283529182019161260a565b820191906000526020600020905b8154815290600101906020018083116125f6575b505091505060405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b612643613e95565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b61269c613036565b6001600160a01b03166126ad6119f2565b6001600160a01b0316146126f6576040805162461bcd60e51b81526020600482018190526024820152600080516020614c8b833981519152604482015290519081900360640190fd5b6001600160a01b03811661273b5760405162461bcd60e51b8152600401808060200182810382526026815260200180614a486026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314612807576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604482015290519081900360640190fd5b6002601254141561285f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260125560008080612870613d0c565b925092509250600c548110156128b75760405162461bcd60e51b8152600401808060200182810382526022815260200180614b436022913960400191505060405180910390fd5b6128c2838383613e99565b6128ca611357565b5050600160125550565b60008282018381101561292e576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038316612990576040805162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604482015290519081900360640190fd5b6001600160a01b0382166129eb576040805162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b60008184841115612adc5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612aa1578181015183820152602001612a89565b50505050905090810190601f168015612ace5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216612b295760405162461bcd60e51b8152600401808060200182810382526034815260200180614cdc6034913960400191505060405180910390fd5b612b66816040518060600160405280602e8152602001614e13602e91396001600160a01b0386166000908152600460205260409020549190612a4d565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612b9590826128d4565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b601454604080516305eff7ef60e21b8152306004820152905160009283926001600160a01b03909116916317bfdfbc9160248082019260209290919082900301818787803b158015612c4257600080fd5b505af1158015612c56573d6000803e3d6000fd5b505050506040513d6020811015612c6c57600080fd5b505160145460408051633af9e66960e01b815230600482015290519293506000926001600160a01b0390921691633af9e6699160248082019260209290919082900301818787803b158015612cc057600080fd5b505af1158015612cd4573d6000803e3d6000fd5b505050506040513d6020811015612cea57600080fd5b50519050612cf88183613528565b9250505090565b600082612d0e57506000610ddb565b82820282848281612d1b57fe5b041461292e5760405162461bcd60e51b8152600401808060200182810382526021815260200180614c6a6021913960400191505060405180910390fd5b600061292e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061414f565b612dd781604051806060016040528060278152602001614d94602791396001600160a01b0385166000908152600460205260409020549190612a4d565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612e2781604051806060016040528060278152602001614c1b602791396002549190612a4d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b612e7881613575565b601454604080516337fdd92160e21b81526004810184905290516001600160a01b039092169163dff76484916024808201926020929091908290030181600087803b158015612ec657600080fd5b505af1158015612eda573d6000803e3d6000fd5b505050506040513d6020811015612ef057600080fd5b505115612f2e5760405162461bcd60e51b8152600401808060200182810382526027815260200180614a216027913960400191505060405180910390fd5b60145460408051633af9e66960e01b815230600482015290516000926001600160a01b031691633af9e66991602480830192602092919082900301818787803b158015612f7a57600080fd5b505af1158015612f8e573d6000803e3d6000fd5b505050506040513d6020811015612fa457600080fd5b5051601454604080516305eff7ef60e21b815230600482015290519293506000926001600160a01b03909216916317bfdfbc9160248082019260209290919082900301818787803b158015612ff857600080fd5b505af115801561300c573d6000803e3d6000fd5b505050506040513d602081101561302257600080fd5b505190508115611037576110378282613903565b3390565b600080601360009054906101000a90046001600160a01b03166001600160a01b031663acc2166a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561308b57600080fd5b505afa15801561309f573d6000803e3d6000fd5b505050506040513d60208110156130b557600080fd5b5051604080517fd81c5e4500000000000000000000000000000000000000000000000000000000815260ff871660048201526001600160a01b03868116602483015282519394506000939085169263d81c5e459260448082019391829003018186803b15801561312457600080fd5b505afa158015613138573d6000803e3d6000fd5b505050506040513d604081101561314e57600080fd5b5051601454604080517f88e972b800000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b03928316602482015287831660448201529051929350600092918516916388e972b891606480820192602092909190829003018186803b1580156131cd57600080fd5b505afa1580156131e1573d6000803e3d6000fd5b505050506040513d60208110156131f757600080fd5b5051905060006001600160e01b03831682101561321d5781836001600160e01b03160390505b604080517f4b3a0a7400000000000000000000000000000000000000000000000000000000815260ff891660048201526001600160a01b038881166024830152825160009391881692634b3a0a74926044808301939192829003018186803b15801561328857600080fd5b505afa15801561329c573d6000803e3d6000fd5b505050506040513d60408110156132b257600080fd5b5051601454604080517f7937969d00000000000000000000000000000000000000000000000000000000815260ff8c1660048201526001600160a01b0392831660248201528a83166044820152905192935060009291881691637937969d91606480820192602092909190829003018186803b15801561333157600080fd5b505afa158015613345573d6000803e3d6000fd5b505050506040513d602081101561335b57600080fd5b5051905060006001600160e01b0383168210156133815781836001600160e01b03160390505b601454604080517f95dd91930000000000000000000000000000000000000000000000000000000081526001600160a01b038c81166004830152915161351a936134909361342793879391909216916395dd9193916024808301926020929190829003018186803b1580156133f557600080fd5b505afa158015613409573d6000803e3d6000fd5b505050506040513d602081101561341f57600080fd5b505190612cff565b601454604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038f81166004830152915161166d938b9316916370a08231916024808301926020929190829003018186803b1580156133f557600080fd5b886001600160a01b03166305b9783d8d8d6040518363ffffffff1660e01b8152600401808360ff168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156134e857600080fd5b505afa1580156134fc573d6000803e3d6000fd5b505050506040513d602081101561351257600080fd5b5051906128d4565b9a9950505050505050505050565b600061292e83836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612a4d565b601891909155601955565b601454604080516305eff7ef60e21b815230600482015290516000926001600160a01b0316916317bfdfbc91602480830192602092919082900301818787803b1580156135c157600080fd5b505af11580156135d5573d6000803e3d6000fd5b505050506040513d60208110156135eb57600080fd5b505160145460408051633af9e66960e01b815230600482015290519293506000926001600160a01b0390921691633af9e6699160248082019260209290919082900301818787803b15801561363f57600080fd5b505af1158015613653573d6000803e3d6000fd5b505050506040513d602081101561366957600080fd5b505190506000806136786141b4565b909250905060006136b36136908761166d8789613528565b61166d601954610f17601854610f118c61166d8d8d61352890919063ffffffff16565b905060006136c18683613528565b90505b80156138fa5760006136d88688878761425e565b9050868111156136e55750855b601454604080516337fdd92160e21b81526004810184905290516001600160a01b039092169163dff76484916024808201926020929091908290030181600087803b15801561373357600080fd5b505af1158015613747573d6000803e3d6000fd5b505050506040513d602081101561375d57600080fd5b50511561379b5760405162461bcd60e51b815260040180806020018281038252602a815260200180614de9602a913960400191505060405180910390fd5b601460009054906101000a90046001600160a01b03166001600160a01b0316638d3f9c62826040518263ffffffff1660e01b81526004016020604051808303818588803b1580156137eb57600080fd5b505af11580156137ff573d6000803e3d6000fd5b50505050506040513d602081101561381657600080fd5b5051156138545760405162461bcd60e51b8152600401808060200182810382526030815260200180614b976030913960400191505060405180910390fd5b60145460408051633af9e66960e01b815230600482015290516001600160a01b0390921691633af9e669916024808201926020929091908290030181600087803b1580156138a157600080fd5b505af11580156138b5573d6000803e3d6000fd5b505050506040513d60208110156138cb57600080fd5b505195506138d98782613528565b96508683106138e857506138fa565b6138f28784613528565b9150506136c4565b50505050505050565b60008061390e6141b4565b9150915060008490506000613938601954610f17601854610f11898b61352890919063ffffffff16565b9050845b818310156138fa5760006139528483888861425e565b90508261395f85836128d4565b11156139725761396f8385613528565b90505b601a5481101561398257506138fa565b601454604080517f884b93430000000000000000000000000000000000000000000000000000000081526004810184905290516001600160a01b039092169163884b9343916024808201926020929091908290030181600087803b1580156139e957600080fd5b505af11580156139fd573d6000803e3d6000fd5b505050506040513d6020811015613a1357600080fd5b505115613a515760405162461bcd60e51b815260040180806020018281038252602a815260200180614bf1602a913960400191505060405180910390fd5b601460009054906101000a90046001600160a01b03166001600160a01b031663219f2fe7826040518263ffffffff1660e01b81526004016020604051808303818588803b158015613aa157600080fd5b505af1158015613ab5573d6000803e3d6000fd5b50505050506040513d6020811015613acc57600080fd5b505115613b0a5760405162461bcd60e51b8152600401808060200182810382526028815260200180614d6c6028913960400191505060405180910390fd5b60145460408051633af9e66960e01b815230600482015290516001600160a01b0390921691633af9e669916024808201926020929091908290030181600087803b158015613b5757600080fd5b505af1158015613b6b573d6000803e3d6000fd5b505050506040513d6020811015613b8157600080fd5b50519350613b8f82826128d4565b91505061393c565b60075415613bf2573360009081526008602052604090205460ff161515600114613bf25760405162461bcd60e51b815260040180806020018281038252602e815260200180614a6e602e913960400191505060405180910390fd5b600e5460ff161515600114613c385760405162461bcd60e51b8152600401808060200182810382526022815260200180614af46022913960400191505060405180910390fd5b600d5415613c6c576000806000613c4d613d0c565b925092509250600d54811115613c6857613c68838383613e99565b5050505b806000613c77612bf1565b90506000613c9082600254612cff90919063ffffffff16565b1115613cb257613caf81610f1760025486612cff90919063ffffffff16565b91505b613cbc8483614285565b613cc583614310565b6040805184815290516001600160a01b038616917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a26113e1611357565b600080600080613d1d60003061303a565b6015546016546017549293504792600092613d4a9286926001600160a01b0392831692918216911661450a565b90508282613d5881846128d4565b955095509550505050909192565b6000613d70612587565b8560405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613e24573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590613e5a5750866001600160a01b0316816001600160a01b0316145b6138fa5760405162461bcd60e51b8152600401808060200182810382526024815260200180614ad06024913960400191505060405180910390fd5b4690565b8215613fa65760135460408051630952c56360e01b815260006004820181905230602483015291516001600160a01b0390931692630952c5639260448084019391929182900301818387803b158015613ef157600080fd5b505af1158015613f05573d6000803e3d6000fd5b505060155460165460175460009450613f30935087926001600160a01b0390811692811691166145da565b905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613f8c57600080fd5b505af1158015613fa0573d6000803e3d6000fd5b50505050505b6000613fce612710610f17612580600f54611bb16010546011546128d490919063ffffffff16565b905073b31f66aa3c1e785363f0875a1b74e27b85fd66c76001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561401f57600080fd5b505af1158015614033573d6000803e3d6000fd5b50505050506000614055612710610f1760115486612cff90919063ffffffff16565b9050801561407a57600a54600b5461407a916001600160a01b039081169116836147e7565b6000614097612710610f1760105487612cff90919063ffffffff16565b905080156140bd57600a546140bd906001600160a01b03166140b76119f2565b836147e7565b60006140da612710610f17600f5488612cff90919063ffffffff16565b905080156140f957600a546140f9906001600160a01b031633836147e7565b61410247614310565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461412b6115bf565b6002546040805192835260208301919091528051918290030190a150505050505050565b6000818361419e5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612aa1578181015183820152602001612a89565b5060008385816141aa57fe5b0495945050505050565b601354601454604080517f8e8f294b0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152815160009485948594911692638e8f294b9260248083019392829003018186803b15801561421e57600080fd5b505afa158015614232573d6000803e3d6000fd5b505050506040513d604081101561424857600080fd5b506020015193670de0b6b3a76400009350915050565b600061427c6103e8610f176103b6610f118861166d88858d8c612cff565b95945050505050565b60025461429290826128d4565b6002556001600160a01b0382166000908152600460205260409020546142b890826128d4565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000811161434f5760405162461bcd60e51b815260040180806020018281038252602d815260200180614d10602d913960400191505060405180910390fd5b601460009054906101000a90046001600160a01b03166001600160a01b031663219f2fe7826040518263ffffffff1660e01b81526004016020604051808303818588803b15801561439f57600080fd5b505af11580156143b3573d6000803e3d6000fd5b50505050506040513d60208110156143ca57600080fd5b5051156144085760405162461bcd60e51b8152600401808060200182810382526028815260200180614c426028913960400191505060405180910390fd5b601454604080516305eff7ef60e21b815230600482015290516000926001600160a01b0316916317bfdfbc91602480830192602092919082900301818787803b15801561445457600080fd5b505af1158015614468573d6000803e3d6000fd5b505050506040513d602081101561447e57600080fd5b505160145460408051633af9e66960e01b815230600482015290519293506000926001600160a01b0390921691633af9e6699160248082019260209290919082900301818787803b1580156144d257600080fd5b505af11580156144e6573d6000803e3d6000fd5b505050506040513d60208110156144fc57600080fd5b505190506110378183613903565b60008061451785856148a5565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561455657600080fd5b505afa15801561456a573d6000803e3d6000fd5b505050506040513d606081101561458057600080fd5b50805160209091015190925090506001600160a01b03838116908816146145a357905b6145ce88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff166148d6565b98975050505050505050565b6000806145e785856148a5565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561462657600080fd5b505afa15801561463a573d6000803e3d6000fd5b505050506040513d606081101561465057600080fd5b50805160209091015190925090506001600160a01b038381169088161461467357905b6000806146a18a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff166148d6565b9050886001600160a01b0316856001600160a01b0316146146be57905b6146c989888c61491e565b60408051600080825260208201928390527f022c0d9f00000000000000000000000000000000000000000000000000000000835260248201858152604483018590523060648401819052608060848501908152845160a486018190526001600160a01b038e169663022c0d9f968a968a9691949193919260c486019290918190849084905b8381101561476657818101518382015260200161474e565b50505050905090810190601f1680156147935780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b1580156147b557600080fd5b505af11580156147c9573d6000803e3d6000fd5b505050508181116147da578161351a565b9998505050505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561483e57600080fd5b505af1158015614852573d6000803e3d6000fd5b505050506040513d602081101561486857600080fd5b50516110375760405162461bcd60e51b815260040180806020018281038252602e815260200180614dbb602e913960400191505060405180910390fd5b600080826001600160a01b0316846001600160a01b0316106148c85782846148cb565b83835b915091509250929050565b6000806148e5856103e5612cff565b905060006148f38285612cff565b9050600061490783611bb1886103e8612cff565b90506149138282612d58565b979650505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561497557600080fd5b505af1158015614989573d6000803e3d6000fd5b505050506040513d602081101561499f57600080fd5b5051611037576040805162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015290519081900360640190fdfe4a6f654c656e64696e6753747261746567794176617856313a3a7061796d656e7473206e6f7420616c6c6f7765644a6f654c656e64696e6753747261746567794176617856313a3a72656465656d206661696c65644f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573735065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f736974732c206e6f7420616c6c6f7765645065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f20616c6c6f776564206465706f7369746f7273417263683a3a76616c69646174655369673a20696e76616c6964207369676e61747572654a6f654c656e64696e6753747261746567794176617856313a3a5f6465706f7369744a6f654c656e64696e6753747261746567794176617856313a3a7265736375654465706c6f79656446756e64734a6f654c656e64696e6753747261746567794176617856313a3a7265696e766573744a6f654c656e64696e6753747261746567794176617856313a3a7769746864726177207472616e73666572206661696c65644a6f654c656e64696e6753747261746567794176617856313a3a6661696c656420746f20726570617920626f72726f775065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f7420616c6c6f7765644a6f654c656e64696e6753747261746567794176617856313a3a626f72726f77696e67206661696c65645f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794a6f654c656e64696e6753747261746567794176617856313a3a4465706f736974206661696c6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724a6f654c656e64696e6753747261746567794176617856313a3a2062656c6f77206d696e696d756d2077697468647261775f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f20616464726573734a6f654c656e64696e6753747261746567794176617856313a3a5f7374616b654465706f736974546f6b656e737472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654a6f654c656e64696e6753747261746567794176617856313a3a6c656e64696e67206661696c65645f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63654a6f654c656e64696e6753747261746567794176617856313a3a5452414e534645525f46524f4d5f4641494c45444a6f654c656e64696e6753747261746567794176617856313a3a6661696c656420746f2072656465656d5f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220575b283a0b417000070961c374d9237a7763b5596860df588b6e2924490c972664736f6c63430007030033",
  "devdoc": {
    "details": "Banker Joe emits rewards in AVAX and ERC20. During AVAX claim, contract becomes gas bound",
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "amount that can be reinvested"
        }
      },
      "claimAVAXRewards()": {
        "details": "Contract becomes gas bound hereConditional for gas savings on repeat actionsPublic permission in case of stuck state"
      },
      "deposit()": {
        "details": "Must mint receipt tokens to `msg.sender`"
      },
      "deposit(uint256)": {
        "details": "Must mint receipt tokens to `msg.sender`",
        "params": {
          "amount": "deposit tokens"
        }
      },
      "depositFor(address)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Should revert for tokens without Permit",
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "title": "Strategy for Banker Joe AVAX",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Returns balance available to reinvest"
      },
      "claimAVAXRewards()": {
        "notice": "Claims AVAX rewards on behalf of strategy"
      },
      "deposit()": {
        "notice": "Deposit and deploy deposits tokens to the strategy using AVAX"
      },
      "deposit(uint256)": {
        "notice": "Deposit and deploy deposits tokens to the strategy"
      },
      "depositFor(address)": {
        "notice": "Deposit on behalf of another account using AVAX"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimated deposit token balance deployed by strategy, excluding balance"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11375,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11378,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11383,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11389,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11393,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11409,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 20242,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 20355,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 20359,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12548,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)14807"
      },
      {
        "astId": 12550,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)14807"
      },
      {
        "astId": 12552,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12554,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12556,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12558,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 12560,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12562,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12564,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 20475,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "_status",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 56274,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "rewardController",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IJoetroller)16010"
      },
      {
        "astId": 56276,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "tokenDelegator",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IJoeAVAXDelegator)15404"
      },
      {
        "astId": 56278,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "rewardToken0",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(IERC20)14807"
      },
      {
        "astId": 56280,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "rewardToken1",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IERC20)14807"
      },
      {
        "astId": 56282,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "swapPairToken0",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IPair)16809"
      },
      {
        "astId": 56289,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "leverageLevel",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 56291,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "leverageBips",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 56293,
        "contract": "contracts/strategies/JoeLendingStrategyAvaxV1.sol:JoeLendingStrategyAvaxV1",
        "label": "minMinting",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)14807": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IJoeAVAXDelegator)15404": {
        "encoding": "inplace",
        "label": "contract IJoeAVAXDelegator",
        "numberOfBytes": "20"
      },
      "t_contract(IJoetroller)16010": {
        "encoding": "inplace",
        "label": "contract IJoetroller",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)16809": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}