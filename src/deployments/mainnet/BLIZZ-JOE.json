{
  "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rewardDistribution",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_blizzChef",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDelegator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "depositToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "poolRewardToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "avToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "avDebtToken",
              "type": "address"
            }
          ],
          "internalType": "struct BlizzStrategyV1.Tokens",
          "name": "_tokens",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapPairRewardDeposit",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapPairPoolReward",
              "type": "address"
            }
          ],
          "internalType": "struct BlizzStrategyV1.SwapPairs",
          "name": "_swapPairs",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "leverageLevel",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "safetyFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverageBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minMinting",
              "type": "uint256"
            }
          ],
          "internalType": "struct BlizzStrategyV1.LeverageSettings",
          "name": "_leverageSettings",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "minTokensToReinvest",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "adminFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "devFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reinvestRewardBips",
              "type": "uint256"
            }
          ],
          "internalType": "struct BlizzStrategyV1.StrategySettings",
          "name": "_strategySettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safetyFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMinting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
    "transactionIndex": 19,
    "gasUsed": "4615035",
    "logsBloom": "0x
    "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e",
    "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 58,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000",
        "logIndex": 59,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 60,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 61,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 62,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 63,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x000000000000000000000000302404cb8f34713a8b8dbf9b4989a41252332068"
        ],
        "data": "0x",
        "logIndex": 64,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 13322619,
        "transactionHash": "0x852789ed693374705bea3c67312a03fda784d6c1d3fdf90c421b590ff26d50b9",
        "address": "0x3Ea4ef084474736893F4F23F9899930f7cD0488f",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 65,
        "blockHash": "0xa61e239b138afa4814d51e9bdcff7eebc14ecb37f4ef74694047a05ef124bf2e"
      }
    ],
    "blockNumber": 13322619,
    "cumulativeGasUsed": "7748721",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Blizz JOE",
    "0xA867c1acA4B5F1E0a66cf7b1FE33525D57608854",
    "0x2d867AE30400ffFaD9BeD8472c514c2d6b827F5f",
    "0x70BbE4A294878a14CB3CDD9315f5EB490e346163",
    "0x302404cb8f34713a8b8dbf9b4989a41252332068",
    {
      "depositToken": "0x6e84a6216ea6dacc71ee8e6b0a5b7322eebc0fdd",
      "poolRewardToken": "0x0f34919404a290e71fc6A510cB4a6aCb8D764b24",
      "avToken": "0x41acec47d9261db87e9dee023c1ae4b0345ee0d5",
      "avDebtToken": "0x8179d9446a37866590032edcf1ef2a537a42ec10"
    },
    {
      "swapPairRewardDeposit": "0x454e67025631c065d3cfad6d71e6892f74487a15",
      "swapPairPoolReward": "0xac3f978714c613e768272c502a8912bc03dcf624"
    },
    {
      "leverageLevel": "17436",
      "safetyFactor": "746",
      "leverageBips": "10000",
      "minMinting": "100000000000000"
    },
    {
      "minTokensToReinvest": "100000000000000",
      "adminFeeBips": 0,
      "devFeeBips": 700,
      "reinvestRewardBips": 100
    }
  ],
  "solcInputHash": "fad7427cf04f831f6a9149e4c98d14ce",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardDistribution\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_blizzChef\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDelegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"poolRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"avDebtToken\",\"type\":\"address\"}],\"internalType\":\"struct BlizzStrategyV1.Tokens\",\"name\":\"_tokens\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapPairRewardDeposit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapPairPoolReward\",\"type\":\"address\"}],\"internalType\":\"struct BlizzStrategyV1.SwapPairs\",\"name\":\"_swapPairs\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverageBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMinting\",\"type\":\"uint256\"}],\"internalType\":\"struct BlizzStrategyV1.LeverageSettings\",\"name\":\"_leverageSettings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reinvestRewardBips\",\"type\":\"uint256\"}],\"internalType\":\"struct BlizzStrategyV1.StrategySettings\",\"name\":\"_strategySettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMinting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"details\":\"Must mint receipt tokens to `msg.sender`\",\"params\":{\"amount\":\"deposit tokens\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Should revert for tokens without Permit\",\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"title\":\"Blizz strategy for ERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit and deploy deposits tokens to the strategy\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimated deposit token balance deployed by strategy, excluding balance\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/BlizzStrategyV1.sol\":\"BlizzStrategyV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x761751e4c7695848f01e6ebca020145de4b6f4d5e9b5a1f6fae21def20406762\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0xeaab679124488e8a2f6f3208a4ece97195d1d674b0935d56dc4ded963bfb67be\",\"license\":\"MIT\"},\"contracts/interfaces/IBlizzChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\ninterface IBlizzChef {\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        uint256 totalSupply;\\n        uint256 allocPoint; // How many allocation points assigned to this pool.\\n        uint256 lastRewardTime; // Last second that reward distribution occurs.\\n        uint256 accRewardPerShare; // Accumulated rewards per share, times 1e12. See below.\\n        address onwardIncentives;\\n    }\\n\\n    // Info about token emissions for a given time period.\\n    struct EmissionPoint {\\n        uint128 startTimeOffset;\\n        uint128 rewardsPerSecond;\\n    }\\n\\n    function claimableReward(address account, address[] memory tokens) external view returns (uint256[] memory);\\n\\n    function claim(address account, address[] memory tokens) external;\\n\\n    function userInfo(address token, address user) external view returns (UserInfo memory);\\n\\n    function poolInfo(address token) external view returns (PoolInfo memory);\\n\\n    function totalAllocPoint() external view returns (uint256);\\n\\n    function rewardsPerSecond() external view returns (uint256);\\n\\n    function startTime() external view returns (uint256);\\n\\n    function userBaseClaimable(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x75f020162296458c105f7b918caa7ba63e5b37e0262ffe9c0c4aa6cdbbda5fe7\",\"license\":\"MIT\"},\"contracts/interfaces/IBlizzMultiFeeDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IBlizzMultiFeeDistribution {\\n    function exit(bool claimRewards) external;\\n}\\n\",\"keccak256\":\"0x0525832191c4676e12fd621f3c2cbba1267fe597cc9f84133c83712b4dd7baab\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(\\n        address reserve,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1f6d25bcbfea5c8a64d776a94f6511a52250240b2d0aeec787374f5be02ed3c8\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0x899cb9f43560de458f6576c1534e9ed1504115787f0db61c856d9f1b4658d1c0\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x13cd04fbe9326420082d6aa105322eded7cbe7d4848d652a15ffca307b51088c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x0c300bb8b048c88d74d2a1e76ca9709b4dc1109cf9781d4afeaad3a7fe9518f8\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xfc1bce446dad248893b01e2c3673129bb4a08f69053a3c0e6f2c8a57349f3a9d\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xc0e758ff3798955ec630efd36ac2f180c982d5a5aa52d65ddac3af249cbf17da\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0x5561e8a8e7df8c9c89a9782b1465cba09b75f2949696da28ed30d4d5458a3f7d\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/BlizzStrategyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../YakStrategyV2.sol\\\";\\nimport \\\"../interfaces/IBlizzChef.sol\\\";\\nimport \\\"../interfaces/IBlizzMultiFeeDistribution.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Blizz strategy for ERC20\\n */\\ncontract BlizzStrategyV1 is YakStrategyV2 {\\n    using SafeMath for uint256;\\n\\n    struct StrategySettings {\\n        uint256 minTokensToReinvest;\\n        uint256 adminFeeBips;\\n        uint256 devFeeBips;\\n        uint256 reinvestRewardBips;\\n    }\\n\\n    struct LeverageSettings {\\n        uint256 leverageLevel;\\n        uint256 safetyFactor;\\n        uint256 leverageBips;\\n        uint256 minMinting;\\n    }\\n\\n    struct SwapPairs {\\n        address swapPairRewardDeposit;\\n        address swapPairPoolReward;\\n    }\\n\\n    struct Tokens {\\n        address depositToken;\\n        address poolRewardToken;\\n        address avToken;\\n        address avDebtToken;\\n    }\\n\\n    IBlizzMultiFeeDistribution private rewardDistribution;\\n    IBlizzChef private blizzChef;\\n    ILendingPool private tokenDelegator;\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    uint256 private leverageLevel;\\n    uint256 private safetyFactor;\\n    uint256 private leverageBips;\\n    uint256 private minMinting;\\n    address private avToken;\\n    address private avDebtToken;\\n    address private poolRewardToken;\\n    IPair private swapPairPoolReward;\\n    IPair private swapPairRewardDeposit;\\n\\n    constructor(\\n        string memory _name,\\n        address _rewardDistribution,\\n        address _blizzChef,\\n        address _tokenDelegator,\\n        address _timelock,\\n        Tokens memory _tokens,\\n        SwapPairs memory _swapPairs,\\n        LeverageSettings memory _leverageSettings,\\n        StrategySettings memory _strategySettings\\n    ) {\\n        name = _name;\\n        rewardDistribution = IBlizzMultiFeeDistribution(_rewardDistribution);\\n        blizzChef = IBlizzChef(_blizzChef);\\n        tokenDelegator = ILendingPool(_tokenDelegator);\\n        depositToken = IERC20(_tokens.depositToken);\\n        rewardToken = IERC20(address(WAVAX));\\n        poolRewardToken = _tokens.poolRewardToken;\\n        swapPairPoolReward = IPair(_swapPairs.swapPairPoolReward);\\n        _updateLeverage(_leverageSettings);\\n        devAddr = msg.sender;\\n        avToken = _tokens.avToken;\\n        avDebtToken = _tokens.avDebtToken;\\n\\n        assignSwapPairSafely(_swapPairs.swapPairRewardDeposit);\\n        updateMinTokensToReinvest(_strategySettings.minTokensToReinvest);\\n        updateAdminFee(_strategySettings.adminFeeBips);\\n        updateDevFee(_strategySettings.devFeeBips);\\n        updateReinvestReward(_strategySettings.reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function assignSwapPairSafely(address _swapPairRewardDeposit) private {\\n        require(\\n            _swapPairRewardDeposit > address(0),\\n            \\\"Swap pair is necessary but not supplied\\\"\\n        );\\n        swapPairRewardDeposit = IPair(_swapPairRewardDeposit);\\n        require(\\n            isPairEquals(swapPairRewardDeposit, depositToken, rewardToken) ||\\n                isPairEquals(swapPairRewardDeposit, rewardToken, depositToken),\\n            \\\"Swap pair does not match depositToken and rewardToken.\\\"\\n        );\\n    }\\n\\n    function isPairEquals(\\n        IPair pair,\\n        IERC20 left,\\n        IERC20 right\\n    ) private pure returns (bool) {\\n        return pair.token0() == address(left) && pair.token1() == address(right);\\n    }\\n\\n    /// @notice Internal method to get account state\\n    /// @dev Values provided in 1e18 (WAD) instead of 1e27 (RAY)\\n    function _getAccountData()\\n        internal\\n        view\\n        returns (\\n            uint256 balance,\\n            uint256 borrowed,\\n            uint256 borrowable\\n        )\\n    {\\n        balance = IERC20(avToken).balanceOf(address(this));\\n        borrowed = IERC20(avDebtToken).balanceOf(address(this));\\n        borrowable = 0;\\n        if (balance.mul(leverageLevel.sub(leverageBips)).div(leverageLevel) > borrowed) {\\n            borrowable = balance\\n                .mul(leverageLevel.sub(leverageBips))\\n                .div(leverageLevel)\\n                .sub(borrowed);\\n        }\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        return balance.sub(borrowed);\\n    }\\n\\n    function _updateLeverage(LeverageSettings memory _leverageSettings) internal {\\n        leverageLevel = _leverageSettings.leverageLevel;\\n        leverageBips = _leverageSettings.leverageBips;\\n        safetyFactor = _leverageSettings.safetyFactor;\\n        minMinting = _leverageSettings.minMinting;\\n    }\\n\\n    function updateLeverage(\\n        uint256 _leverageLevel,\\n        uint256 _safetyFactor,\\n        uint256 _minMinting,\\n        uint256 _leverageBips\\n    ) external onlyDev {\\n        _updateLeverage(\\n            LeverageSettings({\\n                leverageLevel: _leverageLevel,\\n                safetyFactor: _safetyFactor,\\n                minMinting: _minMinting,\\n                leverageBips: _leverageBips\\n            })\\n        );\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        _unrollDebt(balance.sub(borrowed));\\n        _rollupDebt();\\n    }\\n\\n    function setAllowances() public override onlyOwner {\\n        revert(\\\"Deprecated\\\");\\n    }\\n\\n    function _setAllowancesDepositToken(uint256 amount) private {\\n        IERC20(depositToken).approve(address(tokenDelegator), 0);\\n        IERC20(depositToken).approve(address(tokenDelegator), amount);\\n    }\\n\\n    function _setAllowancesTokenDelegator(uint256 amount) private {\\n        IERC20(avToken).approve(address(tokenDelegator), 0);\\n        IERC20(avToken).approve(address(tokenDelegator), amount);\\n    }\\n\\n    function _redeemUnderlying(uint256 amount) private returns (uint256) {\\n        _setAllowancesTokenDelegator(amount);\\n        return tokenDelegator.withdraw(address(depositToken), amount, address(this));\\n    }\\n\\n    function _repayBorrow(uint256 amount) private {\\n        _setAllowancesDepositToken(amount);\\n        tokenDelegator.repay(address(depositToken), amount, 2, address(this));\\n    }\\n\\n    function _depositCollateral(uint256 amount) private {\\n        _setAllowancesDepositToken(amount);\\n        tokenDelegator.deposit(address(depositToken), amount, address(this), 0);\\n    }\\n\\n    function deposit(uint256 amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint256 amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function depositWithPermit(\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) private onlyAllowedDeposits {\\n        require(DEPOSITS_ENABLED == true, \\\"BlizzStrategyV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            (\\n                uint256 poolTokenAmount,\\n                uint256 rewardTokenBalance,\\n                uint256 estimatedTotalReward\\n            ) = _checkReward();\\n            if (estimatedTotalReward > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(poolTokenAmount, rewardTokenBalance, estimatedTotalReward);\\n            }\\n        }\\n        require(\\n            depositToken.transferFrom(msg.sender, address(this), amount),\\n            \\\"BlizzStrategyV1::transfer failed\\\"\\n        );\\n        _mint(account, getSharesForDepositTokens(amount));\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        require(\\n            depositTokenAmount > minMinting,\\n            \\\"BlizzStrategyV1::below minimum withdraw\\\"\\n        );\\n        if (depositTokenAmount > 0) {\\n            _burn(msg.sender, amount);\\n            // actual amount withdrawn may change with time.\\n            uint256 withdrawnAmount = _withdrawDepositTokens(depositTokenAmount);\\n            _safeTransfer(address(depositToken), msg.sender, withdrawnAmount);\\n            emit Withdraw(msg.sender, withdrawnAmount);\\n        }\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private returns (uint256) {\\n        _unrollDebt(amount);\\n        (uint256 balance, , ) = _getAccountData();\\n        amount = amount > balance ? type(uint256).max : amount;\\n        uint256 withdrawn = _redeemUnderlying(amount);\\n        _rollupDebt();\\n        return withdrawn;\\n    }\\n\\n    function _convertPoolTokensIntoReward(uint256 poolTokenAmount)\\n        private\\n        returns (uint256)\\n    {\\n        return\\n            DexLibrary.swap(\\n                poolTokenAmount,\\n                address(poolRewardToken),\\n                address(rewardToken),\\n                swapPairPoolReward\\n            );\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        (\\n            uint256 poolTokenAmount,\\n            uint256 rewardTokenBalance,\\n            uint256 estimatedTotalReward\\n        ) = _checkReward();\\n        require(\\n            estimatedTotalReward >= MIN_TOKENS_TO_REINVEST,\\n            \\\"BlizzStrategyV1::reinvest\\\"\\n        );\\n        _reinvest(poolTokenAmount, rewardTokenBalance, estimatedTotalReward);\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `stakingContract`\\n     */\\n    function _reinvest(\\n        uint256 poolTokenAmount,\\n        uint256 rewardTokenBalance,\\n        uint256 estimatedTotalReward\\n    ) private {\\n        address[] memory assets = new address[](2);\\n        assets[0] = avToken;\\n        assets[1] = avDebtToken;\\n        blizzChef.claim(address(this), assets);\\n        rewardDistribution.exit(true);\\n\\n        _convertPoolTokensIntoReward(poolTokenAmount);\\n\\n        uint256 devFee = estimatedTotalReward.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 adminFee = estimatedTotalReward.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (adminFee > 0) {\\n            _safeTransfer(address(rewardToken), owner(), adminFee);\\n        }\\n\\n        uint256 reinvestFee = estimatedTotalReward.mul(REINVEST_REWARD_BIPS).div(\\n            BIPS_DIVISOR\\n        );\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = DexLibrary.swap(\\n            estimatedTotalReward.sub(devFee).sub(adminFee).sub(reinvestFee),\\n            address(rewardToken),\\n            address(depositToken),\\n            swapPairRewardDeposit\\n        );\\n        _stakeDepositTokens(depositTokenAmount);\\n\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _rollupDebt() internal {\\n        (uint256 balance, uint256 borrowed, uint256 borrowable) = _getAccountData();\\n        uint256 lendTarget = balance\\n            .sub(borrowed)\\n            .mul(leverageLevel.sub(safetyFactor))\\n            .div(leverageBips);\\n        while (balance < lendTarget) {\\n            if (balance.add(borrowable) > lendTarget) {\\n                borrowable = lendTarget.sub(balance);\\n            }\\n            if (borrowable < minMinting) {\\n                break;\\n            }\\n            tokenDelegator.borrow(\\n                address(depositToken),\\n                borrowable,\\n                2, // variable interest model\\n                0,\\n                address(this)\\n            );\\n            _depositCollateral(borrowable);\\n            (balance, borrowed, borrowable) = _getAccountData();\\n        }\\n    }\\n\\n    function _unrollDebt(uint256 amountToFreeUp) internal {\\n        (uint256 balance, uint256 borrowed, uint256 borrowable) = _getAccountData();\\n        uint256 targetBorrow = balance\\n            .sub(borrowed)\\n            .sub(amountToFreeUp)\\n            .mul(leverageLevel.sub(safetyFactor))\\n            .div(leverageBips)\\n            .sub(balance.sub(borrowed).sub(amountToFreeUp));\\n        uint256 toRepay = borrowed.sub(targetBorrow);\\n\\n        while (toRepay > 0) {\\n            uint256 unrollAmount = borrowable;\\n            if (unrollAmount > borrowed) {\\n                unrollAmount = borrowed;\\n            }\\n            _redeemUnderlying(unrollAmount);\\n            _repayBorrow(unrollAmount);\\n            (balance, borrowed, borrowable) = _getAccountData();\\n            if (targetBorrow >= borrowed) {\\n                break;\\n            }\\n            toRepay = borrowed.sub(targetBorrow);\\n        }\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"BlizzStrategyV1::_stakeDepositTokens\\\");\\n        _depositCollateral(amount);\\n        _rollupDebt();\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) private {\\n        require(\\n            IERC20(token).transfer(to, value),\\n            \\\"BlizzStrategyV1::TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _updatePool(IBlizzChef.PoolInfo memory pool)\\n        internal\\n        view\\n        returns (IBlizzChef.PoolInfo memory)\\n    {\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return pool;\\n        }\\n        uint256 lpSupply = pool.totalSupply;\\n        if (lpSupply == 0) {\\n            pool.lastRewardTime = block.timestamp;\\n            return pool;\\n        }\\n        uint256 duration = block.timestamp.sub(pool.lastRewardTime);\\n        uint256 reward = duration\\n            .mul(blizzChef.rewardsPerSecond())\\n            .mul(pool.allocPoint)\\n            .div(blizzChef.totalAllocPoint());\\n        pool.accRewardPerShare = pool.accRewardPerShare.add(\\n            reward.mul(1e12).div(lpSupply)\\n        );\\n        return pool;\\n    }\\n\\n    function _checkReward()\\n        internal\\n        view\\n        returns (\\n            uint256 _poolTokenAmount,\\n            uint256 _rewardTokenBalance,\\n            uint256 _estimatedTotalReward\\n        )\\n    {\\n        uint256 poolTokenAmount = blizzChef.userBaseClaimable(address(this));\\n\\n        address[] memory assets = new address[](2);\\n        assets[0] = avToken;\\n        assets[1] = avDebtToken;\\n\\n        IBlizzChef.PoolInfo memory pool = blizzChef.poolInfo(assets[0]);\\n        pool = _updatePool(pool);\\n        IBlizzChef.UserInfo memory user = blizzChef.userInfo(assets[0], address(this));\\n        uint256 rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\n        poolTokenAmount = poolTokenAmount.add(rewardDebt.sub(user.rewardDebt));\\n\\n        pool = blizzChef.poolInfo(assets[1]);\\n        pool = _updatePool(pool);\\n        user = blizzChef.userInfo(assets[1], address(this));\\n        rewardDebt = user.amount.mul(pool.accRewardPerShare).div(1e12);\\n        poolTokenAmount = poolTokenAmount.add(rewardDebt.sub(user.rewardDebt));\\n\\n        poolTokenAmount = poolTokenAmount.div(2);\\n        poolTokenAmount = poolTokenAmount.add(\\n            IERC20(poolRewardToken).balanceOf(address(this))\\n        );\\n        uint256 pendingRewardTokenAmount = DexLibrary.estimateConversionThroughPair(\\n            poolTokenAmount,\\n            poolRewardToken,\\n            address(rewardToken),\\n            swapPairPoolReward\\n        );\\n        uint256 rewardTokenBalance = rewardToken.balanceOf(address(this));\\n        uint256 estimatedTotalReward = pendingRewardTokenAmount.add(rewardTokenBalance);\\n        return (poolTokenAmount, rewardTokenBalance, estimatedTotalReward);\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        (, , uint256 amount) = _checkReward();\\n        return amount;\\n    }\\n\\n    function getActualLeverage() public view returns (uint256) {\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        return balance.mul(1e18).div(balance.sub(borrowed));\\n    }\\n\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        return totalDeposits();\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        _unrollDebt(balance.sub(borrowed));\\n        _redeemUnderlying(type(uint256).max);\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"BlizzStrategyV1::rescueDeployedFunds\\\"\\n        );\\n        IERC20(avToken).approve(address(tokenDelegator), 0);\\n        IERC20(depositToken).approve(address(tokenDelegator), 0);\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba0e1a7c875b15668e2f8e231416783ba67daf506f677a8401c91bb4b49d422e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103785760003560e01c80638b73e606116101d3578063c89039c511610104578063dd8ce4d6116100a2578063ed24911d1161007c578063ed24911d1461069d578063f2fde38b146106a5578063f7c618c1146106b8578063fdb5a03e146106c057610378565b8063dd8ce4d614610664578063e21ac82514610677578063eab89a5a1461068a57610378565b8063da09c72c116100de578063da09c72c14610639578063db8dd95c14610641578063dbd9a4d414610649578063dd62ed3e1461065157610378565b8063c89039c51461060b578063cff1b6ef14610613578063d505accf1461062657610378565b8063a9059cbb11610171578063b6b55f251161014b578063b6b55f25146105e0578063b9e57b80146105f3578063bd079f55146105fb578063c4b24a461461060357610378565b8063a9059cbb146105b2578063ac0d31ff146105c5578063b52a321f146105d857610378565b806395d89b41116101ad57806395d89b411461057c57806399729ec1146105845780639e4e731814610597578063a8ae2b7c1461059f57610378565b80638b73e606146105415780638da5cb5b146105545780639291d5631461056957610378565b80634a970be7116102ad578063789139bc1161024b5780637ecebe00116102255780637ecebe001461050057806381837230146105135780638980f11f146105265780638aff733d1461053957610378565b8063789139bc146104dd5780637ae26773146104e55780637d882097146104f857610378565b80634ebb7916116102875780634ebb7916146104a75780635ea682ea146104ba57806370a08231146104c2578063715018a6146104d557610378565b80634a970be71461046e5780634bebd1e7146104815780634e77ace51461049457610378565b806323b872dd1161031a57806330adf81f116102f457806330adf81f14610436578063313ce5671461043e5780633bdc6e7214610453578063483c2ef01461045b57610378565b806323b872dd146103fd5780632e1a7d4d146104105780632f4f21e21461042357610378565b80630f23475d116103565780630f23475d146103d057806318160ddd146103d857806320606b70146103e057806322a05141146103e857610378565b806306fdde031461037d578063076771111461039b578063095ea7b3146103b0575b600080fd5b6103856106c8565b6040516103929190614002565b60405180910390f35b6103a3610756565b6040516103929190613f7b565b6103c36103be366004613a97565b61075c565b6040516103929190613f70565b6103a3610773565b6103a3610783565b6103a3610789565b6103fb6103f6366004613c53565b6107ad565b005b6103c361040b3660046139ea565b61083c565b6103fb61041e366004613bff565b610923565b6103fb610431366004613a97565b6109cd565b6103a36109d7565b6104466109fb565b604051610392919061471f565b6103a3610a00565b6103c3610469366004613996565b610a06565b6103fb61047c366004613c84565b610a1b565b6103fb61048f366004613996565b610ab3565b6103fb6104a2366004613ac2565b610b97565b6103fb6104b5366004613bff565b610c35565b6103a3610ce1565b6103a36104d0366004613996565b610ce7565b6103fb610d06565b6103a3610d9c565b6103fb6104f33660046139b2565b610da2565b6103a3610e6b565b6103a361050e366004613996565b610e8f565b6103fb610521366004613bff565b610ea1565b6103fb610534366004613a97565b610f20565b6103a3611032565b6103fb61054f366004613996565b611038565b61055c61113e565b6040516103929190613dbb565b6103fb610577366004613996565b61114d565b6103856111ed565b6103fb610592366004613bff565b611247565b6103a36112f5565b6103fb6105ad366004613bff565b611319565b6103c36105c0366004613a97565b6113c1565b6103fb6105d3366004613c2f565b6113ce565b6103c36116e4565b6103fb6105ee366004613bff565b6116ed565b6103a36116fa565b6103a3611741565b6103a3611747565b61055c61175a565b6103fb610621366004613bff565b611769565b6103fb610634366004613a2a565b611811565b61055c6118c6565b6103a36118d5565b6103fb611907565b6103a361065f3660046139b2565b61195e565b6103a3610672366004613bff565b611989565b6103fb610685366004613bff565b6119c3565b6103a3610698366004613bff565b611a42565b6103a3611a73565b6103fb6106b3366004613996565b611b0a565b61055c611bd8565b6103fb611be7565b6000805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561074e5780601f106107235761010080835404028352916020019161074e565b820191906000526020600020905b81548152906001019060200180831161073157829003601f168201915b505050505081565b60105481565b6000610769338484611c77565b5060015b92915050565b600061077d610e6b565b90505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600b546001600160a01b031633146107e05760405162461bcd60e51b81526004016107d79061450e565b60405180910390fd5b610809604051806080016040528086815260200185815260200183815260200184815250611d2b565b600080610814611d49565b50909250905061082c6108278383611ebc565b611efe565b610834611fbd565b505050505050565b6001600160a01b03831660008181526003602090815260408083203380855292528220549192909190821480159061087657506000198114155b1561090c5760006108a2856040518060600160405280602f8152602001614778602f91398491906120e0565b6001600160a01b03808916600081815260036020908152604080832094891680845294909152908190208490555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610902908590613f7b565b60405180910390a3505b61091786868661210c565b50600195945050505050565b600061092e82611a42565b905060185481116109515760405162461bcd60e51b81526004016107d7906140a9565b80156109c95761096133836121f0565b600061096c826122ca565b600954909150610986906001600160a01b0316338361230b565b336001600160a01b03167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364826040516109bf9190613f7b565b60405180910390a2505b5050565b6109c982826123a7565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b6009546040517fd505accf0000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063d505accf90610a7090339030908a908a908a908a908a90600401613df3565b600060405180830381600087803b158015610a8a57600080fd5b505af1158015610a9e573d6000803e3d6000fd5b50505050610aac33866123a7565b5050505050565b610abb612559565b6001600160a01b0316610acc61113e565b6001600160a01b031614610af25760405162461bcd60e51b81526004016107d790614445565b6001600160a01b03811660009081526008602052604090205460ff1615610b2b5760405162461bcd60e51b81526004016107d79061431d565b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610b5d91611c4b565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610b9f612559565b6001600160a01b0316610bb061113e565b6001600160a01b031614610bd65760405162461bcd60e51b81526004016107d790614445565b600e5460ff1615158115151415610bec57600080fd5b600e805460ff19168215151790556040517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e8590610c2a908390613f70565b60405180910390a150565b610c3d612559565b6001600160a01b0316610c4e61113e565b6001600160a01b031614610c745760405162461bcd60e51b81526004016107d790614445565b60008111610c8157600080fd5b604051339082156108fc029083906000818181858888f19350505050158015610cae573d6000803e3d6000fd5b507f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28600082604051610c2a929190613e34565b60115481565b6001600160a01b0381166000908152600460205260409020545b919050565b610d0e612559565b6001600160a01b0316610d1f61113e565b6001600160a01b031614610d455760405162461bcd60e51b81526004016107d790614445565b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600d5481565b610daa612559565b6001600160a01b0316610dbb61113e565b6001600160a01b031614610de15760405162461bcd60e51b81526004016107d790614445565b60405163095ea7b360e01b81526001600160a01b0383169063095ea7b390610e10908490600090600401613e34565b602060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e629190613ade565b6109c957600080fd5b6000806000610e78611d49565b509092509050610e888282611ebc565b9250505090565b60056020526000908152604090205481565b610ea9612559565b6001600160a01b0316610eba61113e565b6001600160a01b031614610ee05760405162461bcd60e51b81526004016107d790614445565b7f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100600c5482604051610f139291906146d9565b60405180910390a1600c55565b610f28612559565b6001600160a01b0316610f3961113e565b6001600160a01b031614610f5f5760405162461bcd60e51b81526004016107d790614445565b60008111610f6c57600080fd5b60405163a9059cbb60e01b81526001600160a01b0383169063a9059cbb90610f9a9033908590600401613e34565b602060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190613ade565b610ff557600080fd5b7f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288282604051611026929190613e34565b60405180910390a15050565b600f5481565b611040612559565b6001600160a01b031661105161113e565b6001600160a01b0316146110775760405162461bcd60e51b81526004016107d790614445565b6000600754116110995760405162461bcd60e51b81526004016107d79061422e565b6001600160a01b03811660009081526008602052604090205460ff1615156001146110d65760405162461bcd60e51b81526004016107d79061438b565b6001600160a01b0381166000908152600860205260409020805460ff19169055600754611104906001611ebc565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b031633146111775760405162461bcd60e51b81526004016107d79061450e565b600b546040517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c00916111b6916001600160a01b03909116908490613e4d565b60405180910390a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561074e5780601f106107235761010080835404028352916020019161074e565b61124f612559565b6001600160a01b031661126061113e565b6001600160a01b0316146112865760405162461bcd60e51b81526004016107d790614445565b6127106112aa600f546112a460105485611c4b90919063ffffffff16565b90611c4b565b11156112b557600080fd5b7f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131601154826040516112e89291906146d9565b60405180910390a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b611321612559565b6001600160a01b031661133261113e565b6001600160a01b0316146113585760405162461bcd60e51b81526004016107d790614445565b6127106113766011546112a460105485611c4b90919063ffffffff16565b111561138157600080fd5b7fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2600f54826040516113b49291906146d9565b60405180910390a1600f55565b600061076933848461210c565b6113d6612559565b6001600160a01b03166113e761113e565b6001600160a01b03161461140d5760405162461bcd60e51b81526004016107d790614445565b6009546040516370a0823160e01b81526000916001600160a01b0316906370a082319061143e903090600401613dbb565b60206040518083038186803b15801561145657600080fd5b505afa15801561146a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148e9190613c17565b905060008061149b611d49565b5090925090506114ae6108278383611ebc565b6114b960001961255d565b506009546040516370a0823160e01b81526000916001600160a01b0316906370a08231906114eb903090600401613dbb565b60206040518083038186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b9190613c17565b9050856115488286611ebc565b10156115665760405162461bcd60e51b81526004016107d790614015565b60195460145460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261159d92911690600090600401613e34565b602060405180830381600087803b1580156115b757600080fd5b505af11580156115cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ef9190613ade565b5060095460145460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261162792911690600090600401613e34565b602060405180830381600087803b15801561164157600080fd5b505af1158015611655573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116799190613ade565b507fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef2346116a3610e6b565b6002546040516116b49291906146d9565b60405180910390a1600e5460ff16151560011480156116d557506001851515145b15610834576108346000610b97565b600e5460ff1681565b6116f733826123a7565b50565b600080611705611747565b9050600c5481106117395761173161271061172b600f548461260b90919063ffffffff16565b90612645565b915050610780565b600091505090565b600c5481565b600080611752612687565b935050505090565b6009546001600160a01b031681565b611771612559565b6001600160a01b031661178261113e565b6001600160a01b0316146117a85760405162461bcd60e51b81526004016107d790614445565b6127106117c6600f546112a460115485611c4b90919063ffffffff16565b11156117d157600080fd5b7f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a601054826040516118049291906146d9565b60405180910390a1601055565b428410156118315760405162461bcd60e51b81526004016107d790614354565b6001600160a01b0387166000908152600560209081526040808320805460018101909155905161188c927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928c928c928c92918c9101613f84565b6040516020818303038152906040528051906020012090506118b18882868686612c2c565b6118bc888888611c77565b5050505050505050565b600b546001600160a01b031681565b60008060006118e2611d49565b509092509050610e886118f58383611ebc565b61172b84670de0b6b3a764000061260b565b61190f612559565b6001600160a01b031661192061113e565b6001600160a01b0316146119465760405162461bcd60e51b81526004016107d790614445565b60405162461bcd60e51b81526004016107d790614545565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b600061199f611996610e6b565b6002549061260b565b6119aa575080610d01565b61076d6119b5610e6b565b60025461172b90859061260b565b6119cb612559565b6001600160a01b03166119dc61113e565b6001600160a01b031614611a025760405162461bcd60e51b81526004016107d790614445565b7fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f600d5482604051611a359291906146d9565b60405180910390a1600d55565b6000611a4f611996610e6b565b611a5b57506000610d01565b61076d60025461172b611a6c610e6b565b859061260b565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b6000604051611aa89190613d15565b6040519081900390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611ada612d02565b30604051602001611aef959493929190613fb8565b60405160208183030381529060405280519060200120905090565b611b12612559565b6001600160a01b0316611b2361113e565b6001600160a01b031614611b495760405162461bcd60e51b81526004016107d790614445565b6001600160a01b038116611b6f5760405162461bcd60e51b81526004016107d790614106565b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b323314611c065760405162461bcd60e51b81526004016107d790614163565b6000806000611c13612687565b925092509250600c54811015611c3b5760405162461bcd60e51b81526004016107d790614072565b611c46838383612d06565b505050565b600082820183811015611c705760405162461bcd60e51b81526004016107d79061419a565b9392505050565b6001600160a01b038316611c9d5760405162461bcd60e51b81526004016107d79061447a565b6001600160a01b038216611cc35760405162461bcd60e51b81526004016107d79061466d565b6001600160a01b0380841660008181526003602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590611d1e908590613f7b565b60405180910390a3505050565b80516015556040810151601755602081015160165560600151601855565b6019546040516370a0823160e01b8152600091829182916001600160a01b0316906370a0823190611d7e903090600401613dbb565b60206040518083038186803b158015611d9657600080fd5b505afa158015611daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dce9190613c17565b601a546040516370a0823160e01b81529194506001600160a01b0316906370a0823190611dff903090600401613dbb565b60206040518083038186803b158015611e1757600080fd5b505afa158015611e2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4f9190613c17565b91506000905081611e7d60155461172b611e76601754601554611ebc90919063ffffffff16565b879061260b565b1115611eb757611eb482611eae60155461172b611ea7601754601554611ebc90919063ffffffff16565b889061260b565b90611ebc565b90505b909192565b6000611c7083836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f77008152506120e0565b6000806000611f0b611d49565b919450925090506000611f59611f2586611eae8787611ebc565b611eae60175461172b611f45601654601554611ebc90919063ffffffff16565b611f538b611eae8c8c611ebc565b9061260b565b90506000611f678483611ebc565b90505b8015610834578284811115611f7c5750835b611f858161255d565b50611f8f81612fc7565b611f97611d49565b91975095509350848310611fab5750610834565b611fb58584611ebc565b915050611f6a565b6000806000611fca611d49565b9250925092506000611ffc60175461172b611ff2601654601554611ebc90919063ffffffff16565b611f538888611ebc565b90505b808410156120da57806120128584611c4b565b1115612025576120228185611ebc565b91505b601854821015612034576120da565b6014546009546040517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263a415bcad9261208b9291169086906002906000903090600401613f3c565b600060405180830381600087803b1580156120a557600080fd5b505af11580156120b9573d6000803e3d6000fd5b505050506120c682613076565b6120ce611d49565b91955093509150611fff565b50505050565b600081848411156121045760405162461bcd60e51b81526004016107d79190614002565b505050900390565b6001600160a01b0382166121325760405162461bcd60e51b81526004016107d7906144b1565b61216f816040518060600160405280602e81526020016147ce602e91396001600160a01b03861660009081526004602052604090205491906120e0565b6001600160a01b03808516600090815260046020526040808220939093559084168152205461219e9082611c4b565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611d1e908590613f7b565b61222d816040518060600160405280602781526020016147a7602791396001600160a01b03851660009081526004602052604090205491906120e0565b60046000846001600160a01b03166001600160a01b031681526020019081526020016000208190555061227d816040518060600160405280602781526020016147516027913960025491906120e0565b6002556040516000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122be908590613f7b565b60405180910390a35050565b60006122d582611efe565b60006122df611d49565b505090508083116122f057826122f4565b6000195b925060006123018461255d565b9050611c70611fbd565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906123399085908590600401613e34565b602060405180830381600087803b15801561235357600080fd5b505af1158015612367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238b9190613ade565b611c465760405162461bcd60e51b81526004016107d790614610565b600754156123e3573360009081526008602052604090205460ff1615156001146123e35760405162461bcd60e51b81526004016107d7906141d1565b600e5460ff16151560011461240a5760405162461bcd60e51b81526004016107d79061457c565b600d541561243e57600080600061241f612687565b925092509250600d5481111561243a5761243a838383612d06565b5050505b6009546040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03909116906323b872dd9061248b90339030908690600401613dcf565b602060405180830381600087803b1580156124a557600080fd5b505af11580156124b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124dd9190613ade565b6124f95760405162461bcd60e51b81526004016107d7906142e8565b61250b8261250683611989565b613101565b61251481613183565b816001600160a01b03167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c8260405161254d9190613f7b565b60405180910390a25050565b3390565b6000612568826131b4565b6014546009546040517f69328dec0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316926369328dec926125b99291169086903090600401613ec1565b602060405180830381600087803b1580156125d357600080fd5b505af11580156125e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190613c17565b60008261261a5750600061076d565b8282028284828161262757fe5b0414611c705760405162461bcd60e51b81526004016107d7906143e8565b6000611c7083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506132c6565b6013546040517fbfccff450000000000000000000000000000000000000000000000000000000081526000918291829182916001600160a01b039091169063bfccff45906126d9903090600401613dbb565b60206040518083038186803b1580156126f157600080fd5b505afa158015612705573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127299190613c17565b604080516002808252606080830184529394509091602083019080368337505060195482519293506001600160a01b03169183915060009061276757fe5b6001600160a01b039283166020918202929092010152601a5482519116908290600190811061279257fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506127ba613915565b60135482516001600160a01b0390911690639a7b5f119084906000906127dc57fe5b60200260200101516040518263ffffffff1660e01b81526004016128009190613dbb565b60a06040518083038186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128509190613afa565b905061285b816132fd565b905061286561394d565b60135483516001600160a01b0390911690630f208beb90859060009061288757fe5b6020026020010151306040518363ffffffff1660e01b81526004016128ad929190613e4d565b604080518083038186803b1580156128c457600080fd5b505afa1580156128d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fc9190613b69565b9050600061292464e8d4a5100061172b8560600151856000015161260b90919063ffffffff16565b9050612947612940836020015183611ebc90919063ffffffff16565b8690611c4b565b60135485519196506001600160a01b031690639a7b5f11908690600190811061296c57fe5b60200260200101516040518263ffffffff1660e01b81526004016129909190613dbb565b60a06040518083038186803b1580156129a857600080fd5b505afa1580156129bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e09190613afa565b92506129eb836132fd565b60135485519194506001600160a01b031690630f208beb9086906001908110612a1057fe5b6020026020010151306040518363ffffffff1660e01b8152600401612a36929190613e4d565b604080518083038186803b158015612a4d57600080fd5b505afa158015612a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a859190613b69565b9150612aab64e8d4a5100061172b8560600151856000015161260b90919063ffffffff16565b9050612ac7612940836020015183611ebc90919063ffffffff16565b9450612ad4856002612645565b601b546040516370a0823160e01b8152919650612b5b916001600160a01b03909116906370a0823190612b0b903090600401613dbb565b60206040518083038186803b158015612b2357600080fd5b505afa158015612b37573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129409190613c17565b601b54600a54601c54929750600092612b869289926001600160a01b039182169290821691166134a0565b600a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612bbc903090600401613dbb565b60206040518083038186803b158015612bd457600080fd5b505afa158015612be8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0c9190613c17565b90506000612c1a8383611c4b565b979b919a509698509650505050505050565b6000612c36611a73565b85604051602001612c48929190613d85565b604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051612c859493929190613fe4565b6020604051602081039080840390855afa158015612ca7573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811615801590612cdd5750866001600160a01b0316816001600160a01b0316145b612cf95760405162461bcd60e51b81526004016107d79061428b565b50505050505050565b4690565b6040805160028082526060808301845292602083019080368337505060195482519293506001600160a01b031691839150600090612d4057fe5b6001600160a01b039283166020918202929092010152601a54825191169082906001908110612d6b57fe5b6001600160a01b0392831660209182029290920101526013546040517f8e2eba09000000000000000000000000000000000000000000000000000000008152911690638e2eba0990612dc39030908590600401613e67565b600060405180830381600087803b158015612ddd57600080fd5b505af1158015612df1573d6000803e3d6000fd5b50506012546040517fe6c91a150000000000000000000000000000000000000000000000000000000081526001600160a01b03909116925063e6c91a159150612e3f90600190600401613f70565b600060405180830381600087803b158015612e5957600080fd5b505af1158015612e6d573d6000803e3d6000fd5b50505050612e7a8461357b565b506000612e9861271061172b6011548661260b90919063ffffffff16565b90508015612ebd57600a54600b54612ebd916001600160a01b0390811691168361230b565b6000612eda61271061172b6010548761260b90919063ffffffff16565b90508015612f0057600a54612f00906001600160a01b0316612efa61113e565b8361230b565b6000612f1d61271061172b600f548861260b90919063ffffffff16565b90508015612f3c57600a54612f3c906001600160a01b0316338361230b565b6000612f70612f5183611eae86818b8a611ebc565b600a54600954601d546001600160a01b0392831692918216911661359f565b9050612f7b81613183565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234612fa4610e6b565b600254604051612fb59291906146d9565b60405180910390a15050505050505050565b612fd081613740565b6014546009546040517f573ade810000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263573ade81926130249291169085906002903090600401613f11565b602060405180830381600087803b15801561303e57600080fd5b505af1158015613052573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c99190613c17565b61307f81613740565b6014546009546040517fe8eda9df0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263e8eda9df926130d39291169085903090600090600401613ee4565b600060405180830381600087803b1580156130ed57600080fd5b505af1158015610aac573d6000803e3d6000fd5b60025461310e9082611c4b565b6002556001600160a01b0382166000908152600460205260409020546131349082611c4b565b6001600160a01b0383166000818152600460205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906122be908590613f7b565b600081116131a35760405162461bcd60e51b81526004016107d7906145b3565b6131ac81613076565b6116f7611fbd565b60195460145460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926131eb92911690600090600401613e34565b602060405180830381600087803b15801561320557600080fd5b505af1158015613219573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061323d9190613ade565b5060195460145460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613274929116908590600401613e34565b602060405180830381600087803b15801561328e57600080fd5b505af11580156132a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c99190613ade565b600081836132e75760405162461bcd60e51b81526004016107d79190614002565b5060008385816132f357fe5b0495945050505050565b613305613915565b81604001514211613317575080610d01565b81518061332c57505042604082015280610d01565b6000613345846040015142611ebc90919063ffffffff16565b9050600061346f601360009054906101000a90046001600160a01b03166001600160a01b03166317caf6f16040518163ffffffff1660e01b815260040160206040518083038186803b15801561339a57600080fd5b505afa1580156133ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d29190613c17565b602080880151601354604080517feacdaabc000000000000000000000000000000000000000000000000000000008152905161172b94611f53936001600160a01b03169263eacdaabc9260048083019392829003018186803b15801561343757600080fd5b505afa15801561344b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e769190613c17565b90506134926134878461172b8464e8d4a5100061260b565b606087015190611c4b565b606086015250929392505050565b6000806134ad8585613800565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156134ec57600080fd5b505afa158015613500573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135249190613bb1565b5091509150866001600160a01b0316836001600160a01b03161461354457905b61356f88836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16613831565b98975050505050505050565b601b54600a54601c5460009261076d9285926001600160a01b039283169291821691165b6000806135ac8585613800565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156135eb57600080fd5b505afa1580156135ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136239190613bb1565b5091509150866001600160a01b0316836001600160a01b03161461364357905b6000806136718a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613831565b9050886001600160a01b0316856001600160a01b03161461368e57905b61369989888c613879565b604080516000815260208101918290527f022c0d9f000000000000000000000000000000000000000000000000000000009091526001600160a01b0388169063022c0d9f906136f190859085903090602481016146e7565b600060405180830381600087803b15801561370b57600080fd5b505af115801561371f573d6000803e3d6000fd5b505050508181116137305781613732565b805b9a9950505050505050505050565b60095460145460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39261377792911690600090600401613e34565b602060405180830381600087803b15801561379157600080fd5b505af11580156137a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c99190613ade565b5060095460145460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392613274929116908590600401613e34565b600080826001600160a01b0316846001600160a01b031610613823578284613826565b83835b915091509250929050565b600080613840856103e561260b565b9050600061384e828561260b565b90506000613862836112a4886103e861260b565b905061386e8282612645565b979650505050505050565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906138a79085908590600401613e34565b602060405180830381600087803b1580156138c157600080fd5b505af11580156138d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138f99190613ade565b611c465760405162461bcd60e51b81526004016107d7906146a4565b6040518060a001604052806000815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b604051806040016040528060008152602001600081525090565b80516dffffffffffffffffffffffffffff81168114610d0157600080fd5b803560ff81168114610d0157600080fd5b6000602082840312156139a7578081fd5b8135611c708161472d565b600080604083850312156139c4578081fd5b82356139cf8161472d565b915060208301356139df8161472d565b809150509250929050565b6000806000606084860312156139fe578081fd5b8335613a098161472d565b92506020840135613a198161472d565b929592945050506040919091013590565b600080600080600080600060e0888a031215613a44578283fd5b8735613a4f8161472d565b96506020880135613a5f8161472d565b95506040880135945060608801359350613a7b60808901613985565b925060a0880135915060c0880135905092959891949750929550565b60008060408385031215613aa9578182fd5b8235613ab48161472d565b946020939093013593505050565b600060208284031215613ad3578081fd5b8135611c7081614742565b600060208284031215613aef578081fd5b8151611c7081614742565b600060a08284031215613b0b578081fd5b60405160a0810181811067ffffffffffffffff82111715613b2857fe5b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151613b5d8161472d565b60808201529392505050565b600060408284031215613b7a578081fd5b6040516040810181811067ffffffffffffffff82111715613b9757fe5b604052825181526020928301519281019290925250919050565b600080600060608486031215613bc5578283fd5b613bce84613967565b9250613bdc60208501613967565b9150604084015163ffffffff81168114613bf4578182fd5b809150509250925092565b600060208284031215613c10578081fd5b5035919050565b600060208284031215613c28578081fd5b5051919050565b60008060408385031215613c41578182fd5b8235915060208301356139df81614742565b60008060008060808587031215613c68578182fd5b5050823594602084013594506040840135936060013592509050565b600080600080600060a08688031215613c9b578283fd5b8535945060208601359350613cb260408701613985565b94979396509394606081013594506080013592915050565b60008151808452815b81811015613cef57602081850181015186830182015201613cd3565b81811115613d005782602083870101525b50601f01601f19169290920160200192915050565b6000808354600180821660008114613d345760018114613d4b57613d7a565b60ff198316865260028304607f1686019350613d7a565b600283048786526020808720875b83811015613d725781548a820152908501908201613d59565b505050860193505b509195945050505050565b7f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529590961660208601526040850193909352606084019190915260ff16608083015260a082015260c081019190915260e00190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6000604082016001600160a01b03808616845260206040818601528286518085526060870191508288019450855b81811015613eb3578551851683529483019491830191600101613e95565b509098975050505050505050565b6001600160a01b0393841681526020810192909252909116604082015260600190565b6001600160a01b03948516815260208101939093529216604082015261ffff909116606082015260800190565b6001600160a01b03948516815260208101939093526040830191909152909116606082015260800190565b6001600160a01b0395861681526020810194909452604084019290925261ffff166060830152909116608082015260a00190565b901515815260200190565b90815260200190565b9586526001600160a01b0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b9485526020850193909352604084019190915260608301526001600160a01b0316608082015260a00190565b93845260ff9290921660208401526040830152606082015260800190565b600060208252611c706020830184613cca565b60208082526024908201527f426c697a7a537472617465677956313a3a7265736375654465706c6f7965644660408201527f756e647300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526019908201527f426c697a7a537472617465677956313a3a7265696e7665737400000000000000604082015260600190565b60208082526027908201527f426c697a7a537472617465677956313a3a62656c6f77206d696e696d756d207760408201527f6974686472617700000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252602e908201527f5065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f73697460408201527f732c206e6f7420616c6c6f776564000000000000000000000000000000000000606082015260800190565b60208082526034908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f20616c6c6f776564206465706f7369746f7273000000000000000000000000606082015260800190565b60208082526024908201527f417263683a3a76616c69646174655369673a20696e76616c6964207369676e6160408201527f7475726500000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f426c697a7a537472617465677956313a3a7472616e73666572206661696c6564604082015260600190565b6020808252601c908201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604082015260600190565b6020808252600f908201527f7065726d69743a3a657870697265640000000000000000000000000000000000604082015260600190565b6020808252602a908201527f5065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e60408201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601c908201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604082015260600190565b60208082526034908201527f5f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657260408201527f20746f20746865207a65726f2061646472657373000000000000000000000000606082015260800190565b60208082526014908201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604082015260600190565b6020808252600a908201527f4465707265636174656400000000000000000000000000000000000000000000604082015260600190565b60208082526019908201527f426c697a7a537472617465677956313a3a5f6465706f73697400000000000000604082015260600190565b60208082526024908201527f426c697a7a537472617465677956313a3a5f7374616b654465706f736974546f60408201527f6b656e7300000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f426c697a7a537472617465677956313a3a5452414e534645525f46524f4d5f4660408201527f41494c4544000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604082015260600190565b6020808252818101527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604082015260600190565b918252602082015260400190565b60008582528460208301526001600160a01b0384166040830152608060608301526147156080830184613cca565b9695505050505050565b60ff91909116815260200190565b6001600160a01b03811681146116f757600080fd5b80151581146116f757600080fdfe5f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c797472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220b84f369aad3bd86ca60fb2f4d28bd76df33356be39e0c0db30117a23bef4c8f664736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "details": "Must mint receipt tokens to `msg.sender`",
        "params": {
          "amount": "deposit tokens"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Should revert for tokens without Permit",
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "title": "Blizz strategy for ERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit and deploy deposits tokens to the strategy"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimated deposit token balance deployed by strategy, excluding balance"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6072,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6075,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6080,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6086,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6090,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6106,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19822,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 19935,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19939,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7456,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)11402"
      },
      {
        "astId": 7458,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)11402"
      },
      {
        "astId": 7460,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 7462,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 7464,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 7466,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 7468,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 7470,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7472,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 35381,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "rewardDistribution",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IBlizzMultiFeeDistribution)10911"
      },
      {
        "astId": 35383,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "blizzChef",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(IBlizzChef)10903"
      },
      {
        "astId": 35385,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "tokenDelegator",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(ILendingPool)13876"
      },
      {
        "astId": 35392,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "leverageLevel",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 35394,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "safetyFactor",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 35396,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "leverageBips",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 35398,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "minMinting",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 35400,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "avToken",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 35402,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "avDebtToken",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 35404,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "poolRewardToken",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 35406,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "swapPairPoolReward",
        "offset": 0,
        "slot": "28",
        "type": "t_contract(IPair)14641"
      },
      {
        "astId": 35408,
        "contract": "contracts/strategies/BlizzStrategyV1.sol:BlizzStrategyV1",
        "label": "swapPairRewardDeposit",
        "offset": 0,
        "slot": "29",
        "type": "t_contract(IPair)14641"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBlizzChef)10903": {
        "encoding": "inplace",
        "label": "contract IBlizzChef",
        "numberOfBytes": "20"
      },
      "t_contract(IBlizzMultiFeeDistribution)10911": {
        "encoding": "inplace",
        "label": "contract IBlizzMultiFeeDistribution",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)11402": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)13876": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)14641": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}