{
  "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_rewardController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenDelegator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_swapPairToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_avToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_avDebtToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safetyFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMinting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokensToReinvest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_adminFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reinvestRewardBips",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AllowDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "DepositsEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalDeposits",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalSupply",
          "type": "uint256"
        }
      ],
      "name": "Reinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "RemoveDepositor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateAdminFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "UpdateDevAddr",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateDevFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMaxTokensToDepositWithoutReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinTokensToReinvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "UpdateReinvestReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITS_ENABLED",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEV_FEE_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_TOKENS_TO_REINVEST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REINVEST_REWARD_BIPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "allowDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedDepositors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "depositWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateDeployedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "estimateReinvestReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActualLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokensForShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getSharesForDepositTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numberOfAllowedDepositors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "removeDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minReturnAmountAccepted",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "disableDeposits",
          "type": "bool"
        }
      ],
      "name": "rescueDeployedFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setAllowances",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateAdminFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "newValue",
          "type": "bool"
        }
      ],
      "name": "updateDepositsEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverageLevel",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_safetyFactor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minMinting",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leverageBips",
          "type": "uint256"
        }
      ],
      "name": "updateLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxTokensToDepositWithoutReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinTokensToReinvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateReinvestReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
    "transactionIndex": 0,
    "gasUsed": "4070811",
    "logsBloom": "0x
    "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46",
    "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000372d5a1612f0b50619de321814ba5f63f9680823",
          "0x0000000000000000000000004f01aed16d97e3ab5ab2b501154dc9bb0f1a5a2c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000372d5a1612f0b50619de321814ba5f63f9680823",
          "0x0000000000000000000000004f01aed16d97e3ab5ab2b501154dc9bb0f1a5a2c"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0x481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef849901100"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009184e72a000",
        "logIndex": 3,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0x3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bc",
        "logIndex": 4,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0x2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d651726131"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 5,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0xe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f2"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064",
        "logIndex": 6,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0x7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e85"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 7,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000dcedf06fd33e1d7b6eb4b309f779a0e9d3172e44",
          "0x0000000000000000000000008d36c5c6947adccd25ef49ea1aac2ceacfff0bd7"
        ],
        "data": "0x",
        "logIndex": 8,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 5348611,
        "transactionHash": "0x505de8137d0f57ebd6b6f9a79d082404d0036bd672a053568d662a2bc7e45811",
        "address": "0x372d5A1612F0B50619DE321814Ba5F63f9680823",
        "topics": [
          "0xc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 9,
        "blockHash": "0xf1c01e32c648bcf1548a3baa3883d347e93964e13fa903c5174ce05f1db3df46"
      }
    ],
    "blockNumber": 5348611,
    "cumulativeGasUsed": "4070811",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Yield Yak: Aave DAI.e",
    "0x01D83Fe6A10D2f2B7AF17034343746188272cAc9",
    "0x4f01aed16d97e3ab5ab2b501154dc9bb0f1a5a2c",
    "0xd586E7F844cEa2F87f50152665BCbc2C279D8d70",
    "0x87dee1cc9ffd464b79e058ba20387c1984aed86a",
    "0x47AFa96Cdc9fAb46904A55a6ad4bf6660B53c38a",
    "0x1852DC24d1a8956a0B356AA18eDe954c7a0Ca5ae",
    "0x8d36C5c6947ADCcd25Ef49Ea1aAC2ceACFff0bD7",
    "40000",
    "7120",
    "10000",
    "1000000000000",
    "10000000000000",
    700,
    0,
    100
  ],
  "solcInputHash": "30871bd8b1cb96307bd23ef44b477070",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_rewardController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenDelegator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_swapPairToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_avToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_avDebtToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMinting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensToReinvest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_adminFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reinvestRewardBips\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AllowDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"DepositsEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalDeposits\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalSupply\",\"type\":\"uint256\"}],\"name\":\"Reinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RemoveDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateAdminFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"UpdateDevAddr\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateDevFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMaxTokensToDepositWithoutReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateMinTokensToReinvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"UpdateReinvestReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITS_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEV_FEE_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_TOKENS_TO_REINVEST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REINVEST_REWARD_BIPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"allowDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedDepositors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateDeployedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"estimateReinvestReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActualLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getDepositTokensForShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getSharesForDepositTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numberOfAllowedDepositors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"removeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minReturnAmountAccepted\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"disableDeposits\",\"type\":\"bool\"}],\"name\":\"rescueDeployedFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setAllowances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateAdminFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newValue\",\"type\":\"bool\"}],\"name\":\"updateDepositsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverageLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_safetyFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minMinting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leverageBips\",\"type\":\"uint256\"}],\"name\":\"updateLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxTokensToDepositWithoutReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinTokensToReinvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateReinvestReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead\",\"params\":{\"amount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"checkReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"deposit(uint256)\":{\"details\":\"Must mint receipt tokens to `msg.sender`\",\"params\":{\"amount\":\"deposit tokens\"}},\"depositFor(address,uint256)\":{\"details\":\"Must mint receipt tokens to `account`\",\"params\":{\"account\":\"address to receive receipt tokens\",\"amount\":\"deposit tokens\"}},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Should revert for tokens without Permit\",\"params\":{\"amount\":\"Amount of tokens to deposit\",\"deadline\":\"The time at which to expire the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"estimateDeployedBalance()\":{\"returns\":{\"_0\":\"deposit tokens\"}},\"estimateReinvestReward()\":{\"returns\":{\"_0\":\"reward tokens\"}},\"getDepositTokensForShares(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"},\"returns\":{\"_0\":\"deposit tokens\"}},\"getDomainSeparator()\":{\"returns\":{\"_0\":\"Separator\"}},\"getSharesForDepositTokens(uint256)\":{\"details\":\"If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens\",\"params\":{\"amount\":\"deposit tokens\"},\"returns\":{\"_0\":\"receipt tokens\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"deadline\":\"The time at which to expire the signature\",\"owner\":\"The address to approve from\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"spender\":\"The address to be approved\",\"v\":\"The recovery byte of the signature\",\"value\":\"The number of tokens that are approved (2^256-1 means infinite)\"}},\"recoverAVAX(uint256)\":{\"params\":{\"amount\":\"amount\"}},\"recoverERC20(address,uint256)\":{\"params\":{\"tokenAddress\":\"token address\",\"tokenAmount\":\"amount to recover\"}},\"removeDepositor(address)\":{\"params\":{\"depositor\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"rescueDeployedFunds(uint256,bool)\":{\"params\":{\"disableDeposits\":\"bool\",\"minReturnAmountAccepted\":\"min deposit tokens to receive\"}},\"revokeAllowance(address,address)\":{\"params\":{\"spender\":\"address\",\"token\":\"address\"}},\"setAllowances()\":{\"details\":\"Should use modifier `onlyOwner` to avoid griefing\"},\"totalDeposits()\":{\"returns\":{\"_0\":\"total deposits available on the contract\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdminFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateDepositsEnabled(bool)\":{\"params\":{\"newValue\":\"bool\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"updateDevFee(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateMinTokensToReinvest(uint256)\":{\"params\":{\"newValue\":\"threshold\"}},\"updateReinvestReward(uint256)\":{\"params\":{\"newValue\":\"fee in BIPS\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"receipt tokens\"}}},\"title\":\"Aave strategy for ERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allowDepositor(address)\":{\"notice\":\"Add an allowed depositor\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkReward()\":{\"notice\":\"Reward tokens avialable to strategy, including balance\"},\"deposit(uint256)\":{\"notice\":\"Deposit and deploy deposits tokens to the strategy\"},\"depositFor(address,uint256)\":{\"notice\":\"Deposit on behalf of another account\"},\"depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Deposit using Permit\"},\"estimateDeployedBalance()\":{\"notice\":\"Estimated deposit token balance deployed by strategy, excluding balance\"},\"estimateReinvestReward()\":{\"notice\":\"Estimate reinvest reward\"},\"getDepositTokensForShares(uint256)\":{\"notice\":\"Calculate deposit tokens for a given amount of receipt tokens\"},\"getDomainSeparator()\":{\"notice\":\"EIP-712 Domain separator\"},\"getSharesForDepositTokens(uint256)\":{\"notice\":\"Calculate receipt tokens for a given amount of deposit tokens\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Triggers an approval from owner to spender\"},\"recoverAVAX(uint256)\":{\"notice\":\"Recover AVAX from contract\"},\"recoverERC20(address,uint256)\":{\"notice\":\"Recover ERC20 from contract\"},\"reinvest()\":{\"notice\":\"Reinvest reward tokens into deposit tokens\"},\"removeDepositor(address)\":{\"notice\":\"Remove an allowed depositor\"},\"rescueDeployedFunds(uint256,bool)\":{\"notice\":\"Rescue all available deployed deposit tokens back to Strategy\"},\"revokeAllowance(address,address)\":{\"notice\":\"Revoke token allowance\"},\"setAllowances()\":{\"notice\":\"Approve tokens for use in Strategy\"},\"totalDeposits()\":{\"notice\":\"This function returns a snapshot of last available quotes\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"updateAdminFee(uint256)\":{\"notice\":\"Update admin fee\"},\"updateDepositsEnabled(bool)\":{\"notice\":\"Enable/disable deposits\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"updateDevFee(uint256)\":{\"notice\":\"Update developer fee\"},\"updateMaxTokensToDepositWithoutReinvest(uint256)\":{\"notice\":\"Update reinvest max threshold before a deposit\"},\"updateMinTokensToReinvest(uint256)\":{\"notice\":\"Update reinvest min threshold\"},\"updateReinvestReward(uint256)\":{\"notice\":\"Update reinvest reward\"},\"withdraw(uint256)\":{\"notice\":\"Redeem receipt tokens for deposit tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/AaveStrategyV1.sol\":\"AaveStrategyV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/YakERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\n\\nabstract contract YakERC20 {\\n    using SafeMath for uint256;\\n\\n    string public name = \\\"Yield Yak\\\";\\n    string public symbol = \\\"YRT\\\";\\n    uint8 public constant decimals = 18;\\n    uint256 public totalSupply;\\n  \\n    mapping (address => mapping (address => uint256)) internal allowances;\\n    mapping (address => uint256) internal balances;\\n\\n    /// @dev keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n    bytes32 public constant DOMAIN_TYPEHASH = 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f;\\n\\n    /// @dev keccak256(\\\"1\\\");\\n    bytes32 public constant VERSION_HASH = 0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6;\\n\\n    /// @dev keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint) public nonces;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    constructor() {}\\n\\n    /**\\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n     * @param account The address of the account holding the funds\\n     * @param spender The address of the account spending the funds\\n     * @return The number of tokens approved\\n     */\\n    function allowance(address account, address spender) external view returns (uint) {\\n        return allowances[account][spender];\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * It is recommended to use increaseAllowance and decreaseAllowance instead\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the number of tokens held by the `account`\\n     * @param account The address of the account to get the balance of\\n     * @return The number of tokens held\\n     */\\n    function balanceOf(address account) external view returns (uint) {\\n        return balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) external returns (bool) {\\n        _transferTokens(msg.sender, dst, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool) {\\n        address spender = msg.sender;\\n        uint256 spenderAllowance = allowances[src][spender];\\n\\n        if (spender != src && spenderAllowance != uint256(-1)) {\\n            uint256 newAllowance = spenderAllowance.sub(amount, \\\"transferFrom: transfer amount exceeds allowance\\\");\\n            allowances[src][spender] = newAllowance;\\n\\n            emit Approval(src, spender, newAllowance);\\n        }\\n\\n        _transferTokens(src, dst, amount);\\n        return true;\\n    }\\n\\n\\n    /**\\n     * @notice Approval implementation\\n     * @param owner The address of the account which owns tokens\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (2^256-1 means infinite)\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        require(owner != address(0), \\\"_approve::owner zero address\\\");\\n        require(spender != address(0), \\\"_approve::spender zero address\\\");\\n        allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @notice Transfer implementation\\n     * @param from The address of the account which owns tokens\\n     * @param to The address of the account which is receiving tokens\\n     * @param value The number of tokens that are being transferred\\n     */\\n    function _transferTokens(address from, address to, uint256 value) internal {\\n        require(to != address(0), \\\"_transferTokens: cannot transfer to the zero address\\\");\\n\\n        balances[from] = balances[from].sub(value, \\\"_transferTokens: transfer exceeds from balance\\\");\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(from, to, value);\\n    }\\n\\n    function _mint(address to, uint256 value) internal {\\n        totalSupply = totalSupply.add(value);\\n        balances[to] = balances[to].add(value);\\n        emit Transfer(address(0), to, value);\\n    }\\n\\n    function _burn(address from, uint256 value) internal {\\n        balances[from] = balances[from].sub(value, \\\"_burn: burn amount exceeds from balance\\\");\\n        totalSupply = totalSupply.sub(value, \\\"_burn: burn amount exceeds total supply\\\");\\n        emit Transfer(from, address(0), value);\\n    }\\n\\n    /**\\n     * @notice Triggers an approval from owner to spender\\n     * @param owner The address to approve from\\n     * @param spender The address to be approved\\n     * @param value The number of tokens that are approved (2^256-1 means infinite)\\n     * @param deadline The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external {\\n        require(deadline >= block.timestamp, \\\"permit::expired\\\");\\n\\n        bytes32 encodeData = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\\n        _validateSignedData(owner, encodeData, v, r, s);\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @notice Recovers address from signed data and validates the signature\\n     * @param signer Address that signed the data\\n     * @param encodeData Data signed by the address\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function _validateSignedData(address signer, bytes32 encodeData, uint8 v, bytes32 r, bytes32 s) internal view {\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                getDomainSeparator(),\\n                encodeData\\n            )\\n        );\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        // Explicitly disallow authorizations for address(0) as ecrecover returns address(0) on malformed messages\\n        require(recoveredAddress != address(0) && recoveredAddress == signer, \\\"Arch::validateSig: invalid signature\\\");\\n    }\\n\\n    /**\\n     * @notice EIP-712 Domain separator\\n     * @return Separator\\n     */\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                DOMAIN_TYPEHASH,\\n                keccak256(bytes(name)),\\n                VERSION_HASH,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Current id of the chain where this contract is deployed\\n     * @return Chain id\\n     */\\n    function _getChainId() internal pure returns (uint) {\\n        uint256 chainId;\\n        assembly { chainId := chainid() }\\n        return chainId;\\n    }\\n}\",\"keccak256\":\"0x9d569919319add1e8ee2020ad24e1cba09c67094b58a40f825522d1f7729de64\",\"license\":\"MIT\"},\"contracts/YakStrategyV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2 is YakERC20, Ownable, Permissioned {\\n    using SafeMath for uint;\\n\\n\\n    IERC20 public depositToken;\\n    IERC20 public rewardToken;\\n    address public devAddr;\\n\\n    uint public MIN_TOKENS_TO_REINVEST;\\n    uint public MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST;\\n    bool public DEPOSITS_ENABLED;\\n\\n    uint public REINVEST_REWARD_BIPS;\\n    uint public ADMIN_FEE_BIPS;\\n    uint public DEV_FEE_BIPS;\\n\\n    uint constant internal BIPS_DIVISOR = 10000;\\n    uint constant internal MAX_UINT = uint(-1);\\n\\n    event Deposit(address indexed account, uint amount);\\n    event Withdraw(address indexed account, uint amount);\\n    event Reinvest(uint newTotalDeposits, uint newTotalSupply);\\n    event Recovered(address token, uint amount);\\n    event UpdateAdminFee(uint oldValue, uint newValue);\\n    event UpdateDevFee(uint oldValue, uint newValue);\\n    event UpdateReinvestReward(uint oldValue, uint newValue);\\n    event UpdateMinTokensToReinvest(uint oldValue, uint newValue);\\n    event UpdateMaxTokensToDepositWithoutReinvest(uint oldValue, uint newValue);\\n    event UpdateDevAddr(address oldValue, address newValue);\\n    event DepositsEnabled(bool newValue);\\n\\n    /**\\n     * @notice Throws if called by smart contract\\n     */\\n    modifier onlyEOA() {\\n        require(tx.origin == msg.sender, \\\"YakStrategy::onlyEOA\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Only called by dev\\n     */\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YakStrategy::onlyDev\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Approve tokens for use in Strategy\\n     * @dev Should use modifier `onlyOwner` to avoid griefing\\n     */\\n    function setAllowances() public virtual;\\n\\n    /**\\n     * @notice Revoke token allowance\\n     * @param token address\\n     * @param spender address\\n     */\\n    function revokeAllowance(address token, address spender) external onlyOwner {\\n        require(IERC20(token).approve(spender, 0));\\n    }\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     * @param amount deposit tokens\\n     */\\n    function deposit(uint amount) external virtual;\\n\\n    /**\\n    * @notice Deposit using Permit\\n    * @dev Should revert for tokens without Permit\\n    * @param amount Amount of tokens to deposit\\n    * @param deadline The time at which to expire the signature\\n    * @param v The recovery byte of the signature\\n    * @param r Half of the ECDSA signature pair\\n    * @param s Half of the ECDSA signature pair\\n    */\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     * @param amount deposit tokens\\n     */\\n    function depositFor(address account, uint amount) external virtual;\\n\\n    /**\\n     * @notice Redeem receipt tokens for deposit tokens\\n     * @param amount receipt tokens\\n     */\\n    function withdraw(uint amount) external virtual;\\n\\n    /**\\n     * @notice Reinvest reward tokens into deposit tokens\\n     */\\n    function reinvest() external virtual;\\n\\n    /**\\n     * @notice Estimate reinvest reward\\n     * @return reward tokens\\n     */\\n    function estimateReinvestReward() external view returns (uint) {\\n        uint unclaimedRewards = checkReward();\\n        if (unclaimedRewards >= MIN_TOKENS_TO_REINVEST) {\\n            return unclaimedRewards.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        }\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Reward tokens avialable to strategy, including balance\\n     * @return reward tokens\\n     */\\n    function checkReward() public virtual view returns (uint);\\n\\n    /**\\n     * @notice Estimated deposit token balance deployed by strategy, excluding balance\\n     * @return deposit tokens\\n     */\\n    function estimateDeployedBalance() external virtual view returns (uint);\\n\\n    /**\\n     * @notice Rescue all available deployed deposit tokens back to Strategy\\n     * @param minReturnAmountAccepted min deposit tokens to receive\\n     * @param disableDeposits bool\\n     */\\n    function rescueDeployedFunds(uint minReturnAmountAccepted, bool disableDeposits) external virtual;\\n\\n    /**\\n     * @notice This function returns a snapshot of last available quotes\\n     * @return total deposits available on the contract\\n     */\\n    function totalDeposits() public virtual view returns (uint);\\n    /**\\n     * @notice Calculate receipt tokens for a given amount of deposit tokens\\n     * @dev If contract is empty, use 1:1 ratio\\n     * @dev Could return zero shares for very low amounts of deposit tokens\\n     * @param amount deposit tokens\\n     * @return receipt tokens\\n     */\\n    function getSharesForDepositTokens(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return amount;\\n        }\\n        return amount.mul(totalSupply).div(totalDeposits());\\n    }\\n\\n    /**\\n     * @notice Calculate deposit tokens for a given amount of receipt tokens\\n     * @param amount receipt tokens\\n     * @return deposit tokens\\n     */\\n    function getDepositTokensForShares(uint amount) public view returns (uint) {\\n        if (totalSupply.mul(totalDeposits()) == 0) {\\n            return 0;\\n        }\\n        return amount.mul(totalDeposits()).div(totalSupply);\\n    }\\n\\n    /**\\n     * @notice Update reinvest min threshold\\n     * @param newValue threshold\\n     */\\n    function updateMinTokensToReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMinTokensToReinvest(MIN_TOKENS_TO_REINVEST, newValue);\\n        MIN_TOKENS_TO_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest max threshold before a deposit\\n     * @param newValue threshold\\n     */\\n    function updateMaxTokensToDepositWithoutReinvest(uint newValue) public onlyOwner {\\n        emit UpdateMaxTokensToDepositWithoutReinvest(MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST, newValue);\\n        MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST = newValue;\\n    }\\n\\n    /**\\n     * @notice Update developer fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateDevFee(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateDevFee(DEV_FEE_BIPS, newValue);\\n        DEV_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update admin fee\\n     * @param newValue fee in BIPS\\n     */\\n    function updateAdminFee(uint newValue) public onlyOwner {\\n        require(newValue.add(DEV_FEE_BIPS).add(REINVEST_REWARD_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateAdminFee(ADMIN_FEE_BIPS, newValue);\\n        ADMIN_FEE_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Update reinvest reward\\n     * @param newValue fee in BIPS\\n     */\\n    function updateReinvestReward(uint newValue) public onlyOwner {\\n        require(newValue.add(ADMIN_FEE_BIPS).add(DEV_FEE_BIPS) <= BIPS_DIVISOR);\\n        emit UpdateReinvestReward(REINVEST_REWARD_BIPS, newValue);\\n        REINVEST_REWARD_BIPS = newValue;\\n    }\\n\\n    /**\\n     * @notice Enable/disable deposits\\n     * @param newValue bool\\n     */\\n    function updateDepositsEnabled(bool newValue) public onlyOwner {\\n        require(DEPOSITS_ENABLED != newValue);\\n        DEPOSITS_ENABLED = newValue;\\n        emit DepositsEnabled(newValue);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) public onlyDev {\\n        emit UpdateDevAddr(devAddr, newValue);\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Recover ERC20 from contract\\n     * @param tokenAddress token address\\n     * @param tokenAmount amount to recover\\n     */\\n    function recoverERC20(address tokenAddress, uint tokenAmount) external onlyOwner {\\n        require(tokenAmount > 0);\\n        require(IERC20(tokenAddress).transfer(msg.sender, tokenAmount));\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    /**\\n     * @notice Recover AVAX from contract\\n     * @param amount amount\\n     */\\n    function recoverAVAX(uint amount) external onlyOwner {\\n        require(amount > 0);\\n        msg.sender.transfer(amount);\\n        emit Recovered(address(0), amount);\\n    }\\n}\",\"keccak256\":\"0x8ce774ed685b2fc2ad94f2aa5bc57809d1f62c6d833e2a74e9006920fc6b03b5\",\"license\":\"MIT\"},\"contracts/YakStrategyV2Payable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./lib/SafeMath.sol\\\";\\nimport \\\"./lib/Ownable.sol\\\";\\nimport \\\"./lib/Permissioned.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./YakERC20.sol\\\";\\nimport \\\"./YakStrategyV2.sol\\\";\\n\\n/**\\n * @notice YakStrategy should be inherited by new strategies\\n */\\nabstract contract YakStrategyV2Payable is YakStrategyV2 {\\n\\n    /**\\n     * @notice Deposit and deploy deposits tokens to the strategy using AVAX\\n     * @dev Must mint receipt tokens to `msg.sender`\\n     */\\n    function deposit() external payable virtual;\\n\\n    /**\\n     * @notice Deposit on behalf of another account using AVAX\\n     * @dev Must mint receipt tokens to `account`\\n     * @param account address to receive receipt tokens\\n     */\\n    function depositFor(address account) external payable virtual;\\n\\n}\",\"keccak256\":\"0xfa1357987d17d8db1dd004ee417fd6239952719ab03e9abefec94e798bf6cc6d\",\"license\":\"MIT\"},\"contracts/interfaces/IAaveIncentivesController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// check 0x01D83Fe6A10D2f2B7AF17034343746188272cAc9\\n\\ninterface IAaveIncentivesController {\\n    event RewardsAccrued(address indexed user, uint256 amount);\\n\\n    event RewardsClaimed(\\n        address indexed user,\\n        address indexed to,\\n        address indexed claimer,\\n        uint256 amount\\n    );\\n\\n    event ClaimerSet(address indexed user, address indexed claimer);\\n\\n    /**\\n     * @dev Whitelists an address to claim the rewards on behalf of another address\\n     * @param user The address of the user\\n     * @param claimer The address of the claimer\\n     */\\n    function setClaimer(address user, address claimer) external;\\n\\n    /**\\n     * @dev Returns the whitelisted claimer for a certain address (0x0 if not set)\\n     * @param user The address of the user\\n     * @return The claimer address\\n     */\\n    function getClaimer(address user) external view returns (address);\\n\\n    /**\\n     * @dev Configure assets for a certain rewards emission\\n     * @param assets The assets to incentivize\\n     * @param emissionsPerSecond The emission for each asset\\n     */\\n    function configureAssets(\\n        address[] calldata assets,\\n        uint256[] calldata emissionsPerSecond\\n    ) external;\\n\\n    /**\\n     * @dev Called by the corresponding asset on any update that affects the rewards distribution\\n     * @param asset The address of the user\\n     * @param userBalance The balance of the user of the asset in the lending pool\\n     * @param totalSupply The total supply of the asset in the lending pool\\n     **/\\n    function handleAction(\\n        address asset,\\n        uint256 userBalance,\\n        uint256 totalSupply\\n    ) external;\\n\\n    /**\\n     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\\n     * @param user The address of the user\\n     * @return The rewards\\n     **/\\n    function getRewardsBalance(address[] calldata assets, address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\\n     * @param amount Amount of rewards to claim\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewards(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\\n     * be whitelisted via \\\"allowClaimOnBehalf\\\" function by the RewardsAdmin role manager\\n     * @param amount Amount of rewards to claim\\n     * @param user Address to check and claim rewards\\n     * @param to Address that will be receiving the rewards\\n     * @return Rewards claimed\\n     **/\\n    function claimRewardsOnBehalf(\\n        address[] calldata assets,\\n        uint256 amount,\\n        address user,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev returns the unclaimed rewards of the user\\n     * @param user the address of the user\\n     * @return the unclaimed user rewards\\n     */\\n    function getUserUnclaimedRewards(address user)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev for backward compatibility with previous implementation of the Incentives controller\\n     */\\n    function REWARD_TOKEN() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5ac41cdc121722fb8a0c0ba5860eb815948571055b0c7ea76d957eacd8d71c9a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x2bac03f58760cfbe9fc44f16681bc9be8be40a99b40462f7d29c13134eb0d61b\",\"license\":\"MIT\"},\"contracts/interfaces/ILendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\npragma experimental ABIEncoderV2;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {\\n        NONE,\\n        STABLE,\\n        VARIABLE\\n    }\\n}\\n\\ninterface ILendingPool {\\n    /**\\n     * @dev Emitted on deposit()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address initiating the deposit\\n     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n     * @param amount The amount deposited\\n     * @param referral The referral code used\\n     **/\\n    event Deposit(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on withdraw()\\n     * @param reserve The address of the underlyng asset being withdrawn\\n     * @param user The address initiating the withdrawal, owner of aTokens\\n     * @param to Address that will receive the underlying\\n     * @param amount The amount to be withdrawn\\n     **/\\n    event Withdraw(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed to,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n     * @param reserve The address of the underlying asset being borrowed\\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n     * initiator of the transaction on flashLoan()\\n     * @param onBehalfOf The address that will be getting the debt\\n     * @param amount The amount borrowed out\\n     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n     * @param borrowRate The numeric rate at which the user has borrowed\\n     * @param referral The referral code used\\n     **/\\n    event Borrow(\\n        address indexed reserve,\\n        address user,\\n        address indexed onBehalfOf,\\n        uint256 amount,\\n        uint256 borrowRateMode,\\n        uint256 borrowRate,\\n        uint16 indexed referral\\n    );\\n\\n    /**\\n     * @dev Emitted on repay()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The beneficiary of the repayment, getting his debt reduced\\n     * @param repayer The address of the user initiating the repay(), providing the funds\\n     * @param amount The amount repaid\\n     **/\\n    event Repay(\\n        address indexed reserve,\\n        address indexed user,\\n        address indexed repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Emitted on swapBorrowRateMode()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user swapping his rate mode\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralEnabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on setUserUseReserveAsCollateral()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user enabling the usage as collateral\\n     **/\\n    event ReserveUsedAsCollateralDisabled(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on rebalanceStableBorrowRate()\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param user The address of the user for which the rebalance has been executed\\n     **/\\n    event RebalanceStableBorrowRate(\\n        address indexed reserve,\\n        address indexed user\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan()\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     * @param referralCode The referral code used\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium,\\n        uint16 referralCode\\n    );\\n\\n    /**\\n     * @dev Emitted when the pause is triggered.\\n     */\\n    event Paused();\\n\\n    /**\\n     * @dev Emitted when the pause is lifted.\\n     */\\n    event Unpaused();\\n\\n    /**\\n     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n     * LendingPoolCollateral manager using a DELEGATECALL\\n     * This allows to have the events in the generated ABI for LendingPool.\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n     * @param liquidator The address of the liquidator\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    event LiquidationCall(\\n        address indexed collateralAsset,\\n        address indexed debtAsset,\\n        address indexed user,\\n        uint256 debtToCover,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator,\\n        bool receiveAToken\\n    );\\n\\n    /**\\n     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n     * gets added to the LendingPool ABI\\n     * @param reserve The address of the underlying asset of the reserve\\n     * @param liquidityRate The new liquidity rate\\n     * @param stableBorrowRate The new stable borrow rate\\n     * @param variableBorrowRate The new variable borrow rate\\n     * @param liquidityIndex The new liquidity index\\n     * @param variableBorrowIndex The new variable borrow index\\n     **/\\n    event ReserveDataUpdated(\\n        address indexed reserve,\\n        uint256 liquidityRate,\\n        uint256 stableBorrowRate,\\n        uint256 variableBorrowRate,\\n        uint256 liquidityIndex,\\n        uint256 variableBorrowIndex\\n    );\\n\\n    /**\\n     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n     * @param asset The address of the underlying asset to deposit\\n     * @param amount The amount to be deposited\\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n     *   is a different wallet\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function deposit(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n     * @param asset The address of the underlying asset to withdraw\\n     * @param amount The underlying amount to be withdrawn\\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n     * @param to Address that will receive the underlying, same as msg.sender if the user\\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n     *   different wallet\\n     * @return The final amount withdrawn\\n     **/\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n     * @param asset The address of the underlying asset to borrow\\n     * @param amount The amount to be borrowed\\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n     * if he has been given credit delegation allowance\\n     **/\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external;\\n\\n    /**\\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n     * @param asset The address of the borrowed underlying asset previously borrowed\\n     * @param amount The amount to repay\\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n     * other borrower whose debt should be removed\\n     * @return The final amount repaid\\n     **/\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external returns (uint256);\\n\\n    /**\\n     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n     * @param asset The address of the underlying asset borrowed\\n     * @param rateMode The rate mode that the user wants to swap to\\n     **/\\n    function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n    /**\\n     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n     * - Users can be rebalanced if the following conditions are satisfied:\\n     *     1. Usage ratio is above 95%\\n     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n     *        borrowed at a stable rate and depositors are not earning enough\\n     * @param asset The address of the underlying asset borrowed\\n     * @param user The address of the user to be rebalanced\\n     **/\\n    function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n    /**\\n     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n     * @param asset The address of the underlying asset deposited\\n     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n     **/\\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n        external;\\n\\n    /**\\n     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n     * @param user The address of the borrower getting liquidated\\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n     * to receive the underlying collateral asset directly\\n     **/\\n    function liquidationCall(\\n        address collateralAsset,\\n        address debtAsset,\\n        address user,\\n        uint256 debtToCover,\\n        bool receiveAToken\\n    ) external;\\n\\n    /**\\n     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n     * as long as the amount taken plus a fee is returned.\\n     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n     * For further details please visit https://developers.aave.com\\n     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n     * @param assets The addresses of the assets being flash-borrowed\\n     * @param amounts The amounts amounts being flash-borrowed\\n     * @param modes Types of the debt to open if the flash loan is not returned:\\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n     * @param params Variadic packed params to pass to the receiver as extra information\\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n     *   0 if the action is executed directly by the user, without any middle-man\\n     **/\\n    function flashLoan(\\n        address receiverAddress,\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        address onBehalfOf,\\n        bytes calldata params,\\n        uint16 referralCode\\n    ) external;\\n\\n    /**\\n     * @dev Returns the user account data across all the reserves\\n     * @param user The address of the user\\n     * @return totalCollateralETH the total collateral in ETH of the user\\n     * @return totalDebtETH the total debt in ETH of the user\\n     * @return availableBorrowsETH the borrowing power left of the user\\n     * @return currentLiquidationThreshold the liquidation threshold of the user\\n     * @return ltv the loan to value of the user\\n     * @return healthFactor the current health factor of the user\\n     **/\\n    function getUserAccountData(address user)\\n        external\\n        view\\n        returns (\\n            uint256 totalCollateralETH,\\n            uint256 totalDebtETH,\\n            uint256 availableBorrowsETH,\\n            uint256 currentLiquidationThreshold,\\n            uint256 ltv,\\n            uint256 healthFactor\\n        );\\n\\n    function initReserve(\\n        address reserve,\\n        address aTokenAddress,\\n        address stableDebtAddress,\\n        address variableDebtAddress,\\n        address interestRateStrategyAddress\\n    ) external;\\n\\n    function setReserveInterestRateStrategyAddress(\\n        address reserve,\\n        address rateStrategyAddress\\n    ) external;\\n\\n    function setConfiguration(address reserve, uint256 configuration) external;\\n\\n    /**\\n     * @dev Returns the configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The configuration of the reserve\\n     **/\\n    function getConfiguration(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the configuration of the user across all the reserves\\n     * @param user The user address\\n     * @return The configuration of the user\\n     **/\\n    function getUserConfiguration(address user)\\n        external\\n        view\\n        returns (DataTypes.UserConfigurationMap memory);\\n\\n    /**\\n     * @dev Returns the normalized income normalized income of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve's normalized income\\n     */\\n    function getReserveNormalizedIncome(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the normalized variable debt per unit of asset\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The reserve normalized variable debt\\n     */\\n    function getReserveNormalizedVariableDebt(address asset)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @dev Returns the state and configuration of the reserve\\n     * @param asset The address of the underlying asset of the reserve\\n     * @return The state of the reserve\\n     **/\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (DataTypes.ReserveData memory);\\n\\n    function finalizeTransfer(\\n        address asset,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 balanceFromAfter,\\n        uint256 balanceToBefore\\n    ) external;\\n\\n    function getReservesList() external view returns (address[] memory);\\n\\n    function setPause(bool val) external;\\n\\n    function paused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf1ce1e238c8e81215b71a51cc36d3b317e945eb5fa5e2992c52a69b169236396\",\"license\":\"MIT\"},\"contracts/interfaces/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n    function token0() external pure returns (address);\\n    function token1() external pure returns (address);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function mint(address to) external returns (uint liquidity);\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xffc66e7958e75c670c60c085052bcbdd23b794477bf483e805d23a6f25e5ca9d\",\"license\":\"MIT\"},\"contracts/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function balanceOf(address owner) external view returns (uint); \\n    function withdraw(uint) external;\\n    function approve(address to, uint value) external returns (bool);\\n}\",\"keccak256\":\"0xf32787e609bf7d28e7ea925b3d0f4b48d8f4ebde9a7fa41e3441756394eb393c\",\"license\":\"MIT\"},\"contracts/lib/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x866de5f57330a3e8cc47fe5ffde51c5693b6e802448a7376881976e8635922e1\",\"license\":\"MIT\"},\"contracts/lib/DexLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"../interfaces/IPair.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\n\\nlibrary DexLibrary {\\n    using SafeMath for uint;\\n    bytes private constant zeroBytes = new bytes(0);\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n\\n    /**\\n     * @notice Swap directly through a Pair\\n     * @param amountIn input amount\\n     * @param fromToken address\\n     * @param toToken address\\n     * @param pair Pair used for swap\\n     * @return output amount\\n     */\\n    function swap(uint amountIn, address fromToken, address toToken, IPair pair) internal returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = pair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        uint amountOut1 = 0;\\n        uint amountOut2 = getAmountOut(amountIn, reserve0, reserve1);\\n        if (token0 != fromToken) (amountOut1, amountOut2) = (amountOut2, amountOut1);\\n        safeTransfer(fromToken, address(pair), amountIn);\\n        pair.swap(amountOut1, amountOut2, address(this), zeroBytes);\\n        return amountOut2 > amountOut1 ? amountOut2 : amountOut1;\\n    }\\n\\n    function checkSwapPairCompatibility(IPair pair, address tokenA, address tokenB) internal pure returns (bool) {\\n        return (tokenA == pair.token0() || tokenA == pair.token1()) && (tokenB == pair.token0() || tokenB == pair.token1()) && tokenA != tokenB;\\n    }\\n\\n    function estimateConversionThroughPair(uint amountIn, address fromToken, address toToken, IPair swapPair) internal view returns (uint) {\\n        (address token0,) = sortTokens(fromToken, toToken);\\n        (uint112 reserve0, uint112 reserve1,) = swapPair.getReserves();\\n        if (token0 != fromToken) (reserve0, reserve1) = (reserve1, reserve0);\\n        return getAmountOut(amountIn, reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Converts reward tokens to deposit tokens\\n     * @dev No price checks enforced\\n     * @param amount reward tokens\\n     * @return deposit tokens\\n     */\\n    function convertRewardTokensToDepositTokens(uint amount, address rewardToken, address depositToken, IPair swapPairToken0, IPair swapPairToken1) internal returns (uint) {\\n        uint amountIn = amount.div(2);\\n        require(amountIn > 0, \\\"DexLibrary::_convertRewardTokensToDepositTokens\\\");\\n\\n        address token0 = IPair(depositToken).token0();\\n        uint amountOutToken0 = amountIn;\\n        if (rewardToken != token0) {\\n            amountOutToken0 = DexLibrary.swap(amountIn, rewardToken, token0, swapPairToken0);\\n        }\\n\\n        address token1 = IPair(depositToken).token1();\\n        uint amountOutToken1 = amountIn;\\n        if (rewardToken != token1) {\\n            amountOutToken1 = DexLibrary.swap(amountIn, rewardToken, token1, swapPairToken1);\\n        }\\n\\n        return DexLibrary.addLiquidity(depositToken, amountOutToken0, amountOutToken1);\\n    }\\n\\n    /**\\n     * @notice Add liquidity directly through a Pair\\n     * @dev Checks adding the max of each token amount\\n     * @param depositToken address\\n     * @param maxAmountIn0 amount token0\\n     * @param maxAmountIn1 amount token1\\n     * @return liquidity tokens\\n     */\\n    function addLiquidity(address depositToken, uint maxAmountIn0, uint maxAmountIn1) internal returns (uint) {\\n        (uint112 reserve0, uint112 reserve1,) = IPair(address(depositToken)).getReserves();\\n        uint amountIn1 = _quoteLiquidityAmountOut(maxAmountIn0, reserve0, reserve1);\\n        if (amountIn1 > maxAmountIn1) {\\n            amountIn1 = maxAmountIn1;\\n            maxAmountIn0 = _quoteLiquidityAmountOut(maxAmountIn1, reserve1, reserve0);\\n        }\\n\\n        safeTransfer(IPair(depositToken).token0(), depositToken, maxAmountIn0);\\n        safeTransfer(IPair(depositToken).token1(), depositToken, amountIn1);\\n        return IPair(depositToken).mint(address(this));\\n    }\\n\\n    /**\\n     * @notice Quote liquidity amount out\\n     * @param amountIn input tokens\\n     * @param reserve0 size of input asset reserve\\n     * @param reserve1 size of output asset reserve\\n     * @return liquidity tokens\\n     */\\n    function _quoteLiquidityAmountOut(uint amountIn, uint reserve0, uint reserve1) private pure returns (uint) {\\n        return amountIn.mul(reserve1).div(reserve0);\\n    }\\n\\n    /**\\n     * @notice Given two tokens, it'll return the tokens in the right order for the tokens pair\\n     * @dev TokenA must be different from TokenB, and both shouldn't be address(0), no validations\\n     * @param tokenA address\\n     * @param tokenB address\\n     * @return sorted tokens\\n     */\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address, address) {\\n        return tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n    }\\n\\n    /**\\n     * @notice Given an input amount of an asset and pair reserves, returns maximum output amount of the other asset\\n     * @dev Assumes swap fee is 0.30%\\n     * @param amountIn input asset\\n     * @param reserveIn size of input asset reserve\\n     * @param reserveOut size of output asset reserve\\n     * @return maximum output amount\\n     */\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint) {\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        return numerator.div(denominator);\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function safeTransfer(address token, address to, uint256 value) internal {\\n        require(IERC20(token).transfer(to, value), \\\"DexLibrary::TRANSFER_FROM_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2b4fa4eb579d1a4dab58d5a1fadc1338e2a8313707b29ec447335b9b8f2b39dc\",\"license\":\"MIT\"},\"contracts/lib/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\",\"keccak256\":\"0xaf2420e7d0e9aff27728c98c8233e892a464ba7c32045a4f37b128652d012f33\",\"license\":\"MIT\"},\"contracts/lib/Permissioned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"./Ownable.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\nabstract contract Permissioned is Ownable {\\n    using SafeMath for uint;\\n\\n    uint public numberOfAllowedDepositors;\\n    mapping(address => bool) public allowedDepositors;\\n\\n    event AllowDepositor(address indexed account);\\n    event RemoveDepositor(address indexed account);\\n\\n    modifier onlyAllowedDeposits() {\\n        if (numberOfAllowedDepositors > 0) {\\n            require(allowedDepositors[msg.sender] == true, \\\"Permissioned::onlyAllowedDeposits, not allowed\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice Add an allowed depositor\\n     * @param depositor address\\n     */\\n    function allowDepositor(address depositor) external onlyOwner {\\n        require(allowedDepositors[depositor] == false, \\\"Permissioned::allowDepositor\\\");\\n        allowedDepositors[depositor] = true;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.add(1);\\n        emit AllowDepositor(depositor);\\n    }\\n\\n    /**\\n     * @notice Remove an allowed depositor\\n     * @param depositor address\\n     */\\n    function removeDepositor(address depositor) external onlyOwner {\\n        require(numberOfAllowedDepositors > 0, \\\"Permissioned::removeDepositor, no allowed depositors\\\");\\n        require(allowedDepositors[depositor] == true, \\\"Permissioned::removeDepositor, not allowed\\\");\\n        allowedDepositors[depositor] = false;\\n        numberOfAllowedDepositors = numberOfAllowedDepositors.sub(1);\\n        emit RemoveDepositor(depositor);\\n    }\\n}\",\"keccak256\":\"0xf20805a7ca92edda58e5812cf5cfe20b0f2698bbd8215af57a00e04c27ca7e3f\",\"license\":\"MIT\"},\"contracts/lib/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x961855901713e710c05dd67f9a01e501a54e82e68a526fe3662e228c27f788d9\",\"license\":\"MIT\"},\"contracts/strategies/AaveStrategyV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nimport \\\"../YakStrategyV2Payable.sol\\\";\\nimport \\\"../interfaces/IAaveIncentivesController.sol\\\";\\nimport \\\"../interfaces/ILendingPool.sol\\\";\\nimport \\\"../interfaces/IWAVAX.sol\\\";\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"../lib/SafeMath.sol\\\";\\nimport \\\"../lib/DexLibrary.sol\\\";\\nimport \\\"../lib/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title Aave strategy for ERC20\\n */\\ncontract AaveStrategyV1 is YakStrategyV2 {\\n    using SafeMath for uint256;\\n\\n    IAaveIncentivesController private rewardController;\\n    ILendingPool private tokenDelegator;\\n    IPair private swapPairToken;\\n    IWAVAX private constant WAVAX = IWAVAX(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7);\\n    uint256 private leverageLevel;\\n    uint256 private safetyFactor;\\n    uint256 private leverageBips;\\n    uint256 private minMinting;\\n    address private avToken;\\n    address private avDebtToken;\\n\\n    constructor(\\n        string memory _name,\\n        address _rewardController,\\n        address _tokenDelegator,\\n        address _depositToken,\\n        address _swapPairToken,\\n        address _avToken,\\n        address _avDebtToken,\\n        address _timelock,\\n        uint256 _leverageLevel,\\n        uint256 _safetyFactor,\\n        uint256 _leverageBips,\\n        uint256 _minMinting,\\n        uint256 _minTokensToReinvest,\\n        uint256 _adminFeeBips,\\n        uint256 _devFeeBips,\\n        uint256 _reinvestRewardBips\\n    ) {\\n        name = _name;\\n        rewardController = IAaveIncentivesController(_rewardController);\\n        tokenDelegator = ILendingPool(_tokenDelegator);\\n        rewardToken = IERC20(address(WAVAX));\\n        _updateLeverage(_leverageLevel, _safetyFactor, _minMinting, _leverageBips);\\n        devAddr = msg.sender;\\n        depositToken = IERC20(_depositToken);\\n        avToken = _avToken;\\n        avDebtToken = _avDebtToken;\\n\\n        assignSwapPairSafely(_swapPairToken);\\n        setAllowances();\\n        updateMinTokensToReinvest(_minTokensToReinvest);\\n        updateAdminFee(_adminFeeBips);\\n        updateDevFee(_devFeeBips);\\n        updateReinvestReward(_reinvestRewardBips);\\n        updateDepositsEnabled(true);\\n        transferOwnership(_timelock);\\n\\n        emit Reinvest(0, 0);\\n    }\\n\\n    function assignSwapPairSafely(address _swapPairToken) private {\\n        require(_swapPairToken > address(0), \\\"Swap pair is necessary but not supplied\\\");\\n        swapPairToken = IPair(_swapPairToken);\\n        require(isPairEquals(swapPairToken, depositToken, rewardToken)\\n            || isPairEquals(swapPairToken, rewardToken, depositToken),\\n            \\\"Swap pair does not match depositToken and rewardToken.\\\");\\n    }\\n\\n    function isPairEquals(IPair pair, IERC20 left, IERC20 right) private returns (bool) {\\n        return pair.token0() == address(left) && pair.token1() == address(right);\\n    }\\n\\n    /// @notice Internal method to get account state\\n    /// @dev Values provided in 1e18 (WAD) instead of 1e27 (RAY)\\n    function _getAccountData()\\n        internal\\n        view\\n        returns (\\n            uint256 balance,\\n            uint256 borrowed,\\n            uint256 borrowable\\n        )\\n    {\\n        balance = IERC20(avToken).balanceOf(address(this));\\n        borrowed = IERC20(avDebtToken).balanceOf(address(this));\\n        borrowable = 0;\\n        if (balance.mul(leverageLevel.sub(leverageBips)).div(leverageLevel) > borrowed) {\\n            borrowable = balance\\n                .mul(leverageLevel.sub(leverageBips))\\n                .div(leverageLevel)\\n                .sub(borrowed);\\n        }\\n    }\\n\\n    function totalDeposits() public view override returns (uint256) {\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        return balance.sub(borrowed);\\n    }\\n\\n    function _updateLeverage(\\n        uint256 _leverageLevel,\\n        uint256 _safetyFactor,\\n        uint256 _minMinting,\\n        uint256 _leverageBips\\n    ) internal {\\n        leverageLevel = _leverageLevel;\\n        leverageBips = _leverageBips;\\n        safetyFactor = _safetyFactor;\\n        minMinting = _minMinting;\\n    }\\n\\n    function updateLeverage(\\n        uint256 _leverageLevel,\\n        uint256 _safetyFactor,\\n        uint256 _minMinting,\\n        uint256 _leverageBips\\n    ) external onlyDev {\\n        _updateLeverage(_leverageLevel, _safetyFactor, _minMinting, _leverageBips);\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        _unrollDebt(balance.sub(borrowed));\\n        _rollupDebt();\\n    }\\n\\n    function setAllowances() public override onlyOwner {\\n        IERC20(depositToken).approve(address(tokenDelegator), type(uint256).max);\\n        IERC20(avToken).approve(address(tokenDelegator), type(uint256).max);\\n    }\\n\\n    function deposit(uint amount) external override {\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function depositFor(address account, uint amount) external override {\\n        _deposit(account, amount);\\n    }\\n\\n    function depositWithPermit(uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\\n        depositToken.permit(msg.sender, address(this), amount, deadline, v, r, s);\\n        _deposit(msg.sender, amount);\\n    }\\n\\n    function _deposit(address account, uint256 amount) private onlyAllowedDeposits {\\n        require(DEPOSITS_ENABLED == true, \\\"AaveStrategyV1::_deposit\\\");\\n        if (MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST > 0) {\\n            uint256 avaxRewards = _checkRewards();\\n            if (avaxRewards > MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST) {\\n                _reinvest(avaxRewards);\\n            }\\n        }\\n        require(depositToken.transferFrom(account, address(this), amount), \\\"AaveStrategyV1::transfer failed\\\");\\n        _mint(account, amount);\\n        _stakeDepositTokens(amount);\\n        emit Deposit(account, amount);\\n    }\\n\\n    function withdraw(uint256 amount) external override {\\n        uint256 depositTokenAmount = getDepositTokensForShares(amount);\\n        require(\\n            depositTokenAmount > minMinting,\\n            \\\"AaveStrategyV1::below minimum withdraw\\\"\\n        );\\n        if (depositTokenAmount > 0) {\\n            _burn(msg.sender, amount);\\n            // actual amount withdrawn may change with time.\\n            uint256 withdrawnAmount = _withdrawDepositTokens(depositTokenAmount);\\n            _safeTransfer(address(depositToken), msg.sender, withdrawnAmount );\\n            emit Withdraw(msg.sender, withdrawnAmount );\\n        }\\n    }\\n\\n    function _withdrawDepositTokens(uint256 amount) private returns (uint256) {\\n        _unrollDebt(amount);\\n        (uint256 balance, , ) = _getAccountData();\\n        amount = amount > balance ? type(uint256).max : amount;\\n        uint256 withdrawn = tokenDelegator.withdraw(\\n            address(depositToken),\\n            amount,\\n            address(this)\\n        );\\n        _rollupDebt();\\n        return withdrawn;\\n    }\\n\\n    function reinvest() external override onlyEOA {\\n        uint256 avaxRewards = _checkRewards();\\n        require(avaxRewards >= MIN_TOKENS_TO_REINVEST, \\\"AaveStrategyV1::reinvest\\\");\\n        _reinvest(avaxRewards);\\n    }\\n\\n    /**\\n     * @notice Reinvest rewards from staking contract to deposit tokens\\n     * @dev Reverts if the expected amount of tokens are not returned from `stakingContract`\\n     * @param amount deposit tokens to reinvest\\n     */\\n    function _reinvest(uint256 amount) private {\\n        address[] memory assets = new address[](2);\\n        assets[0] = avToken;\\n        assets[1] = avDebtToken;\\n        rewardController.claimRewards(assets, amount, address(this));\\n\\n        uint256 devFee = amount.mul(DEV_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (devFee > 0) {\\n            _safeTransfer(address(rewardToken), devAddr, devFee);\\n        }\\n\\n        uint256 adminFee = amount.mul(ADMIN_FEE_BIPS).div(BIPS_DIVISOR);\\n        if (adminFee > 0) {\\n            _safeTransfer(address(rewardToken), owner(), adminFee);\\n        }\\n\\n        uint256 reinvestFee = amount.mul(REINVEST_REWARD_BIPS).div(BIPS_DIVISOR);\\n        if (reinvestFee > 0) {\\n            _safeTransfer(address(rewardToken), msg.sender, reinvestFee);\\n        }\\n\\n        uint256 depositTokenAmount = DexLibrary.swap(\\n            amount.sub(devFee).sub(adminFee).sub(reinvestFee),\\n            address(rewardToken),\\n            address(depositToken),\\n            swapPairToken\\n        );\\n        _stakeDepositTokens(depositTokenAmount);\\n\\n        emit Reinvest(totalDeposits(), totalSupply);\\n    }\\n\\n    function _rollupDebt() internal {\\n        (uint256 balance, uint256 borrowed, uint256 borrowable) = _getAccountData();\\n        uint256 lendTarget = balance\\n            .sub(borrowed)\\n            .mul(leverageLevel.sub(safetyFactor))\\n            .div(leverageBips);\\n        while (balance < lendTarget) {\\n            if (balance.add(borrowable) > lendTarget) {\\n                borrowable = lendTarget.sub(balance);\\n            }\\n\\n            if (borrowable < minMinting) {\\n                break;\\n            }\\n\\n            tokenDelegator.borrow(\\n                address(depositToken),\\n                borrowable,\\n                2, // variable interest model\\n                0,\\n                address(this)\\n            );\\n\\n            tokenDelegator.deposit(address(depositToken), borrowable, address(this), 0);\\n            (balance, borrowed, borrowable) = _getAccountData();\\n        }\\n    }\\n\\n    function _unrollDebt(uint256 amountToFreeUp) internal {\\n        (uint256 balance, uint256 borrowed, uint256 borrowable) = _getAccountData();\\n        uint256 targetBorrow = balance\\n            .sub(borrowed)\\n            .sub(amountToFreeUp)\\n            .mul(leverageLevel.sub(safetyFactor))\\n            .div(leverageBips)\\n            .sub(balance.sub(borrowed).sub(amountToFreeUp));\\n        uint256 toRepay = borrowed.sub(targetBorrow);\\n\\n        while (toRepay > 0) {\\n            uint256 unrollAmount = borrowable;\\n            if (unrollAmount > borrowed) {\\n                unrollAmount = borrowed;\\n            }\\n            tokenDelegator.withdraw(address(depositToken), unrollAmount, address(this));\\n            tokenDelegator.repay(address(depositToken), unrollAmount, 2, address(this));\\n            (balance, borrowed, borrowable) = _getAccountData();\\n            if (targetBorrow >= borrowed) {\\n                break;\\n            }\\n            toRepay = borrowed.sub(targetBorrow);\\n        }\\n    }\\n\\n    function _stakeDepositTokens(uint256 amount) private {\\n        require(amount > 0, \\\"AaveStrategyV1::_stakeDepositTokens\\\");\\n        tokenDelegator.deposit(address(depositToken), amount, address(this), 0);\\n        _rollupDebt();\\n    }\\n\\n    /**\\n     * @notice Safely transfer using an anonymous ERC20 token\\n     * @dev Requires token to return true on transfer\\n     * @param token address\\n     * @param to recipient address\\n     * @param value amount\\n     */\\n    function _safeTransfer(address token, address to, uint256 value) private {\\n        require(\\n            IERC20(token).transfer(to, value),\\n            \\\"AaveStrategyV1::TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function _checkRewards() internal view returns (uint256 avaxAmount) {\\n        address[] memory assets = new address[](2);\\n        assets[0] = avToken;\\n        assets[1] = avDebtToken;\\n        return rewardController.getRewardsBalance(assets, address(this));\\n    }\\n\\n    function checkReward() public view override returns (uint256) {\\n        return _checkRewards();\\n    }\\n\\n    function getActualLeverage() public view returns (uint256) {\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        return balance.mul(1e18).div(balance.sub(borrowed));\\n    }\\n\\n    function estimateDeployedBalance() external view override returns (uint256) {\\n        return totalDeposits();\\n    }\\n\\n    function rescueDeployedFunds(uint256 minReturnAmountAccepted, bool disableDeposits) external override onlyOwner {\\n        uint256 balanceBefore = depositToken.balanceOf(address(this));\\n        (uint256 balance, uint256 borrowed, ) = _getAccountData();\\n        _unrollDebt(balance.sub(borrowed));\\n        tokenDelegator.withdraw(address(depositToken), type(uint256).max, address(this));\\n        uint256 balanceAfter = depositToken.balanceOf(address(this));\\n        require(\\n            balanceAfter.sub(balanceBefore) >= minReturnAmountAccepted,\\n            \\\"AaveStrategyV1::rescueDeployedFunds\\\"\\n        );\\n        emit Reinvest(totalDeposits(), totalSupply);\\n        if (DEPOSITS_ENABLED == true && disableDeposits == true) {\\n            updateDepositsEnabled(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73a207460c398669cde1cf751e667706614689252091c0a91cd1fbf4b30240a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260096080819052685969656c642059616b60b81b60a09081526200002c916000919062000d08565b506040805180820190915260038082526216549560ea1b6020909201918252620000599160019162000d08565b503480156200006757600080fd5b5060405162004cd238038062004cd283398181016040526102008110156200008e57600080fd5b8101908080516040519392919084640100000000821115620000af57600080fd5b908301906020820185811115620000c557600080fd5b8251640100000000811182820188101715620000e057600080fd5b82525081516020918201929091019080838360005b838110156200010f578181015183820152602001620000f5565b50505050905090810190601f1680156200013d5780820380516001836020036101000a031916815260200191505b5060409081526020820151908201516060830151608084015160a085015160c086015160e08701516101008801516101208901516101408a01516101608b01516101808c01516101a08d01516101c08e01516101e0909e01519c9f509a9d50989b979a969995989497939692959194909390926000620001bc620003fa565b600680546001600160a01b0319166001600160a01b0383169081179091556040519192509060009060008051602062004c55833981519152908290a3508f600090805190602001906200021192919062000d08565b508e601260006101000a8154816001600160a01b0302191690836001600160a01b031602179055508d601360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073b31f66aa3c1e785363f0875a1b74e27b85fd66c7600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550620002af88888789620003fe60201b60201c565b33600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508c600960006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a601960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089601a60006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200035c8c6200041260201b60201c565b62000366620004fe565b62000371846200067a565b6200037c8362000724565b620003878262000814565b6200039281620008f0565b6200039e6001620009cc565b620003a98962000a92565b604080516000808252602082015281517fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234929181900390910190a15050505050505050505050505050505062000da4565b3390565b601593909355601792909255601655601855565b6001600160a01b038116620004595760405162461bcd60e51b815260040180806020018281038252602781526020018062004cab6027913960400191505060405180910390fd5b601480546001600160a01b0319166001600160a01b038381169190911791829055600954600a546200049393831692918216911662000b8c565b80620004be5750601454600a54600954620004be926001600160a01b03908116928116911662000b8c565b620004fb5760405162461bcd60e51b815260040180806020018281038252603681526020018062004c756036913960400191505060405180910390fd5b50565b62000508620003fa565b6001600160a01b03166200051b62000c97565b6001600160a01b03161462000566576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b6009546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015620005c157600080fd5b505af1158015620005d6573d6000803e3d6000fd5b505050506040513d6020811015620005ed57600080fd5b50506019546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156200064a57600080fd5b505af11580156200065f573d6000803e3d6000fd5b505050506040513d60208110156200067657600080fd5b5050565b62000684620003fa565b6001600160a01b03166200069762000c97565b6001600160a01b031614620006e2576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b600c54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600c55565b6200072e620003fa565b6001600160a01b03166200074162000c97565b6001600160a01b0316146200078c576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b612710620007c6600f54620007b26011548562000ca660201b620023db1790919060201c565b62000ca660201b620023db1790919060201c565b1115620007d257600080fd5b601054604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601055565b6200081e620003fa565b6001600160a01b03166200083162000c97565b6001600160a01b0316146200087c576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b612710620008a2600f54620007b26010548562000ca660201b620023db1790919060201c565b1115620008ae57600080fd5b601154604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601155565b620008fa620003fa565b6001600160a01b03166200090d62000c97565b6001600160a01b03161462000958576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b6127106200097e601154620007b26010548562000ca660201b620023db1790919060201c565b11156200098a57600080fd5b600f54604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1600f55565b620009d6620003fa565b6001600160a01b0316620009e962000c97565b6001600160a01b03161462000a34576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b600e5460ff161515811515141562000a4b57600080fd5b600e805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b62000a9c620003fa565b6001600160a01b031662000aaf62000c97565b6001600160a01b03161462000afa576040805162461bcd60e51b8152602060048201819052602482015260008051602062004c35833981519152604482015290519081900360640190fd5b6001600160a01b03811662000b415760405162461bcd60e51b815260040180806020018281038252602681526020018062004c0f6026913960400191505060405180910390fd5b6006546040516001600160a01b0380841692169060008051602062004c5583398151915290600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000826001600160a01b0316846001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801562000bd257600080fd5b505afa15801562000be7573d6000803e3d6000fd5b505050506040513d602081101562000bfe57600080fd5b50516001600160a01b031614801562000c8f5750816001600160a01b0316846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b15801562000c5657600080fd5b505afa15801562000c6b573d6000803e3d6000fd5b505050506040513d602081101562000c8257600080fd5b50516001600160a01b0316145b949350505050565b6006546001600160a01b031690565b60008282018381101562000d01576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062000d4b57805160ff191683800117855562000d7b565b8280016001018555821562000d7b579182015b8281111562000d7b57825182559160200191906001019062000d5e565b5062000d8992915062000d8d565b5090565b5b8082111562000d89576000815560010162000d8e565b613e5b8062000db46000396000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80638b73e606116101d3578063c89039c511610104578063dd8ce4d6116100a2578063ed24911d1161007c578063ed24911d14610950578063f2fde38b14610958578063f7c618c11461097e578063fdb5a03e1461098657610378565b8063dd8ce4d6146108f9578063e21ac82514610916578063eab89a5a1461093357610378565b8063da09c72c116100de578063da09c72c146108b3578063db8dd95c146108bb578063dbd9a4d4146108c3578063dd62ed3e146108cb57610378565b8063c89039c51461083d578063cff1b6ef14610845578063d505accf1461086257610378565b8063a9059cbb11610171578063b6b55f251161014b578063b6b55f2514610808578063b9e57b8014610825578063bd079f551461082d578063c4b24a461461083557610378565b8063a9059cbb146107af578063ac0d31ff146107db578063b52a321f1461080057610378565b806395d89b41116101ad57806395d89b411461076557806399729ec11461076d5780639e4e73181461078a578063a8ae2b7c1461079257610378565b80638b73e606146106f55780638da5cb5b1461071b5780639291d5631461073f57610378565b80634a970be7116102ad578063789139bc1161024b5780637ecebe00116102255780637ecebe001461067e57806381837230146106a45780638980f11f146106c15780638aff733d146106ed57610378565b8063789139bc146106405780637ae26773146106485780637d8820971461067657610378565b80634ebb7916116102875780634ebb7916146105ed5780635ea682ea1461060a57806370a0823114610612578063715018a61461063857610378565b80634a970be7146105705780634bebd1e7146105a85780634e77ace5146105ce57610378565b806323b872dd1161031a57806330adf81f116102f457806330adf81f1461051c578063313ce567146105245780633bdc6e7214610542578063483c2ef01461054a57610378565b806323b872dd1461049d5780632e1a7d4d146104d35780632f4f21e2146104f057610378565b80630f23475d116103565780630f23475d1461045457806318160ddd1461045c57806320606b701461046457806322a051411461046c57610378565b806306fdde031461037d57806307677111146103fa578063095ea7b314610414575b600080fd5b61038561098e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103bf5781810151838201526020016103a7565b50505050905090810190601f1680156103ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610402610a1c565b60408051918252519081900360200190f35b6104406004803603604081101561042a57600080fd5b506001600160a01b038135169060200135610a22565b604080519115158252519081900360200190f35b610402610a39565b610402610a49565b610402610a4f565b61049b6004803603608081101561048257600080fd5b5080359060208101359060408101359060600135610a73565b005b610440600480360360608110156104b357600080fd5b506001600160a01b03813581169160208101359091169060400135610b11565b61049b600480360360208110156104e957600080fd5b5035610bf3565b61049b6004803603604081101561050657600080fd5b506001600160a01b038135169060200135610cb1565b610402610cbb565b61052c610cdf565b6040805160ff9092168252519081900360200190f35b610402610ce4565b6104406004803603602081101561056057600080fd5b50356001600160a01b0316610cea565b61049b600480360360a081101561058657600080fd5b5080359060208101359060ff6040820135169060608101359060800135610cff565b61049b600480360360208110156105be57600080fd5b50356001600160a01b0316610db8565b61049b600480360360208110156105e457600080fd5b50351515610ef4565b61049b6004803603602081101561060357600080fd5b5035610fb3565b61040261108f565b6104026004803603602081101561062857600080fd5b50356001600160a01b0316611095565b61049b6110b4565b61040261116d565b61049b6004803603604081101561065e57600080fd5b506001600160a01b0381358116916020013516611173565b610402611262565b6104026004803603602081101561069457600080fd5b50356001600160a01b0316611286565b61049b600480360360208110156106ba57600080fd5b5035611298565b61049b600480360360408110156106d757600080fd5b506001600160a01b03813516906020013561133c565b610402611490565b61049b6004803603602081101561070b57600080fd5b50356001600160a01b0316611496565b6107236115fd565b604080516001600160a01b039092168252519081900360200190f35b61049b6004803603602081101561075557600080fd5b50356001600160a01b031661160c565b6103856116e2565b61049b6004803603602081101561078357600080fd5b503561173c565b61040261180f565b61049b600480360360208110156107a857600080fd5b5035611833565b610440600480360360408110156107c557600080fd5b506001600160a01b038135169060200135611900565b61049b600480360360408110156107f157600080fd5b5080359060200135151561190d565b610440611bbf565b61049b6004803603602081101561081e57600080fd5b5035611bc8565b610402611bd5565b610402611c1c565b610402611c22565b610723611c2c565b61049b6004803603602081101561085b57600080fd5b5035611c3b565b61049b600480360360e081101561087857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611d08565b610723611e08565b610402611e17565b61049b611e49565b610402600480360360408110156108e157600080fd5b506001600160a01b0381358116916020013516611fb5565b6104026004803603602081101561090f57600080fd5b5035611fe0565b61049b6004803603602081101561092c57600080fd5b503561201a565b6104026004803603602081101561094957600080fd5b50356120be565b6104026120ef565b61049b6004803603602081101561096e57600080fd5b50356001600160a01b03166121fc565b61072361230c565b61049b61231b565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a145780601f106109e957610100808354040283529160200191610a14565b820191906000526020600020905b8154815290600101906020018083116109f757829003601f168201915b505050505081565b60105481565b6000610a2f33848461243c565b5060015b92915050565b6000610a43611262565b90505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600b546001600160a01b03163314610ad2576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b610ade84848484612554565b600080610ae9612568565b509092509050610b01610afc83836126c9565b61270b565b610b096128ee565b505050505050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610b4b57506000198114155b15610bdc576000610b77856040518060600160405280602f8152602001613da2602f9139849190612a97565b6001600160a01b0380891660008181526003602090815260408083209489168084529482529182902085905581518581529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b610be7868686612b2e565b50600195945050505050565b6000610bfe826120be565b90506018548111610c405760405162461bcd60e51b8152600401808060200182810382526026815260200180613cbd6026913960400191505060405180910390fd5b8015610cad57610c503383612c3b565b6000610c5b82612d10565b600954909150610c75906001600160a01b03163383612dd4565b60408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2505b5050565b610cad8282612e97565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b600954604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905290516001600160a01b039092169163d505accf9160e48082019260009290919082900301818387803b158015610d8f57600080fd5b505af1158015610da3573d6000803e3d6000fd5b50505050610db13386612e97565b5050505050565b610dc06130bf565b6001600160a01b0316610dd16115fd565b6001600160a01b031614610e1a576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615610e88576040805162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610eba916123db565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610efc6130bf565b6001600160a01b0316610f0d6115fd565b6001600160a01b031614610f56576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600e5460ff1615158115151415610f6c57600080fd5b600e805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b610fbb6130bf565b6001600160a01b0316610fcc6115fd565b6001600160a01b031614611015576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6000811161102257600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561104f573d6000803e3d6000fd5b5060408051600081526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a150565b60115481565b6001600160a01b0381166000908152600460205260409020545b919050565b6110bc6130bf565b6001600160a01b03166110cd6115fd565b6001600160a01b031614611116576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600d5481565b61117b6130bf565b6001600160a01b031661118c6115fd565b6001600160a01b0316146111d5576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b816001600160a01b031663095ea7b38260006040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561122d57600080fd5b505af1158015611241573d6000803e3d6000fd5b505050506040513d602081101561125757600080fd5b5051610cad57600080fd5b600080600061126f612568565b50909250905061127f82826126c9565b9250505090565b60056020526000908152604090205481565b6112a06130bf565b6001600160a01b03166112b16115fd565b6001600160a01b0316146112fa576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600c54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600c55565b6113446130bf565b6001600160a01b03166113556115fd565b6001600160a01b03161461139e576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600081116113ab57600080fd5b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b505161144857600080fd5b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b600f5481565b61149e6130bf565b6001600160a01b03166114af6115fd565b6001600160a01b0316146114f8576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6000600754116115395760405162461bcd60e51b8152600401808060200182810382526034815260200180613c186034913960400191505060405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff1615156001146115955760405162461bcd60e51b815260040180806020018281038252602a815260200180613c93602a913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460ff191690556007546115c39060016126c9565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b0316331461166b576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b600b54604080516001600160a01b039283168152918316602083015280517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009281900390910190a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a145780601f106109e957610100808354040283529160200191610a14565b6117446130bf565b6001600160a01b03166117556115fd565b6001600160a01b03161461179e576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6127106117c2600f546117bc601054856123db90919063ffffffff16565b906123db565b11156117cd57600080fd5b601154604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61183b6130bf565b6001600160a01b031661184c6115fd565b6001600160a01b031614611895576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6127106118b36011546117bc601054856123db90919063ffffffff16565b11156118be57600080fd5b600f54604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1600f55565b6000610a2f338484612b2e565b6119156130bf565b6001600160a01b03166119266115fd565b6001600160a01b03161461196f576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600954604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d60208110156119e457600080fd5b505190506000806119f3612568565b509092509050611a06610afc83836126c9565b60135460095460408051631a4ca37b60e21b81526001600160a01b0392831660048201526000196024820152306044820152905191909216916369328dec9160648083019260209291908290030181600087803b158015611a6657600080fd5b505af1158015611a7a573d6000803e3d6000fd5b505050506040513d6020811015611a9057600080fd5b5050600954604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611add57600080fd5b505afa158015611af1573d6000803e3d6000fd5b505050506040513d6020811015611b0757600080fd5b5051905085611b1682866126c9565b1015611b535760405162461bcd60e51b8152600401808060200182810382526023815260200180613d7f6023913960400191505060405180910390fd5b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611b7c611262565b6002546040805192835260208301919091528051918290030190a1600e5460ff1615156001148015611bb057506001851515145b15610b0957610b096000610ef4565b600e5460ff1681565b611bd23382612e97565b50565b600080611be0611c22565b9050600c548110611c1457611c0c612710611c06600f54846130c390919063ffffffff16565b9061311c565b915050610a46565b600091505090565b600c5481565b6000610a4361315e565b6009546001600160a01b031681565b611c436130bf565b6001600160a01b0316611c546115fd565b6001600160a01b031614611c9d576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b612710611cbb600f546117bc601154856123db90919063ffffffff16565b1115611cc657600080fd5b601054604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601055565b42841015611d5d576040805162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938a1660608401526080830189905260a083019390935260c08083018890528151808403909101815260e090920190528051910120611df388828686866132b6565b611dfe88888861243c565b5050505050505050565b600b546001600160a01b031681565b6000806000611e24612568565b50909250905061127f611e3783836126c9565b611c0684670de0b6b3a76400006130c3565b611e516130bf565b6001600160a01b0316611e626115fd565b6001600160a01b031614611eab576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6009546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611f0557600080fd5b505af1158015611f19573d6000803e3d6000fd5b505050506040513d6020811015611f2f57600080fd5b50506019546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b505050506040513d6020811015610cad57600080fd5b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6000611ff6611fed611262565b600254906130c3565b6120015750806110af565b610a3361200c611262565b600254611c069085906130c3565b6120226130bf565b6001600160a01b03166120336115fd565b6001600160a01b03161461207c576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f9281900390910190a1600d55565b60006120cb611fed611262565b6120d7575060006110af565b610a33600254611c066120e8611262565b85906130c3565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405180828054600181600116156101000203166002900480156121725780601f10612150576101008083540402835291820191612172565b820191906000526020600020905b81548152906001019060200180831161215e575b505091505060405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b6121ab6133ee565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b6122046130bf565b6001600160a01b03166122156115fd565b6001600160a01b03161461225e576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6001600160a01b0381166122a35760405162461bcd60e51b8152600401808060200182810382526026815260200180613ba06026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b32331461236f576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604482015290519081900360640190fd5b600061237961315e565b9050600c548110156123d2576040805162461bcd60e51b815260206004820152601860248201527f41617665537472617465677956313a3a7265696e766573740000000000000000604482015290519081900360640190fd5b611bd2816133f2565b600082820183811015612435576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038316612497576040805162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604482015290519081900360640190fd5b6001600160a01b0382166124f2576040805162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b601593909355601792909255601655601855565b601954604080516370a0823160e01b81523060048201529051600092839283926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156125ba57600080fd5b505afa1580156125ce573d6000803e3d6000fd5b505050506040513d60208110156125e457600080fd5b5051601a54604080516370a0823160e01b815230600482015290519295506001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561263457600080fd5b505afa158015612648573d6000803e3d6000fd5b505050506040513d602081101561265e57600080fd5b505160155460175491935060009250839161268a9190611c06906126839083906126c9565b87906130c3565b11156126c4576126c1826126bb601554611c066126b46017546015546126c990919063ffffffff16565b88906130c3565b906126c9565b90505b909192565b600061243583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612a97565b6000806000612718612568565b919450925090506000612766612732866126bb87876126c9565b6126bb601754611c066127526016546015546126c990919063ffffffff16565b6127608b6126bb8c8c6126c9565b906130c3565b9050600061277484836126c9565b90505b8015610b095782848111156127895750835b60135460095460408051631a4ca37b60e21b81526001600160a01b03928316600482015260248101859052306044820152905191909216916369328dec9160648083019260209291908290030181600087803b1580156127e857600080fd5b505af11580156127fc573d6000803e3d6000fd5b505050506040513d602081101561281257600080fd5b5050601354600954604080517f573ade810000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052600260448201523060648201529051919092169163573ade819160848083019260209291908290030181600087803b15801561289357600080fd5b505af11580156128a7573d6000803e3d6000fd5b505050506040513d60208110156128bd57600080fd5b506128c89050612568565b919750955093508483106128dc5750610b09565b6128e685846126c9565b915050612777565b60008060006128fb612568565b925092509250600061292d601754611c066129236016546015546126c990919063ffffffff16565b61276088886126c9565b90505b80841015612a91578061294385846123db565b11156129565761295381856126c9565b91505b60185482101561296557612a91565b601354600954604080517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101869052600260448201526000606482018190523060848301529151929093169263a415bcad9260a4808301939282900301818387803b1580156129e857600080fd5b505af11580156129fc573d6000803e3d6000fd5b50506013546009546040805163e8eda9df60e01b81526001600160a01b03928316600482015260248101889052306044820152600060648201819052915192909316945063e8eda9df935060848084019391929182900301818387803b158015612a6557600080fd5b505af1158015612a79573d6000803e3d6000fd5b50505050612a85612568565b91955093509150612930565b50505050565b60008184841115612b265760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612aeb578181015183820152602001612ad3565b50505050905090810190601f168015612b185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216612b735760405162461bcd60e51b8152600401808060200182810382526034815260200180613d4b6034913960400191505060405180910390fd5b612bb0816040518060600160405280602e8152602001613df8602e91396001600160a01b0386166000908152600460205260409020549190612a97565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612bdf90826123db565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612c7881604051806060016040528060278152602001613dd1602791396001600160a01b0385166000908152600460205260409020549190612a97565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612cc881604051806060016040528060278152602001613ce3602791396002549190612a97565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000612d1b8261270b565b6000612d25612568565b50509050808311612d365782612d3a565b6000195b60135460095460408051631a4ca37b60e21b81526001600160a01b03928316600482015260248101859052306044820152905193965060009391909216916369328dec91606480830192602092919082900301818787803b158015612d9e57600080fd5b505af1158015612db2573d6000803e3d6000fd5b505050506040513d6020811015612dc857600080fd5b505190506124356128ee565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612e2b57600080fd5b505af1158015612e3f573d6000803e3d6000fd5b505050506040513d6020811015612e5557600080fd5b5051612e925760405162461bcd60e51b8152600401808060200182810382526024815260200180613bc66024913960400191505060405180910390fd5b505050565b60075415612ef2573360009081526008602052604090205460ff161515600114612ef25760405162461bcd60e51b815260040180806020018281038252602e815260200180613bea602e913960400191505060405180910390fd5b600e5460ff161515600114612f4e576040805162461bcd60e51b815260206004820152601860248201527f41617665537472617465677956313a3a5f6465706f7369740000000000000000604482015290519081900360640190fd5b600d5415612f77576000612f6061315e565b9050600d54811115612f7557612f75816133f2565b505b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015612fec57600080fd5b505af1158015613000573d6000803e3d6000fd5b505050506040513d602081101561301657600080fd5b5051613069576040805162461bcd60e51b815260206004820152601f60248201527f41617665537472617465677956313a3a7472616e73666572206661696c656400604482015290519081900360640190fd5b6130738282613690565b61307c8161371b565b6040805182815290516001600160a01b038416917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050565b3390565b6000826130d257506000610a33565b828202828482816130df57fe5b04146124355760405162461bcd60e51b8152600401808060200182810382526021815260200180613d0a6021913960400191505060405180910390fd5b600061243583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506137dd565b6040805160028082526060808301845260009390929190602083019080368337505060195482519293506001600160a01b03169183915060009061319e57fe5b6001600160a01b039283166020918202929092010152601a548251911690829060019081106131c957fe5b6001600160a01b03928316602091820292909201810191909152601254604080517f8b599f260000000000000000000000000000000000000000000000000000000081523060248201819052600482019283528651604483015286519390951694638b599f269487949193928392606490910191868101910280838360005b83811015613260578181015183820152602001613248565b50505050905001935050505060206040518083038186803b15801561328457600080fd5b505afa158015613298573d6000803e3d6000fd5b505050506040513d60208110156132ae57600080fd5b505191505090565b60006132c06120ef565b8560405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613374573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906133aa5750866001600160a01b0316816001600160a01b0316145b6133e55760405162461bcd60e51b8152600401808060200182810382526024815260200180613c4c6024913960400191505060405180910390fd5b50505050505050565b4690565b6040805160028082526060808301845292602083019080368337505060195482519293506001600160a01b03169183915060009061342c57fe5b6001600160a01b039283166020918202929092010152601a5482519116908290600190811061345757fe5b6001600160a01b039283166020918202929092018101919091526012546040517f3111e7b30000000000000000000000000000000000000000000000000000000081526024810186905230604482018190526060600483019081528651606484015286519390951694633111e7b394879489948392608490910191878201910280838360005b838110156134f55781810151838201526020016134dd565b50505050905001945050505050602060405180830381600087803b15801561351c57600080fd5b505af1158015613530573d6000803e3d6000fd5b505050506040513d602081101561354657600080fd5b50506011546000906135619061271090611c069086906130c3565b9050801561358657600a54600b54613586916001600160a01b03908116911683612dd4565b60006135a3612710611c06601054876130c390919063ffffffff16565b905080156135c957600a546135c9906001600160a01b03166135c36115fd565b83612dd4565b60006135e6612710611c06600f54886130c390919063ffffffff16565b9050801561360557600a54613605906001600160a01b03163383612dd4565b600061363961361a836126bb86818b8a6126c9565b600a546009546014546001600160a01b03928316929182169116613842565b90506136448161371b565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461366d611262565b6002546040805192835260208301919091528051918290030190a1505050505050565b60025461369d90826123db565b6002556001600160a01b0382166000908152600460205260409020546136c390826123db565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000811161375a5760405162461bcd60e51b8152600401808060200182810382526023815260200180613c706023913960400191505060405180910390fd5b6013546009546040805163e8eda9df60e01b81526001600160a01b039283166004820152602481018590523060448201526000606482018190529151929093169263e8eda9df926084808301939282900301818387803b1580156137bd57600080fd5b505af11580156137d1573d6000803e3d6000fd5b50505050611bd26128ee565b6000818361382c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612aeb578181015183820152602001612ad3565b50600083858161383857fe5b0495945050505050565b60008061384f8585613a52565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561388e57600080fd5b505afa1580156138a2573d6000803e3d6000fd5b505050506040513d60608110156138b857600080fd5b50805160209091015190925090506001600160a01b03838116908816146138db57905b6000806139098a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613a83565b9050886001600160a01b0316856001600160a01b03161461392657905b61393189888c613acb565b60408051600080825260208201928390527f022c0d9f00000000000000000000000000000000000000000000000000000000835260248201858152604483018590523060648401819052608060848501908152845160a486018190526001600160a01b038e169663022c0d9f968a968a9691949193919260c486019290918190849084905b838110156139ce5781810151838201526020016139b6565b50505050905090810190601f1680156139fb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015613a1d57600080fd5b505af1158015613a31573d6000803e3d6000fd5b50505050818111613a425781613a44565b805b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031610613a75578284613a78565b83835b915091509250929050565b600080613a92856103e56130c3565b90506000613aa082856130c3565b90506000613ab4836117bc886103e86130c3565b9050613ac0828261311c565b979650505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613b2257600080fd5b505af1158015613b36573d6000803e3d6000fd5b505050506040513d6020811015613b4c57600080fd5b5051612e92576040805162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015290519081900360640190fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737341617665537472617465677956313a3a5452414e534645525f46524f4d5f4641494c45445065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f736974732c206e6f7420616c6c6f7765645065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f20616c6c6f776564206465706f7369746f7273417263683a3a76616c69646174655369673a20696e76616c6964207369676e617475726541617665537472617465677956313a3a5f7374616b654465706f736974546f6b656e735065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f7420616c6c6f77656441617665537472617465677956313a3a62656c6f77206d696e696d756d2077697468647261775f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c79536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f206164647265737341617665537472617465677956313a3a7265736375654465706c6f79656446756e64737472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220a21dd273bb4c4e3fe9be945dc7b6f9b49f22608e20d0656d1f352a7918a1aa7464736f6c634300070300334f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65728be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e053776170207061697220646f6573206e6f74206d61746368206465706f736974546f6b656e20616e6420726577617264546f6b656e2e537761702070616972206973206e656365737361727920627574206e6f7420737570706c696564",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103785760003560e01c80638b73e606116101d3578063c89039c511610104578063dd8ce4d6116100a2578063ed24911d1161007c578063ed24911d14610950578063f2fde38b14610958578063f7c618c11461097e578063fdb5a03e1461098657610378565b8063dd8ce4d6146108f9578063e21ac82514610916578063eab89a5a1461093357610378565b8063da09c72c116100de578063da09c72c146108b3578063db8dd95c146108bb578063dbd9a4d4146108c3578063dd62ed3e146108cb57610378565b8063c89039c51461083d578063cff1b6ef14610845578063d505accf1461086257610378565b8063a9059cbb11610171578063b6b55f251161014b578063b6b55f2514610808578063b9e57b8014610825578063bd079f551461082d578063c4b24a461461083557610378565b8063a9059cbb146107af578063ac0d31ff146107db578063b52a321f1461080057610378565b806395d89b41116101ad57806395d89b411461076557806399729ec11461076d5780639e4e73181461078a578063a8ae2b7c1461079257610378565b80638b73e606146106f55780638da5cb5b1461071b5780639291d5631461073f57610378565b80634a970be7116102ad578063789139bc1161024b5780637ecebe00116102255780637ecebe001461067e57806381837230146106a45780638980f11f146106c15780638aff733d146106ed57610378565b8063789139bc146106405780637ae26773146106485780637d8820971461067657610378565b80634ebb7916116102875780634ebb7916146105ed5780635ea682ea1461060a57806370a0823114610612578063715018a61461063857610378565b80634a970be7146105705780634bebd1e7146105a85780634e77ace5146105ce57610378565b806323b872dd1161031a57806330adf81f116102f457806330adf81f1461051c578063313ce567146105245780633bdc6e7214610542578063483c2ef01461054a57610378565b806323b872dd1461049d5780632e1a7d4d146104d35780632f4f21e2146104f057610378565b80630f23475d116103565780630f23475d1461045457806318160ddd1461045c57806320606b701461046457806322a051411461046c57610378565b806306fdde031461037d57806307677111146103fa578063095ea7b314610414575b600080fd5b61038561098e565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103bf5781810151838201526020016103a7565b50505050905090810190601f1680156103ec5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610402610a1c565b60408051918252519081900360200190f35b6104406004803603604081101561042a57600080fd5b506001600160a01b038135169060200135610a22565b604080519115158252519081900360200190f35b610402610a39565b610402610a49565b610402610a4f565b61049b6004803603608081101561048257600080fd5b5080359060208101359060408101359060600135610a73565b005b610440600480360360608110156104b357600080fd5b506001600160a01b03813581169160208101359091169060400135610b11565b61049b600480360360208110156104e957600080fd5b5035610bf3565b61049b6004803603604081101561050657600080fd5b506001600160a01b038135169060200135610cb1565b610402610cbb565b61052c610cdf565b6040805160ff9092168252519081900360200190f35b610402610ce4565b6104406004803603602081101561056057600080fd5b50356001600160a01b0316610cea565b61049b600480360360a081101561058657600080fd5b5080359060208101359060ff6040820135169060608101359060800135610cff565b61049b600480360360208110156105be57600080fd5b50356001600160a01b0316610db8565b61049b600480360360208110156105e457600080fd5b50351515610ef4565b61049b6004803603602081101561060357600080fd5b5035610fb3565b61040261108f565b6104026004803603602081101561062857600080fd5b50356001600160a01b0316611095565b61049b6110b4565b61040261116d565b61049b6004803603604081101561065e57600080fd5b506001600160a01b0381358116916020013516611173565b610402611262565b6104026004803603602081101561069457600080fd5b50356001600160a01b0316611286565b61049b600480360360208110156106ba57600080fd5b5035611298565b61049b600480360360408110156106d757600080fd5b506001600160a01b03813516906020013561133c565b610402611490565b61049b6004803603602081101561070b57600080fd5b50356001600160a01b0316611496565b6107236115fd565b604080516001600160a01b039092168252519081900360200190f35b61049b6004803603602081101561075557600080fd5b50356001600160a01b031661160c565b6103856116e2565b61049b6004803603602081101561078357600080fd5b503561173c565b61040261180f565b61049b600480360360208110156107a857600080fd5b5035611833565b610440600480360360408110156107c557600080fd5b506001600160a01b038135169060200135611900565b61049b600480360360408110156107f157600080fd5b5080359060200135151561190d565b610440611bbf565b61049b6004803603602081101561081e57600080fd5b5035611bc8565b610402611bd5565b610402611c1c565b610402611c22565b610723611c2c565b61049b6004803603602081101561085b57600080fd5b5035611c3b565b61049b600480360360e081101561087857600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135611d08565b610723611e08565b610402611e17565b61049b611e49565b610402600480360360408110156108e157600080fd5b506001600160a01b0381358116916020013516611fb5565b6104026004803603602081101561090f57600080fd5b5035611fe0565b61049b6004803603602081101561092c57600080fd5b503561201a565b6104026004803603602081101561094957600080fd5b50356120be565b6104026120ef565b61049b6004803603602081101561096e57600080fd5b50356001600160a01b03166121fc565b61072361230c565b61049b61231b565b6000805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a145780601f106109e957610100808354040283529160200191610a14565b820191906000526020600020905b8154815290600101906020018083116109f757829003601f168201915b505050505081565b60105481565b6000610a2f33848461243c565b5060015b92915050565b6000610a43611262565b90505b90565b60025481565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b600b546001600160a01b03163314610ad2576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b610ade84848484612554565b600080610ae9612568565b509092509050610b01610afc83836126c9565b61270b565b610b096128ee565b505050505050565b6001600160a01b038316600081815260036020908152604080832033808552925282205491929091908214801590610b4b57506000198114155b15610bdc576000610b77856040518060600160405280602f8152602001613da2602f9139849190612a97565b6001600160a01b0380891660008181526003602090815260408083209489168084529482529182902085905581518581529151949550929391927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92592918290030190a3505b610be7868686612b2e565b50600195945050505050565b6000610bfe826120be565b90506018548111610c405760405162461bcd60e51b8152600401808060200182810382526026815260200180613cbd6026913960400191505060405180910390fd5b8015610cad57610c503383612c3b565b6000610c5b82612d10565b600954909150610c75906001600160a01b03163383612dd4565b60408051828152905133917f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364919081900360200190a2505b5050565b610cad8282612e97565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601281565b60075481565b60086020526000908152604090205460ff1681565b600954604080517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018890526064810187905260ff8616608482015260a4810185905260c4810184905290516001600160a01b039092169163d505accf9160e48082019260009290919082900301818387803b158015610d8f57600080fd5b505af1158015610da3573d6000803e3d6000fd5b50505050610db13386612e97565b5050505050565b610dc06130bf565b6001600160a01b0316610dd16115fd565b6001600160a01b031614610e1a576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6001600160a01b03811660009081526008602052604090205460ff1615610e88576040805162461bcd60e51b815260206004820152601c60248201527f5065726d697373696f6e65643a3a616c6c6f774465706f7369746f7200000000604482015290519081900360640190fd5b6001600160a01b0381166000908152600860205260409020805460ff19166001908117909155600754610eba916123db565b6007556040516001600160a01b038216907fc0a1035c16faf8d1304056d92c00edf028f87e62b8235a938f00af9e3c0312c590600090a250565b610efc6130bf565b6001600160a01b0316610f0d6115fd565b6001600160a01b031614610f56576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600e5460ff1615158115151415610f6c57600080fd5b600e805482151560ff19909116811790915560408051918252517f7b014ed3854e7f5cb0218d58b3c6ae7d53a68bb0af2f67bfb029ea42c38a7e859181900360200190a150565b610fbb6130bf565b6001600160a01b0316610fcc6115fd565b6001600160a01b031614611015576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6000811161102257600080fd5b604051339082156108fc029083906000818181858888f1935050505015801561104f573d6000803e3d6000fd5b5060408051600081526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a150565b60115481565b6001600160a01b0381166000908152600460205260409020545b919050565b6110bc6130bf565b6001600160a01b03166110cd6115fd565b6001600160a01b031614611116576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6006546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36006805473ffffffffffffffffffffffffffffffffffffffff19169055565b600d5481565b61117b6130bf565b6001600160a01b031661118c6115fd565b6001600160a01b0316146111d5576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b816001600160a01b031663095ea7b38260006040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561122d57600080fd5b505af1158015611241573d6000803e3d6000fd5b505050506040513d602081101561125757600080fd5b5051610cad57600080fd5b600080600061126f612568565b50909250905061127f82826126c9565b9250505090565b60056020526000908152604090205481565b6112a06130bf565b6001600160a01b03166112b16115fd565b6001600160a01b0316146112fa576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600c54604080519182526020820183905280517f481f79ac3a523b6d6db3c5a720e190e986d1cc1b41adcdf50f9caef8499011009281900390910190a1600c55565b6113446130bf565b6001600160a01b03166113556115fd565b6001600160a01b03161461139e576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600081116113ab57600080fd5b604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905290516001600160a01b0384169163a9059cbb9160448083019260209291908290030181600087803b15801561141357600080fd5b505af1158015611427573d6000803e3d6000fd5b505050506040513d602081101561143d57600080fd5b505161144857600080fd5b604080516001600160a01b03841681526020810183905281517f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28929181900390910190a15050565b600f5481565b61149e6130bf565b6001600160a01b03166114af6115fd565b6001600160a01b0316146114f8576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6000600754116115395760405162461bcd60e51b8152600401808060200182810382526034815260200180613c186034913960400191505060405180910390fd5b6001600160a01b03811660009081526008602052604090205460ff1615156001146115955760405162461bcd60e51b815260040180806020018281038252602a815260200180613c93602a913960400191505060405180910390fd5b6001600160a01b0381166000908152600860205260409020805460ff191690556007546115c39060016126c9565b6007556040516001600160a01b038216907f0e86f6608b536e5339a25b65ff531f5ea91e1313d056ecd4752b35cbd16137d490600090a250565b6006546001600160a01b031690565b600b546001600160a01b0316331461166b576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79446576000000000000000000000000604482015290519081900360640190fd5b600b54604080516001600160a01b039283168152918316602083015280517fa8e91499ed37682f43cffb045fcc7d379a91e8c9a14e6321877ee34dee564c009281900390910190a1600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60018054604080516020600284861615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610a145780601f106109e957610100808354040283529160200191610a14565b6117446130bf565b6001600160a01b03166117556115fd565b6001600160a01b03161461179e576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6127106117c2600f546117bc601054856123db90919063ffffffff16565b906123db565b11156117cd57600080fd5b601154604080519182526020820183905280517f2a42303d002f0ba6cfe8259c91d4684443fb0b3de286ba74991175d6517261319281900390910190a1601155565b7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681565b61183b6130bf565b6001600160a01b031661184c6115fd565b6001600160a01b031614611895576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6127106118b36011546117bc601054856123db90919063ffffffff16565b11156118be57600080fd5b600f54604080519182526020820183905280517fe7f97d51d307dc44045597c9978bec0f842e6bb40d19b9444084cfa30d9ed4f29281900390910190a1600f55565b6000610a2f338484612b2e565b6119156130bf565b6001600160a01b03166119266115fd565b6001600160a01b03161461196f576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600954604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156119ba57600080fd5b505afa1580156119ce573d6000803e3d6000fd5b505050506040513d60208110156119e457600080fd5b505190506000806119f3612568565b509092509050611a06610afc83836126c9565b60135460095460408051631a4ca37b60e21b81526001600160a01b0392831660048201526000196024820152306044820152905191909216916369328dec9160648083019260209291908290030181600087803b158015611a6657600080fd5b505af1158015611a7a573d6000803e3d6000fd5b505050506040513d6020811015611a9057600080fd5b5050600954604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015611add57600080fd5b505afa158015611af1573d6000803e3d6000fd5b505050506040513d6020811015611b0757600080fd5b5051905085611b1682866126c9565b1015611b535760405162461bcd60e51b8152600401808060200182810382526023815260200180613d7f6023913960400191505060405180910390fd5b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef234611b7c611262565b6002546040805192835260208301919091528051918290030190a1600e5460ff1615156001148015611bb057506001851515145b15610b0957610b096000610ef4565b600e5460ff1681565b611bd23382612e97565b50565b600080611be0611c22565b9050600c548110611c1457611c0c612710611c06600f54846130c390919063ffffffff16565b9061311c565b915050610a46565b600091505090565b600c5481565b6000610a4361315e565b6009546001600160a01b031681565b611c436130bf565b6001600160a01b0316611c546115fd565b6001600160a01b031614611c9d576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b612710611cbb600f546117bc601154856123db90919063ffffffff16565b1115611cc657600080fd5b601054604080519182526020820183905280517f3cc372f330f95ac9540626dc8a25f5bf21ba607215a5d58304cb804d446f104a9281900390910190a1601055565b42841015611d5d576040805162461bcd60e51b815260206004820152600f60248201527f7065726d69743a3a657870697265640000000000000000000000000000000000604482015290519081900360640190fd5b6001600160a01b0380881660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938a1660608401526080830189905260a083019390935260c08083018890528151808403909101815260e090920190528051910120611df388828686866132b6565b611dfe88888861243c565b5050505050505050565b600b546001600160a01b031681565b6000806000611e24612568565b50909250905061127f611e3783836126c9565b611c0684670de0b6b3a76400006130c3565b611e516130bf565b6001600160a01b0316611e626115fd565b6001600160a01b031614611eab576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6009546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611f0557600080fd5b505af1158015611f19573d6000803e3d6000fd5b505050506040513d6020811015611f2f57600080fd5b50506019546013546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b158015611f8b57600080fd5b505af1158015611f9f573d6000803e3d6000fd5b505050506040513d6020811015610cad57600080fd5b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6000611ff6611fed611262565b600254906130c3565b6120015750806110af565b610a3361200c611262565b600254611c069085906130c3565b6120226130bf565b6001600160a01b03166120336115fd565b6001600160a01b03161461207c576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b600d54604080519182526020820183905280517fa5dae50539d56dfe1fb5273d883b0c39bc76750a25d036fc5fbd09ad8fd5f57f9281900390910190a1600d55565b60006120cb611fed611262565b6120d7575060006110af565b610a33600254611c066120e8611262565b85906130c3565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60001b600060405180828054600181600116156101000203166002900480156121725780601f10612150576101008083540402835291820191612172565b820191906000526020600020905b81548152906001019060200180831161215e575b505091505060405180910390207fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660001b6121ab6133ee565b3060405160200180868152602001858152602001848152602001838152602001826001600160a01b031681526020019550505050505060405160208183030381529060405280519060200120905090565b6122046130bf565b6001600160a01b03166122156115fd565b6001600160a01b03161461225e576040805162461bcd60e51b81526020600482018190526024820152600080516020613d2b833981519152604482015290519081900360640190fd5b6001600160a01b0381166122a35760405162461bcd60e51b8152600401808060200182810382526026815260200180613ba06026913960400191505060405180910390fd5b6006546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600a546001600160a01b031681565b32331461236f576040805162461bcd60e51b815260206004820152601460248201527f59616b53747261746567793a3a6f6e6c79454f41000000000000000000000000604482015290519081900360640190fd5b600061237961315e565b9050600c548110156123d2576040805162461bcd60e51b815260206004820152601860248201527f41617665537472617465677956313a3a7265696e766573740000000000000000604482015290519081900360640190fd5b611bd2816133f2565b600082820183811015612435576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038316612497576040805162461bcd60e51b815260206004820152601c60248201527f5f617070726f76653a3a6f776e6572207a65726f206164647265737300000000604482015290519081900360640190fd5b6001600160a01b0382166124f2576040805162461bcd60e51b815260206004820152601e60248201527f5f617070726f76653a3a7370656e646572207a65726f20616464726573730000604482015290519081900360640190fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b601593909355601792909255601655601855565b601954604080516370a0823160e01b81523060048201529051600092839283926001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156125ba57600080fd5b505afa1580156125ce573d6000803e3d6000fd5b505050506040513d60208110156125e457600080fd5b5051601a54604080516370a0823160e01b815230600482015290519295506001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561263457600080fd5b505afa158015612648573d6000803e3d6000fd5b505050506040513d602081101561265e57600080fd5b505160155460175491935060009250839161268a9190611c06906126839083906126c9565b87906130c3565b11156126c4576126c1826126bb601554611c066126b46017546015546126c990919063ffffffff16565b88906130c3565b906126c9565b90505b909192565b600061243583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612a97565b6000806000612718612568565b919450925090506000612766612732866126bb87876126c9565b6126bb601754611c066127526016546015546126c990919063ffffffff16565b6127608b6126bb8c8c6126c9565b906130c3565b9050600061277484836126c9565b90505b8015610b095782848111156127895750835b60135460095460408051631a4ca37b60e21b81526001600160a01b03928316600482015260248101859052306044820152905191909216916369328dec9160648083019260209291908290030181600087803b1580156127e857600080fd5b505af11580156127fc573d6000803e3d6000fd5b505050506040513d602081101561281257600080fd5b5050601354600954604080517f573ade810000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101859052600260448201523060648201529051919092169163573ade819160848083019260209291908290030181600087803b15801561289357600080fd5b505af11580156128a7573d6000803e3d6000fd5b505050506040513d60208110156128bd57600080fd5b506128c89050612568565b919750955093508483106128dc5750610b09565b6128e685846126c9565b915050612777565b60008060006128fb612568565b925092509250600061292d601754611c066129236016546015546126c990919063ffffffff16565b61276088886126c9565b90505b80841015612a91578061294385846123db565b11156129565761295381856126c9565b91505b60185482101561296557612a91565b601354600954604080517fa415bcad0000000000000000000000000000000000000000000000000000000081526001600160a01b03928316600482015260248101869052600260448201526000606482018190523060848301529151929093169263a415bcad9260a4808301939282900301818387803b1580156129e857600080fd5b505af11580156129fc573d6000803e3d6000fd5b50506013546009546040805163e8eda9df60e01b81526001600160a01b03928316600482015260248101889052306044820152600060648201819052915192909316945063e8eda9df935060848084019391929182900301818387803b158015612a6557600080fd5b505af1158015612a79573d6000803e3d6000fd5b50505050612a85612568565b91955093509150612930565b50505050565b60008184841115612b265760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612aeb578181015183820152602001612ad3565b50505050905090810190601f168015612b185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038216612b735760405162461bcd60e51b8152600401808060200182810382526034815260200180613d4b6034913960400191505060405180910390fd5b612bb0816040518060600160405280602e8152602001613df8602e91396001600160a01b0386166000908152600460205260409020549190612a97565b6001600160a01b038085166000908152600460205260408082209390935590841681522054612bdf90826123db565b6001600160a01b0380841660008181526004602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b612c7881604051806060016040528060278152602001613dd1602791396001600160a01b0385166000908152600460205260409020549190612a97565b60046000846001600160a01b03166001600160a01b0316815260200190815260200160002081905550612cc881604051806060016040528060278152602001613ce3602791396002549190612a97565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6000612d1b8261270b565b6000612d25612568565b50509050808311612d365782612d3a565b6000195b60135460095460408051631a4ca37b60e21b81526001600160a01b03928316600482015260248101859052306044820152905193965060009391909216916369328dec91606480830192602092919082900301818787803b158015612d9e57600080fd5b505af1158015612db2573d6000803e3d6000fd5b505050506040513d6020811015612dc857600080fd5b505190506124356128ee565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015612e2b57600080fd5b505af1158015612e3f573d6000803e3d6000fd5b505050506040513d6020811015612e5557600080fd5b5051612e925760405162461bcd60e51b8152600401808060200182810382526024815260200180613bc66024913960400191505060405180910390fd5b505050565b60075415612ef2573360009081526008602052604090205460ff161515600114612ef25760405162461bcd60e51b815260040180806020018281038252602e815260200180613bea602e913960400191505060405180910390fd5b600e5460ff161515600114612f4e576040805162461bcd60e51b815260206004820152601860248201527f41617665537472617465677956313a3a5f6465706f7369740000000000000000604482015290519081900360640190fd5b600d5415612f77576000612f6061315e565b9050600d54811115612f7557612f75816133f2565b505b600954604080517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015230602483015260448201859052915191909216916323b872dd9160648083019260209291908290030181600087803b158015612fec57600080fd5b505af1158015613000573d6000803e3d6000fd5b505050506040513d602081101561301657600080fd5b5051613069576040805162461bcd60e51b815260206004820152601f60248201527f41617665537472617465677956313a3a7472616e73666572206661696c656400604482015290519081900360640190fd5b6130738282613690565b61307c8161371b565b6040805182815290516001600160a01b038416917fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c919081900360200190a25050565b3390565b6000826130d257506000610a33565b828202828482816130df57fe5b04146124355760405162461bcd60e51b8152600401808060200182810382526021815260200180613d0a6021913960400191505060405180910390fd5b600061243583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506137dd565b6040805160028082526060808301845260009390929190602083019080368337505060195482519293506001600160a01b03169183915060009061319e57fe5b6001600160a01b039283166020918202929092010152601a548251911690829060019081106131c957fe5b6001600160a01b03928316602091820292909201810191909152601254604080517f8b599f260000000000000000000000000000000000000000000000000000000081523060248201819052600482019283528651604483015286519390951694638b599f269487949193928392606490910191868101910280838360005b83811015613260578181015183820152602001613248565b50505050905001935050505060206040518083038186803b15801561328457600080fd5b505afa158015613298573d6000803e3d6000fd5b505050506040513d60208110156132ae57600080fd5b505191505090565b60006132c06120ef565b8560405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600060018286868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015613374573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906133aa5750866001600160a01b0316816001600160a01b0316145b6133e55760405162461bcd60e51b8152600401808060200182810382526024815260200180613c4c6024913960400191505060405180910390fd5b50505050505050565b4690565b6040805160028082526060808301845292602083019080368337505060195482519293506001600160a01b03169183915060009061342c57fe5b6001600160a01b039283166020918202929092010152601a5482519116908290600190811061345757fe5b6001600160a01b039283166020918202929092018101919091526012546040517f3111e7b30000000000000000000000000000000000000000000000000000000081526024810186905230604482018190526060600483019081528651606484015286519390951694633111e7b394879489948392608490910191878201910280838360005b838110156134f55781810151838201526020016134dd565b50505050905001945050505050602060405180830381600087803b15801561351c57600080fd5b505af1158015613530573d6000803e3d6000fd5b505050506040513d602081101561354657600080fd5b50506011546000906135619061271090611c069086906130c3565b9050801561358657600a54600b54613586916001600160a01b03908116911683612dd4565b60006135a3612710611c06601054876130c390919063ffffffff16565b905080156135c957600a546135c9906001600160a01b03166135c36115fd565b83612dd4565b60006135e6612710611c06600f54886130c390919063ffffffff16565b9050801561360557600a54613605906001600160a01b03163383612dd4565b600061363961361a836126bb86818b8a6126c9565b600a546009546014546001600160a01b03928316929182169116613842565b90506136448161371b565b7fc7606d21ac05cd309191543e409f0845c016120563783d70e4f41419dc0ef23461366d611262565b6002546040805192835260208301919091528051918290030190a1505050505050565b60025461369d90826123db565b6002556001600160a01b0382166000908152600460205260409020546136c390826123db565b6001600160a01b03831660008181526004602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6000811161375a5760405162461bcd60e51b8152600401808060200182810382526023815260200180613c706023913960400191505060405180910390fd5b6013546009546040805163e8eda9df60e01b81526001600160a01b039283166004820152602481018590523060448201526000606482018190529151929093169263e8eda9df926084808301939282900301818387803b1580156137bd57600080fd5b505af11580156137d1573d6000803e3d6000fd5b50505050611bd26128ee565b6000818361382c5760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315612aeb578181015183820152602001612ad3565b50600083858161383857fe5b0495945050505050565b60008061384f8585613a52565b509050600080846001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561388e57600080fd5b505afa1580156138a2573d6000803e3d6000fd5b505050506040513d60608110156138b857600080fd5b50805160209091015190925090506001600160a01b03838116908816146138db57905b6000806139098a856dffffffffffffffffffffffffffff16856dffffffffffffffffffffffffffff16613a83565b9050886001600160a01b0316856001600160a01b03161461392657905b61393189888c613acb565b60408051600080825260208201928390527f022c0d9f00000000000000000000000000000000000000000000000000000000835260248201858152604483018590523060648401819052608060848501908152845160a486018190526001600160a01b038e169663022c0d9f968a968a9691949193919260c486019290918190849084905b838110156139ce5781810151838201526020016139b6565b50505050905090810190601f1680156139fb5780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015613a1d57600080fd5b505af1158015613a31573d6000803e3d6000fd5b50505050818111613a425781613a44565b805b9a9950505050505050505050565b600080826001600160a01b0316846001600160a01b031610613a75578284613a78565b83835b915091509250929050565b600080613a92856103e56130c3565b90506000613aa082856130c3565b90506000613ab4836117bc886103e86130c3565b9050613ac0828261311c565b979650505050505050565b826001600160a01b031663a9059cbb83836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015613b2257600080fd5b505af1158015613b36573d6000803e3d6000fd5b505050506040513d6020811015613b4c57600080fd5b5051612e92576040805162461bcd60e51b815260206004820181905260248201527f4465784c6962726172793a3a5452414e534645525f46524f4d5f4641494c4544604482015290519081900360640190fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737341617665537472617465677956313a3a5452414e534645525f46524f4d5f4641494c45445065726d697373696f6e65643a3a6f6e6c79416c6c6f7765644465706f736974732c206e6f7420616c6c6f7765645065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f20616c6c6f776564206465706f7369746f7273417263683a3a76616c69646174655369673a20696e76616c6964207369676e617475726541617665537472617465677956313a3a5f7374616b654465706f736974546f6b656e735065726d697373696f6e65643a3a72656d6f76654465706f7369746f722c206e6f7420616c6c6f77656441617665537472617465677956313a3a62656c6f77206d696e696d756d2077697468647261775f6275726e3a206275726e20616d6f756e74206578636565647320746f74616c20737570706c79536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65725f7472616e73666572546f6b656e733a2063616e6e6f74207472616e7366657220746f20746865207a65726f206164647265737341617665537472617465677956313a3a7265736375654465706c6f79656446756e64737472616e7366657246726f6d3a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63655f6275726e3a206275726e20616d6f756e7420657863656564732066726f6d2062616c616e63655f7472616e73666572546f6b656e733a207472616e7366657220657863656564732066726f6d2062616c616e6365a2646970667358221220a21dd273bb4c4e3fe9be945dc7b6f9b49f22608e20d0656d1f352a7918a1aa7464736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve) It is recommended to use increaseAllowance and decreaseAllowance instead",
        "params": {
          "amount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "checkReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "deposit(uint256)": {
        "details": "Must mint receipt tokens to `msg.sender`",
        "params": {
          "amount": "deposit tokens"
        }
      },
      "depositFor(address,uint256)": {
        "details": "Must mint receipt tokens to `account`",
        "params": {
          "account": "address to receive receipt tokens",
          "amount": "deposit tokens"
        }
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Should revert for tokens without Permit",
        "params": {
          "amount": "Amount of tokens to deposit",
          "deadline": "The time at which to expire the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "estimateDeployedBalance()": {
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "estimateReinvestReward()": {
        "returns": {
          "_0": "reward tokens"
        }
      },
      "getDepositTokensForShares(uint256)": {
        "params": {
          "amount": "receipt tokens"
        },
        "returns": {
          "_0": "deposit tokens"
        }
      },
      "getDomainSeparator()": {
        "returns": {
          "_0": "Separator"
        }
      },
      "getSharesForDepositTokens(uint256)": {
        "details": "If contract is empty, use 1:1 ratioCould return zero shares for very low amounts of deposit tokens",
        "params": {
          "amount": "deposit tokens"
        },
        "returns": {
          "_0": "receipt tokens"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "deadline": "The time at which to expire the signature",
          "owner": "The address to approve from",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "spender": "The address to be approved",
          "v": "The recovery byte of the signature",
          "value": "The number of tokens that are approved (2^256-1 means infinite)"
        }
      },
      "recoverAVAX(uint256)": {
        "params": {
          "amount": "amount"
        }
      },
      "recoverERC20(address,uint256)": {
        "params": {
          "tokenAddress": "token address",
          "tokenAmount": "amount to recover"
        }
      },
      "removeDepositor(address)": {
        "params": {
          "depositor": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "rescueDeployedFunds(uint256,bool)": {
        "params": {
          "disableDeposits": "bool",
          "minReturnAmountAccepted": "min deposit tokens to receive"
        }
      },
      "revokeAllowance(address,address)": {
        "params": {
          "spender": "address",
          "token": "address"
        }
      },
      "setAllowances()": {
        "details": "Should use modifier `onlyOwner` to avoid griefing"
      },
      "totalDeposits()": {
        "returns": {
          "_0": "total deposits available on the contract"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdminFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateDepositsEnabled(bool)": {
        "params": {
          "newValue": "bool"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "updateDevFee(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateMinTokensToReinvest(uint256)": {
        "params": {
          "newValue": "threshold"
        }
      },
      "updateReinvestReward(uint256)": {
        "params": {
          "newValue": "fee in BIPS"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "receipt tokens"
        }
      }
    },
    "title": "Aave strategy for ERC20",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "allowDepositor(address)": {
        "notice": "Add an allowed depositor"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkReward()": {
        "notice": "Reward tokens avialable to strategy, including balance"
      },
      "deposit(uint256)": {
        "notice": "Deposit and deploy deposits tokens to the strategy"
      },
      "depositFor(address,uint256)": {
        "notice": "Deposit on behalf of another account"
      },
      "depositWithPermit(uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Deposit using Permit"
      },
      "estimateDeployedBalance()": {
        "notice": "Estimated deposit token balance deployed by strategy, excluding balance"
      },
      "estimateReinvestReward()": {
        "notice": "Estimate reinvest reward"
      },
      "getDepositTokensForShares(uint256)": {
        "notice": "Calculate deposit tokens for a given amount of receipt tokens"
      },
      "getDomainSeparator()": {
        "notice": "EIP-712 Domain separator"
      },
      "getSharesForDepositTokens(uint256)": {
        "notice": "Calculate receipt tokens for a given amount of deposit tokens"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Triggers an approval from owner to spender"
      },
      "recoverAVAX(uint256)": {
        "notice": "Recover AVAX from contract"
      },
      "recoverERC20(address,uint256)": {
        "notice": "Recover ERC20 from contract"
      },
      "reinvest()": {
        "notice": "Reinvest reward tokens into deposit tokens"
      },
      "removeDepositor(address)": {
        "notice": "Remove an allowed depositor"
      },
      "rescueDeployedFunds(uint256,bool)": {
        "notice": "Rescue all available deployed deposit tokens back to Strategy"
      },
      "revokeAllowance(address,address)": {
        "notice": "Revoke token allowance"
      },
      "setAllowances()": {
        "notice": "Approve tokens for use in Strategy"
      },
      "totalDeposits()": {
        "notice": "This function returns a snapshot of last available quotes"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "updateAdminFee(uint256)": {
        "notice": "Update admin fee"
      },
      "updateDepositsEnabled(bool)": {
        "notice": "Enable/disable deposits"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "updateDevFee(uint256)": {
        "notice": "Update developer fee"
      },
      "updateMaxTokensToDepositWithoutReinvest(uint256)": {
        "notice": "Update reinvest max threshold before a deposit"
      },
      "updateMinTokensToReinvest(uint256)": {
        "notice": "Update reinvest min threshold"
      },
      "updateReinvestReward(uint256)": {
        "notice": "Update reinvest reward"
      },
      "withdraw(uint256)": {
        "notice": "Redeem receipt tokens for deposit tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11375,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11378,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 11383,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 11389,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 11393,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11409,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 19644,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 19757,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "numberOfAllowedDepositors",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 19761,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "allowedDepositors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12548,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "depositToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(IERC20)14807"
      },
      {
        "astId": 12550,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "rewardToken",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)14807"
      },
      {
        "astId": 12552,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "devAddr",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 12554,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "MIN_TOKENS_TO_REINVEST",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 12556,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 12558,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "DEPOSITS_ENABLED",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 12560,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "REINVEST_REWARD_BIPS",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 12562,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "ADMIN_FEE_BIPS",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 12564,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "DEV_FEE_BIPS",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 21855,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "rewardController",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IAaveIncentivesController)14064"
      },
      {
        "astId": 21857,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "tokenDelegator",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ILendingPool)15855"
      },
      {
        "astId": 21859,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "swapPairToken",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IPair)16211"
      },
      {
        "astId": 21866,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "leverageLevel",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 21868,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "safetyFactor",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 21870,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "leverageBips",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 21872,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "minMinting",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 21874,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "avToken",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 21876,
        "contract": "contracts/strategies/AaveStrategyV1.sol:AaveStrategyV1",
        "label": "avDebtToken",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveIncentivesController)14064": {
        "encoding": "inplace",
        "label": "contract IAaveIncentivesController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)14807": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(ILendingPool)15855": {
        "encoding": "inplace",
        "label": "contract ILendingPool",
        "numberOfBytes": "20"
      },
      "t_contract(IPair)16211": {
        "encoding": "inplace",
        "label": "contract IPair",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}