{
  "address": "0x3969003d42976B021170eD82B1dA5Cd6675969D5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platypusVoter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "stakerFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boosterFeeBips",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "stakerFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "boosterFeeReceiver",
              "type": "address"
            }
          ],
          "internalType": "struct PlatypusVoterProxy.FeeSettings",
          "name": "_feeSettings",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PTP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositFee",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platypusVoter",
      "outputs": [
        {
          "internalType": "contract IPlatypusVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reinvestFeeBips",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boosterFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setBoosterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boosterFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setBoosterFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakerFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setStakerFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakerFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setStakerFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x63a68309b41834d9e22d8450c1ef2b6bc9cc3eb971d0cae1996c8a5aec1ca5ba",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x3969003d42976B021170eD82B1dA5Cd6675969D5",
    "transactionIndex": 0,
    "gasUsed": "2551030",
    "logsBloom": "0x
    "blockHash": "0x15e5792963aa64085115f26ab299732b7546b25f7f629d2e79853ba9af6b8882",
    "transactionHash": "0x63a68309b41834d9e22d8450c1ef2b6bc9cc3eb971d0cae1996c8a5aec1ca5ba",
    "logs": [],
    "blockNumber": 13067812,
    "cumulativeGasUsed": "2551030",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x40089e90156Fc6F994cc0eC86dbe84634A1C156F",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    {
      "stakerFeeBips": 1000,
      "boosterFeeBips": 1000,
      "stakerFeeReceiver": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
      "boosterFeeReceiver": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
    }
  ],
  "solcInputHash": "63be703b1674e2c2cade06f723f51ca8",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platypusVoter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakerFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boosterFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakerFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"boosterFeeReceiver\",\"type\":\"address\"}],\"internalType\":\"struct PlatypusVoterProxy.FeeSettings\",\"name\":\"_feeSettings\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PTP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositFee\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platypusVoter\",\"outputs\":[{\"internalType\":\"contract IPlatypusVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reinvestFeeBips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boosterFeeBips\",\"type\":\"uint256\"}],\"name\":\"setBoosterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterFeeReceiver\",\"type\":\"address\"}],\"name\":\"setBoosterFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakerFeeBips\",\"type\":\"uint256\"}],\"name\":\"setStakerFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakerFeeReceiver\",\"type\":\"address\"}],\"name\":\"setStakerFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"For accounting reasons, there is one approved strategy per Masterchef PID. In case of upgrade, use a new proxy.\",\"kind\":\"dev\",\"methods\":{\"approveStrategy(address,address)\":{\"details\":\"Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)\",\"params\":{\"_stakingContract\":\"address\",\"_strategy\":\"address\"}},\"claimReward(address,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Platypus Masterchef\"}},\"deposit(uint256,address,address,address,address,uint256,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_amount\":\"deposit amount\",\"_asset\":\"Platypus asset\",\"_depositFee\":\"deposit fee\",\"_pid\":\"PID\",\"_pool\":\"Platypus pool\",\"_stakingContract\":\"Platypus Masterchef\",\"_token\":\"Deposit asset\"}},\"emergencyWithdraw(uint256,address,address,address,address)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_asset\":\"Platypus asset\",\"_pid\":\"PID\",\"_pool\":\"Platypus pool\",\"_stakingContract\":\"Platypus Masterchef\",\"_token\":\"Deposit asset\"}},\"pendingRewards(address,uint256)\":{\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Platypus Masterchef\"},\"returns\":{\"_0\":\"pendingPtp\",\"_1\":\"pendingBonusToken\",\"_2\":\"bonusTokenAddress\"}},\"poolBalance(address,uint256)\":{\"params\":{\"_pid\":\"PID\",\"_stakingContract\":\"Platypus Masterchef\"},\"returns\":{\"balance\":\"in depositToken\"}},\"reinvestFeeBips()\":{\"returns\":{\"_0\":\"reinvest fee\"}},\"setBoosterFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setBoosterFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeReceiver\":\"address\"}},\"setStakerFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_stakerFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setStakerFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_stakerFeeReceiver\":\"address\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"withdraw(uint256,address,address,address,address,uint256,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_amount\":\"withdraw amount\",\"_asset\":\"Platypus asset\",\"_maxSlippage\":\"max slippage in bips\",\"_pid\":\"PID\",\"_pool\":\"Platypus pool\",\"_stakingContract\":\"Platypus Masterchef\",\"_token\":\"Deposit asset\"},\"returns\":{\"_0\":\"amount withdrawn, in _token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveStrategy(address,address)\":{\"notice\":\"Add an approved strategy\"},\"claimReward(address,uint256)\":{\"notice\":\"Claim and distribute PTP rewards\"},\"deposit(uint256,address,address,address,address,uint256,uint256)\":{\"notice\":\"Deposit function\"},\"emergencyWithdraw(uint256,address,address,address,address)\":{\"notice\":\"Emergency withdraw function\"},\"pendingRewards(address,uint256)\":{\"notice\":\"Pending rewards matching interface for PlatypusStrategy\"},\"poolBalance(address,uint256)\":{\"notice\":\"Pool balance\"},\"reinvestFeeBips()\":{\"notice\":\"Calculation of reinvest fee (boost + staking)\"},\"setBoosterFee(uint256)\":{\"notice\":\"Update booster fee\"},\"setBoosterFeeReceiver(address)\":{\"notice\":\"Update booster fee receiver\"},\"setStakerFee(uint256)\":{\"notice\":\"Update staker fee\"},\"setStakerFeeReceiver(address)\":{\"notice\":\"Update staker fee receiver\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"withdraw(uint256,address,address,address,address,uint256,uint256)\":{\"notice\":\"Withdraw function\"}},\"notice\":\"PlatypusVoterProxy is an upgradable contract. Strategies interact with PlatypusVoterProxy and PlatypusVoterProxy interacts with PlatypusVoter.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/PlatypusVoterProxy.sol\":\"PlatypusVoterProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterPlatypus.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IMasterPlatypus {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVePtpBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 _amount,\\n            uint256 _rewardDebt,\\n            uint256 _factor\\n        );\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _lpToken,\\n            uint256 _allocPoint,\\n            uint256 _lastRewardTimestamp,\\n            uint256 _accPtpPerShare,\\n            address _rewarder,\\n            uint256 _sumOfFactors,\\n            uint256 _accPtpPerFactorShare\\n        );\\n}\\n\",\"keccak256\":\"0xd8b54b1211fec8f22d4d83e99abce7fdb852f51094b6677a62a068b8cf986979\",\"license\":\"MIT\"},\"contracts/interfaces/IMasterPlatypusV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IMasterPlatypusV2 {\\n    function poolLength() external view returns (uint256);\\n\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingPtp,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        );\\n\\n    function rewarderBonusTokenInfo(uint256 _pid)\\n        external\\n        view\\n        returns (address bonusTokenAddress, string memory bonusTokenSymbol);\\n\\n    function massUpdatePools() external;\\n\\n    function updatePool(uint256 _pid) external;\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function multiClaim(uint256[] memory _pids)\\n        external\\n        returns (\\n            uint256,\\n            uint256[] memory,\\n            uint256[] memory\\n        );\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (uint256, uint256);\\n\\n    function emergencyWithdraw(uint256 _pid) external;\\n\\n    function migrate(uint256[] calldata _pids) external;\\n\\n    function depositFor(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _user\\n    ) external;\\n\\n    function updateFactor(address _user, uint256 _newVePtpBalance) external;\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 _amount,\\n            uint256 _rewardDebt,\\n            uint256 _factor\\n        );\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            address _lpToken,\\n            uint256 _allocPoint,\\n            uint256 _lastRewardTimestamp,\\n            uint256 _accPtpPerShare,\\n            address _rewarder,\\n            uint256 _sumOfFactors,\\n            uint256 _accPtpPerFactorShare,\\n            uint256 _adjustedAllocPoint\\n        );\\n}\\n\",\"keccak256\":\"0x9bac7d5f85473457c214a13d2c1c2b50c3edc096c6c14c29260de42528f2130e\",\"license\":\"MIT\"},\"contracts/interfaces/IPlatypusAsset.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IPlatypusAsset {\\n    function cash() external view returns (uint256);\\n\\n    function liability() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function pool() external view returns (address);\\n\\n    function underlyingToken() external view returns (address);\\n}\\n\",\"keccak256\":\"0xdd512264c2f7d6440a7185ed228d59dd0e45e894b641b345e5868504b6533f7d\",\"license\":\"MIT\"},\"contracts/interfaces/IPlatypusPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IPlatypusPool {\\n    function assetOf(address token) external view returns (address);\\n\\n    function deposit(\\n        address to,\\n        uint256 amount,\\n        address token,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        address token,\\n        uint256 liquidity,\\n        uint256 minimumAmount,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256);\\n\\n    function getHaircutRate() external view returns (uint256);\\n\\n    function quotePotentialWithdraw(address token, uint256 liquidity)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n\\n    function getC1() external view returns (uint256);\\n\\n    function getXThreshold() external view returns (uint256);\\n\\n    function getSlippageParamK() external view returns (uint256);\\n\\n    function getSlippageParamN() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3f624d4c62c7e235b0fec8b0d290904e2e7bc0b42a3f735a912b731cbb1a7e35\",\"license\":\"MIT\"},\"contracts/interfaces/IPlatypusStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IPlatypusStrategy {\\n    function PID() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x044937f4271a5323ade4001db1af1a29d9e257198d0fc4f9b9666c6de3659eb1\",\"license\":\"MIT\"},\"contracts/interfaces/IPlatypusVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IPlatypusVoter {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function vePTPBalance() external view returns (uint256);\\n\\n    function wrapAvaxBalance() external returns (uint256);\\n\\n    function depositsEnabled() external view returns (bool);\\n\\n    function depositFromBalance(uint256 _value) external;\\n\\n    function setVoterProxy(address _voterProxy) external;\\n\\n    function claimVePTP() external;\\n}\\n\",\"keccak256\":\"0xdbc92d104e529c8afe5540fd970747ab161190f55a9d420f0a16b4682eea8bf6\",\"license\":\"MIT\"},\"contracts/interfaces/IPlatypusVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"./IPlatypusVoter.sol\\\";\\n\\ninterface IPlatypusVoterProxy {\\n    function withdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _maxSlippage,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset\\n    ) external;\\n\\n    function deposit(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) external;\\n\\n    function pendingRewards(address _stakingContract, uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        );\\n\\n    function poolBalance(address _stakingContract, uint256 _pid) external view returns (uint256);\\n\\n    function platypusVoter() external view returns (IPlatypusVoter);\\n\\n    function claimReward(address _stakingContract, uint256 _pid) external;\\n\\n    function approveStrategy(address _stakingContract, address _strategy) external;\\n\\n    function reinvestFeeBips() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3e973a4c5f73ea08c1ac71c0fb5a70d3c37649f8fd2a1ea47bc360791b65682d\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa79bdc482a4a886790bbfecb531127ead361d3a82abd0aa1e175b7fc1733a6f6\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/PlatypusVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interfaces/IPlatypusVoter.sol\\\";\\nimport \\\"../interfaces/IMasterPlatypus.sol\\\";\\nimport \\\"../interfaces/IMasterPlatypusV2.sol\\\";\\nimport \\\"../interfaces/IPlatypusPool.sol\\\";\\nimport \\\"../interfaces/IPlatypusAsset.sol\\\";\\nimport \\\"../interfaces/IPlatypusStrategy.sol\\\";\\nimport \\\"../interfaces/IPlatypusVoterProxy.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IPlatypusVoter platypusVoter,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = platypusVoter.execute(target, value, data);\\n        if (!success) revert(\\\"PlatypusVoterProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\n/**\\n * @notice PlatypusVoterProxy is an upgradable contract.\\n * Strategies interact with PlatypusVoterProxy and\\n * PlatypusVoterProxy interacts with PlatypusVoter.\\n * @dev For accounting reasons, there is one approved\\n * strategy per Masterchef PID. In case of upgrade,\\n * use a new proxy.\\n */\\ncontract PlatypusVoterProxy is IPlatypusVoterProxy {\\n    using SafeMath for uint256;\\n    using SafeProxy for IPlatypusVoter;\\n    using SafeERC20 for IERC20;\\n\\n    struct FeeSettings {\\n        uint256 stakerFeeBips;\\n        uint256 boosterFeeBips;\\n        address stakerFeeReceiver;\\n        address boosterFeeReceiver;\\n    }\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    address internal constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    uint256 public boosterFee;\\n    uint256 public stakerFee;\\n    address public stakerFeeReceiver;\\n    address public boosterFeeReceiver;\\n    address public constant PTP = 0x22d4002028f537599bE9f666d1c4Fa138522f9c8;\\n    IPlatypusVoter public immutable override platypusVoter;\\n    address public devAddr;\\n\\n    // staking contract => pid => strategy\\n    mapping(address => mapping(uint256 => address)) private approvedStrategies;\\n    address private constant MASTERCHEF_V1 = 0xB0523f9F473812FB195Ee49BC7d2ab9873a98044;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"PlatypusVoterProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy(address _stakingContract, uint256 _pid) {\\n        require(approvedStrategies[_stakingContract][_pid] == msg.sender, \\\"PlatypusVoterProxy::onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _platypusVoter,\\n        address _devAddr,\\n        FeeSettings memory _feeSettings\\n    ) {\\n        devAddr = _devAddr;\\n        boosterFee = _feeSettings.boosterFeeBips;\\n        stakerFee = _feeSettings.stakerFeeBips;\\n        stakerFeeReceiver = _feeSettings.stakerFeeReceiver;\\n        boosterFeeReceiver = _feeSettings.boosterFeeReceiver;\\n        platypusVoter = IPlatypusVoter(_platypusVoter);\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) external onlyDev {\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Add an approved strategy\\n     * @dev Very sensitive, restricted to devAddr\\n     * @dev Can only be set once per PID and staking contract (reported by the strategy)\\n     * @param _stakingContract address\\n     * @param _strategy address\\n     */\\n    function approveStrategy(address _stakingContract, address _strategy) external override onlyDev {\\n        uint256 pid = IPlatypusStrategy(_strategy).PID();\\n        require(\\n            approvedStrategies[_stakingContract][pid] == address(0),\\n            \\\"PlatypusVoterProxy::Strategy for PID already added\\\"\\n        );\\n        approvedStrategies[_stakingContract][pid] = _strategy;\\n    }\\n\\n    /**\\n     * @notice Update booster fee\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setBoosterFee(uint256 _boosterFeeBips) external onlyDev {\\n        boosterFee = _boosterFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update staker fee\\n     * @dev Restricted to devAddr\\n     * @param _stakerFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setStakerFee(uint256 _stakerFeeBips) external onlyDev {\\n        stakerFee = _stakerFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update booster fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeReceiver address\\n     */\\n    function setBoosterFeeReceiver(address _boosterFeeReceiver) external onlyDev {\\n        boosterFeeReceiver = _boosterFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Update staker fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _stakerFeeReceiver address\\n     */\\n    function setStakerFeeReceiver(address _stakerFeeReceiver) external onlyDev {\\n        stakerFeeReceiver = _stakerFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Deposit function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _pool Platypus pool\\n     * @param _token Deposit asset\\n     * @param _asset Platypus asset\\n     * @param _amount deposit amount\\n     * @param _depositFee deposit fee\\n     */\\n    function deposit(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        uint256 liquidity = _depositTokenToAsset(_asset, _amount, _depositFee);\\n        IERC20(_token).safeApprove(_pool, _amount);\\n        IPlatypusPool(_pool).deposit(address(_token), _amount, address(platypusVoter), type(uint256).max);\\n        platypusVoter.safeExecute(\\n            _asset,\\n            0,\\n            abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, liquidity)\\n        );\\n        platypusVoter.safeExecute(\\n            _stakingContract,\\n            0,\\n            abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", _pid, liquidity)\\n        );\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, 0));\\n    }\\n\\n    /**\\n     * @notice Conversion for deposit token to Platypus asset\\n     * @return liquidity amount of LP tokens\\n     */\\n    function _depositTokenToAsset(\\n        address _asset,\\n        uint256 _amount,\\n        uint256 _depositFee\\n    ) private view returns (uint256 liquidity) {\\n        if (IPlatypusAsset(_asset).liability() == 0) {\\n            liquidity = _amount.sub(_depositFee);\\n        } else {\\n            liquidity = ((_amount.sub(_depositFee)).mul(IPlatypusAsset(_asset).totalSupply())).div(\\n                IPlatypusAsset(_asset).liability()\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculation of reinvest fee (boost + staking)\\n     * @return reinvest fee\\n     */\\n    function reinvestFeeBips() external view override returns (uint256) {\\n        uint256 boostFee = 0;\\n        if (boosterFee > 0 && boosterFeeReceiver > address(0) && platypusVoter.depositsEnabled()) {\\n            boostFee = boosterFee;\\n        }\\n\\n        uint256 stakingFee = 0;\\n        if (stakerFee > 0 && stakerFeeReceiver > address(0)) {\\n            stakingFee = stakerFee;\\n        }\\n        return boostFee.add(stakingFee);\\n    }\\n\\n    /**\\n     * @notice Calculation of withdraw fee\\n     * @param _pool Platypus pool\\n     * @param _token Withdraw token\\n     * @param _amount Withdraw amount, in _token\\n     * @return fee Withdraw fee\\n     */\\n    function _calculateWithdrawFee(\\n        address _pool,\\n        address _token,\\n        uint256 _amount\\n    ) private view returns (uint256 fee) {\\n        (, fee, ) = IPlatypusPool(_pool).quotePotentialWithdraw(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice Conversion for handling withdraw\\n     * @param _pid PID\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _amount withdraw amount in deposit asset\\n     * @return liquidity LP tokens\\n     */\\n    function _depositTokenToAssetForWithdrawal(\\n        uint256 _pid,\\n        address _stakingContract,\\n        uint256 _amount\\n    ) private view returns (uint256) {\\n        uint256 totalDeposits = _poolBalance(_stakingContract, _pid);\\n        (uint256 balance, , ) = IMasterPlatypus(_stakingContract).userInfo(_pid, address(platypusVoter));\\n        return _amount.mul(balance).div(totalDeposits);\\n    }\\n\\n    /**\\n     * @notice Withdraw function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _pool Platypus pool\\n     * @param _token Deposit asset\\n     * @param _asset Platypus asset\\n     * @param _maxSlippage max slippage in bips\\n     * @param _amount withdraw amount\\n     * @return amount withdrawn, in _token\\n     */\\n    function withdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset,\\n        uint256 _maxSlippage,\\n        uint256 _amount\\n    ) external override onlyStrategy(_stakingContract, _pid) returns (uint256) {\\n        uint256 liquidity = _depositTokenToAssetForWithdrawal(_pid, _stakingContract, _amount);\\n        platypusVoter.safeExecute(\\n            _stakingContract,\\n            0,\\n            abi.encodeWithSignature(\\\"withdraw(uint256,uint256)\\\", _pid, liquidity)\\n        );\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, liquidity));\\n        uint256 minimumReceive = liquidity.sub(_calculateWithdrawFee(_pool, _token, liquidity));\\n        uint256 slippage = minimumReceive.mul(_maxSlippage).div(BIPS_DIVISOR);\\n        minimumReceive = minimumReceive.sub(slippage);\\n        bytes memory result = platypusVoter.safeExecute(\\n            _pool,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,address,uint256)\\\",\\n                _token,\\n                liquidity,\\n                minimumReceive,\\n                address(this),\\n                type(uint256).max\\n            )\\n        );\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, 0));\\n        uint256 amount = toUint256(result, 0);\\n        IERC20(_token).safeTransfer(msg.sender, amount);\\n\\n        return amount;\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw function\\n     * @dev Restricted to strategy with _pid\\n     * @param _pid PID\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _pool Platypus pool\\n     * @param _token Deposit asset\\n     * @param _asset Platypus asset\\n     */\\n    function emergencyWithdraw(\\n        uint256 _pid,\\n        address _stakingContract,\\n        address _pool,\\n        address _token,\\n        address _asset\\n    ) external override onlyStrategy(_stakingContract, _pid) {\\n        platypusVoter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"emergencyWithdraw(uint256)\\\", _pid));\\n        uint256 balance = IERC20(_asset).balanceOf(address(platypusVoter));\\n        (uint256 expectedAmount, , ) = IPlatypusPool(_pool).quotePotentialWithdraw(_token, balance);\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, balance));\\n        platypusVoter.safeExecute(\\n            _pool,\\n            0,\\n            abi.encodeWithSignature(\\n                \\\"withdraw(address,uint256,uint256,address,uint256)\\\",\\n                _token,\\n                balance,\\n                expectedAmount,\\n                msg.sender,\\n                type(uint256).max\\n            )\\n        );\\n        platypusVoter.safeExecute(_asset, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, 0));\\n        platypusVoter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _pool, 0));\\n    }\\n\\n    /**\\n     * @notice Pending rewards matching interface for PlatypusStrategy\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _pid PID\\n     * @return pendingPtp\\n     * @return pendingBonusToken\\n     * @return bonusTokenAddress\\n     */\\n    function pendingRewards(address _stakingContract, uint256 _pid)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            address\\n        )\\n    {\\n        (uint256 pendingPtp, address bonusTokenAddress, , uint256 pendingBonusToken) = IMasterPlatypus(_stakingContract)\\n            .pendingTokens(_pid, address(platypusVoter));\\n\\n        return (pendingPtp, pendingBonusToken, bonusTokenAddress);\\n    }\\n\\n    /**\\n     * @notice Pool balance\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _pid PID\\n     * @return balance in depositToken\\n     */\\n    function poolBalance(address _stakingContract, uint256 _pid) external view override returns (uint256 balance) {\\n        return _poolBalance(_stakingContract, _pid);\\n    }\\n\\n    function _poolBalance(address _stakingContract, uint256 _pid) internal view returns (uint256 balance) {\\n        (uint256 assetBalance, , ) = IMasterPlatypus(_stakingContract).userInfo(_pid, address(platypusVoter));\\n        if (assetBalance == 0) return 0;\\n        address asset;\\n        if (_stakingContract == MASTERCHEF_V1) {\\n            (asset, , , , , , ) = IMasterPlatypus(_stakingContract).poolInfo(_pid);\\n        } else {\\n            (asset, , , , , , , ) = IMasterPlatypusV2(_stakingContract).poolInfo(_pid);\\n        }\\n        IPlatypusPool pool = IPlatypusPool(IPlatypusAsset(asset).pool());\\n        (uint256 expectedAmount, uint256 fee, bool enoughCash) = pool.quotePotentialWithdraw(\\n            IPlatypusAsset(asset).underlyingToken(),\\n            assetBalance\\n        );\\n        require(enoughCash, \\\"PlatypusVoterProxy::This shouldn't happen\\\");\\n        return expectedAmount.add(fee);\\n    }\\n\\n    /**\\n     * @notice Claim and distribute PTP rewards\\n     * @dev Restricted to strategy with _pid\\n     * @param _stakingContract Platypus Masterchef\\n     * @param _pid PID\\n     */\\n    function claimReward(address _stakingContract, uint256 _pid)\\n        external\\n        override\\n        onlyStrategy(_stakingContract, _pid)\\n    {\\n        (address bonusTokenAddress, ) = IMasterPlatypus(_stakingContract).rewarderBonusTokenInfo(_pid);\\n\\n        platypusVoter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"deposit(uint256,uint256)\\\", _pid, 0));\\n        if (bonusTokenAddress == WAVAX) {\\n            platypusVoter.wrapAvaxBalance();\\n        }\\n\\n        uint256 pendingPtp = IERC20(PTP).balanceOf(address(platypusVoter));\\n        uint256 pendingBonusToken = bonusTokenAddress > address(0)\\n            ? IERC20(bonusTokenAddress).balanceOf(address(platypusVoter))\\n            : 0;\\n\\n        if (pendingPtp > 0) {\\n            uint256 boostFee = 0;\\n            if (boosterFee > 0 && boosterFeeReceiver > address(0) && platypusVoter.depositsEnabled()) {\\n                boostFee = pendingPtp.mul(boosterFee).div(BIPS_DIVISOR);\\n                platypusVoter.depositFromBalance(boostFee);\\n                IERC20(address(platypusVoter)).safeTransfer(boosterFeeReceiver, boostFee);\\n            }\\n\\n            uint256 stakingFee = 0;\\n            if (stakerFee > 0 && stakerFeeReceiver > address(0)) {\\n                stakingFee = pendingPtp.mul(stakerFee).div(BIPS_DIVISOR);\\n                platypusVoter.safeExecute(\\n                    PTP,\\n                    0,\\n                    abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", stakerFeeReceiver, stakingFee)\\n                );\\n            }\\n\\n            uint256 reward = pendingPtp.sub(boostFee).sub(stakingFee);\\n            platypusVoter.safeExecute(PTP, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward));\\n        }\\n\\n        if (pendingBonusToken > 0) {\\n            platypusVoter.safeExecute(\\n                bonusTokenAddress,\\n                0,\\n                abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, pendingBonusToken)\\n            );\\n        }\\n\\n        if (platypusVoter.vePTPBalance() > 0) {\\n            platypusVoter.claimVePTP();\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start.add(32), \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0x45ef1f428e1a8af980d026b971eff0f81d4674637e86dd84ee1b30fc72e238b8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002d2638038062002d268339810160408190526200003491620000bb565b600480546001600160a01b03199081166001600160a01b0394851617909155602082015160005581516001556040820151600280548316918516919091179055606091820151600380549092169316929092179091551b6001600160601b03191660805262000163565b80516001600160a01b0381168114620000b657600080fd5b919050565b600080600083850360c0811215620000d1578384fd5b620000dc856200009e565b9350620000ec602086016200009e565b92506080603f198201121562000100578182fd5b50604051608081016001600160401b03811182821017156200011e57fe5b604090815285015181526060850151602082015262000140608086016200009e565b60408201526200015360a086016200009e565b6060820152809150509250925092565b60805160601c612b41620001e56000398061039352806103e3528061054752806105de528061079652806107e652806108ab52806109605280610a055280610aed5280610b645280610c565280610cef5280610d865280610f1b528061100352806110e2528061134152806115b752806115fd5280611e125250612b416000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80638583b7fa116100cd578063a530882e11610081578063c494448e11610066578063c494448e146102a6578063d289d969146102b9578063da09c72c146102c15761016c565b8063a530882e14610280578063b5e893a5146102935761016c565b80638dc1564a116100b25780638dc1564a146102525780639291d5631461025a57806397eef1871461026d5761016c565b80638583b7fa14610237578063865710f01461023f5761016c565b80634b2d9ffc116101245780636099ecb2116101095780636099ecb214610205578063781a29d114610227578063792a230f1461022f5761016c565b80634b2d9ffc146101ea578063529ebc7d146101f25761016c565b8063174e31c411610155578063174e31c4146101af5780632d61a546146101c2578063491cad29146101d75761016c565b806301e1c48d1461017157806302eb6f7e1461019a575b600080fd5b61018461017f3660046122b2565b6102c9565b6040516101919190612a65565b60405180910390f35b6101ad6101a8366004612439565b6102de565b005b6101ad6101bd3660046122b2565b610648565b6101ca610e01565b6040516101919190612622565b6101ad6101e53660046121f3565b610e10565b610184610e69565b6101ad6102003660046124a0565b610e6f565b6102186102133660046122b2565b610fe8565b60405161019193929190612aa4565b6101846110a6565b6101ca6110ac565b6101846110bb565b6101ad61024d366004612409565b6111b3565b6101ca6111e2565b6101ad6102683660046121f3565b6111fa565b6101ad61027b366004612409565b611253565b61018461028e3660046124a0565b611282565b6101ad6102a13660046121f3565b611432565b6101ad6102b436600461222b565b61148b565b6101ca6115b5565b6101ca6115d9565b60006102d583836115e8565b90505b92915050565b6001600160a01b0380851660009081526005602090815260408083208984529091529020548591879116331461032f5760405162461bcd60e51b81526004016103269061293f565b60405180910390fd5b6103bb866000896040516024016103469190612a65565b60408051601f198184030181529190526020810180516001600160e01b03167f5312ea8e000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506040516370a0823160e01b81526000906001600160a01b038516906370a082319061040b907f000000000000000000000000000000000000000000000000000000000000000090600401612622565b60206040518083038186803b15801561042357600080fd5b505afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190612421565b90506000866001600160a01b031663907448ed87846040518363ffffffff1660e01b815260040161048d929190612636565b60606040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190612579565b5050905061056f85600089856040516024016104fa929190612636565b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b50610606876000888585336000196040516024016105919594939291906126e0565b60408051601f198184030181529190526020810180516001600160e01b03167f09a5fca3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506106218560008a60006040516024016104fa929190612669565b5061063c8660008960006040516024016104fa929190612669565b50505050505050505050565b6001600160a01b038083166000908152600560209081526040808320858452909152902054839183911633146106905760405162461bcd60e51b81526004016103269061293f565b6040517fbc70fdbc0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0386169063bc70fdbc906106d8908790600401612a65565b60006040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072c9190810190612263565b5090506107be856000866000604051602401610749929190612a85565b60408051601f198184030181529190526020810180516001600160e01b03167fe2bbb158000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506001600160a01b03811673b31f66aa3c1e785363f0875a1b74e27b85fd66c71415610879577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a556f516040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190612421565b505b6040516370a0823160e01b81526000907322d4002028f537599be9f666d1c4fa138522f9c8906370a08231906108d3907f000000000000000000000000000000000000000000000000000000000000000090600401612622565b60206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190612421565b905060006001600160a01b03831661093c5760006109d8565b6040516370a0823160e01b81526001600160a01b038416906370a0823190610988907f000000000000000000000000000000000000000000000000000000000000000090600401612622565b60206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190612421565b90508115610cca5760008080541180156109fc57506003546001600160a01b031615155b8015610a9457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5c57600080fd5b505afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906123b9565b15610b8e57610aba612710610ab460005486611a3390919063ffffffff16565b90611a6d565b6040517f7c0bb4ab0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637c0bb4ab90610b22908490600401612a65565b600060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b5050600354610b8e92506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692501683611aaf565b600080600154118015610bab57506002546001600160a01b031615155b15610c8057610bcb612710610ab460015487611a3390919063ffffffff16565b600254604051919250610c7e917322d4002028f537599be9f666d1c4fa138522f9c891600091610c09916001600160a01b0316908690602401612636565b60408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b505b6000610c9682610c908786611b22565b90611b22565b9050610cc57322d4002028f537599be9f666d1c4fa138522f9c860003384604051602401610c09929190612636565b505050505b8015610ceb57610ce98360003384604051602401610c09929190612636565b505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663129635956040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4657600080fd5b505afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190612421565b1115610df8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a71871226040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050505b50505050505050565b6002546001600160a01b031681565b6004546001600160a01b03163314610e3a5760405162461bcd60e51b815260040161032690612726565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60015481565b6001600160a01b0380871660009081526005602090815260408083208b845290915290205487918991163314610eb75760405162461bcd60e51b81526004016103269061293f565b6000610ec4868686611b64565b9050610eda6001600160a01b0388168987611cee565b6040517f90d250740000000000000000000000000000000000000000000000000000000081526001600160a01b038916906390d2507490610f47908a9089907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612685565b602060405180830381600087803b158015610f6157600080fd5b505af1158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f999190612421565b50610fb38660008b846040516024016104fa929190612636565b50610fcd8960008c84604051602401610749929190612a96565b50610df38660008b60006040516024016104fa929190612669565b600080600080600080876001600160a01b031663ffcd4263887f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161103f929190612a6e565b60006040518083038186803b15801561105757600080fd5b505afa15801561106b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110939190810190612519565b9298509196509450505050509250925092565b60005481565b6003546001600160a01b031681565b600080548190158015906110d957506003546001600160a01b031615155b801561117157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113957600080fd5b505afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117191906123b9565b1561117b57506000545b60008060015411801561119857506002546001600160a01b031615155b156111a257506001545b6111ac8282611dca565b9250505090565b6004546001600160a01b031633146111dd5760405162461bcd60e51b815260040161032690612726565b600055565b7322d4002028f537599be9f666d1c4fa138522f9c881565b6004546001600160a01b031633146112245760405162461bcd60e51b815260040161032690612726565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b0316331461127d5760405162461bcd60e51b815260040161032690612726565b600155565b6001600160a01b0380871660009081526005602090815260408083208b8452909152812054909188918a911633146112cc5760405162461bcd60e51b81526004016103269061293f565b60006112d98b8b87611def565b90506113698a60008d846040516024016112f4929190612a96565b60408051601f198184030181529190526020810180516001600160e01b03167f441a3e70000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506113838760008b846040516024016104fa929190612636565b50600061139b6113948b8b85611eb2565b8390611b22565b905060006113af612710610ab4848b611a33565b90506113bb8282611b22565b915060606113e08c60008d8787306000196040516024016105919594939291906126e0565b90506113fc8a60008e60006040516024016104fa929190612669565b50600061140a826000611f56565b90506114206001600160a01b038d163383611aaf565b9e9d5050505050505050505050505050565b6004546001600160a01b0316331461145c5760405162461bcd60e51b815260040161032690612726565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031633146114b55760405162461bcd60e51b815260040161032690612726565b6000816001600160a01b0316635eaec0e46040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114f257600080fd5b505af1158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a9190612421565b6001600160a01b03848116600090815260056020908152604080832085845290915290205491925016156115705760405162461bcd60e51b8152600401610326906127cb565b6001600160a01b03928316600090815260056020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031681565b600080836001600160a01b03166393f1a40b847f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611639929190612a6e565b60606040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168991906125ad565b5050905080600014156116a05760009150506102d8565b60006001600160a01b03851673b0523f9f473812fb195ee49bc7d2ab9873a98044141561175257604051631526fe2760e01b81526001600160a01b03861690631526fe27906116f3908790600401612a65565b60e06040518083038186803b15801561170b57600080fd5b505afa15801561171f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174391906122dd565b509495506117da945050505050565b604051631526fe2760e01b81526001600160a01b03861690631526fe279061177e908790600401612a65565b6101006040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190612347565b509596505050505050505b6000816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561181557600080fd5b505afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d919061220f565b90506000806000836001600160a01b031663907448ed866001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d4919061220f565b886040518363ffffffff1660e01b81526004016118f2929190612636565b60606040518083038186803b15801561190a57600080fd5b505afa15801561191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119429190612579565b925092509250806119655760405162461bcd60e51b8152600401610326906128e2565b61196f8383611dca565b9998505050505050505050565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b81526004016119b2939291906126af565b600060405180830381600087803b1580156119cc57600080fd5b505af11580156119e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a0891908101906123d3565b9150915081611a295760405162461bcd60e51b815260040161032690612828565b9695505050505050565b600082611a42575060006102d8565b82820282848281611a4f57fe5b04146102d55760405162461bcd60e51b815260040161032690612885565b60006102d583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611f8c565b611b1d8363a9059cbb60e01b8484604051602401611ace929190612636565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611fc3565b505050565b60006102d583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612052565b6000836001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9f57600080fd5b505afa158015611bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd79190612421565b611bec57611be58383611b22565b9050611ce7565b611ce4846001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2857600080fd5b505afa158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c609190612421565b610ab4866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612421565b611cde8787611b22565b90611a33565b90505b9392505050565b801580611d8f57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90611d3d903090869060040161264f565b60206040518083038186803b158015611d5557600080fd5b505afa158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190612421565b155b611dab5760405162461bcd60e51b815260040161032690612a08565b611b1d8363095ea7b360e01b8484604051602401611ace929190612636565b6000828201838110156102d55760405162461bcd60e51b81526004016103269061275d565b600080611dfc84866115e8565b90506000846001600160a01b03166393f1a40b877f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611e4e929190612a6e565b60606040518083038186803b158015611e6657600080fd5b505afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e91906125ad565b50909150611a29905082610ab48684611a33565b6040517f907448ed0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063907448ed90611efc9086908690600401612636565b60606040518083038186803b158015611f1457600080fd5b505afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190612579565b5095945050505050565b6000611f63826020611dca565b83511015611f835760405162461bcd60e51b815260040161032690612794565b50016020015190565b60008183611fad5760405162461bcd60e51b81526004016103269190612713565b506000838581611fb957fe5b0495945050505050565b6060612018826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661207e9092919063ffffffff16565b805190915015611b1d578080602001905181019061203691906123b9565b611b1d5760405162461bcd60e51b8152600401610326906129ab565b600081848411156120765760405162461bcd60e51b81526004016103269190612713565b505050900390565b6060611ce484846000858561209285612128565b6120ae5760405162461bcd60e51b815260040161032690612974565b60006060866001600160a01b031685876040516120cb9190612606565b60006040518083038185875af1925050503d8060008114612108576040519150601f19603f3d011682016040523d82523d6000602084013e61210d565b606091505b509150915061211d828286612132565b979650505050505050565b803b15155b919050565b60608315612141575081611ce7565b8251156121515782518084602001fd5b8160405162461bcd60e51b81526004016103269190612713565b8051801515811461212d57600080fd5b600082601f83011261218b578081fd5b815167ffffffffffffffff808211156121a057fe5b604051601f8301601f1916810160200182811182821017156121be57fe5b6040528281529250828483016020018610156121d957600080fd5b6121ea836020830160208801612ac3565b50505092915050565b600060208284031215612204578081fd5b81356102d581612af3565b600060208284031215612220578081fd5b81516102d581612af3565b6000806040838503121561223d578081fd5b823561224881612af3565b9150602083013561225881612af3565b809150509250929050565b60008060408385031215612275578182fd5b825161228081612af3565b602084015190925067ffffffffffffffff81111561229c578182fd5b6122a88582860161217b565b9150509250929050565b600080604083850312156122c4578182fd5b82356122cf81612af3565b946020939093013593505050565b600080600080600080600060e0888a0312156122f7578283fd5b875161230281612af3565b80975050602088015195506040880151945060608801519350608088015161232981612af3565b8093505060a0880151915060c0880151905092959891949750929550565b600080600080600080600080610100898b031215612363578081fd5b885161236e81612af3565b80985050602089015196506040890151955060608901519450608089015161239581612af3565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b6000602082840312156123ca578081fd5b6102d58261216b565b600080604083850312156123e5578182fd5b6123ee8361216b565b9150602083015167ffffffffffffffff81111561229c578182fd5b60006020828403121561241a578081fd5b5035919050565b600060208284031215612432578081fd5b5051919050565b600080600080600060a08688031215612450578081fd5b85359450602086013561246281612af3565b9350604086013561247281612af3565b9250606086013561248281612af3565b9150608086013561249281612af3565b809150509295509295909350565b600080600080600080600060e0888a0312156124ba578081fd5b8735965060208801356124cc81612af3565b955060408801356124dc81612af3565b945060608801356124ec81612af3565b935060808801356124fc81612af3565b9699959850939692959460a0840135945060c09093013592915050565b6000806000806080858703121561252e578182fd5b84519350602085015161254081612af3565b604086015190935067ffffffffffffffff81111561255c578283fd5b6125688782880161217b565b606096909601519497939650505050565b60008060006060848603121561258d578081fd5b83519250602084015191506125a46040850161216b565b90509250925092565b6000806000606084860312156125c1578081fd5b8351925060208401519150604084015190509250925092565b600081518084526125f2816020860160208601612ac3565b601f01601f19169290920160200192915050565b60008251612618818460208701612ac3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b60006001600160a01b0385168252836020830152606060408301526126d760608301846125da565b95945050505050565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b6000602082526102d560208301846125da565b6020808252601b908201527f506c617479707573566f74657250726f78793a3a6f6e6c794465760000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526015908201527f746f55696e743235365f6f75744f66426f756e64730000000000000000000000604082015260600190565b60208082526032908201527f506c617479707573566f74657250726f78793a3a537472617465677920666f7260408201527f2050494420616c72656164792061646465640000000000000000000000000000606082015260800190565b60208082526026908201527f506c617479707573566f74657250726f78793a3a73616665457865637574652060408201527f6661696c65640000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f506c617479707573566f74657250726f78793a3a546869732073686f756c646e60408201527f27742068617070656e0000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f506c617479707573566f74657250726f78793a3a6f6e6c795374726174656779604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b91825260ff16602082015260400190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b60005b83811015612ade578181015183820152602001612ac6565b83811115612aed576000848401525b50505050565b6001600160a01b0381168114612b0857600080fd5b5056fea2646970667358221220f41c9c3d5557a8434435fb937c48a380d0f95ad6ed758df678ecbc814e765bd164736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80638583b7fa116100cd578063a530882e11610081578063c494448e11610066578063c494448e146102a6578063d289d969146102b9578063da09c72c146102c15761016c565b8063a530882e14610280578063b5e893a5146102935761016c565b80638dc1564a116100b25780638dc1564a146102525780639291d5631461025a57806397eef1871461026d5761016c565b80638583b7fa14610237578063865710f01461023f5761016c565b80634b2d9ffc116101245780636099ecb2116101095780636099ecb214610205578063781a29d114610227578063792a230f1461022f5761016c565b80634b2d9ffc146101ea578063529ebc7d146101f25761016c565b8063174e31c411610155578063174e31c4146101af5780632d61a546146101c2578063491cad29146101d75761016c565b806301e1c48d1461017157806302eb6f7e1461019a575b600080fd5b61018461017f3660046122b2565b6102c9565b6040516101919190612a65565b60405180910390f35b6101ad6101a8366004612439565b6102de565b005b6101ad6101bd3660046122b2565b610648565b6101ca610e01565b6040516101919190612622565b6101ad6101e53660046121f3565b610e10565b610184610e69565b6101ad6102003660046124a0565b610e6f565b6102186102133660046122b2565b610fe8565b60405161019193929190612aa4565b6101846110a6565b6101ca6110ac565b6101846110bb565b6101ad61024d366004612409565b6111b3565b6101ca6111e2565b6101ad6102683660046121f3565b6111fa565b6101ad61027b366004612409565b611253565b61018461028e3660046124a0565b611282565b6101ad6102a13660046121f3565b611432565b6101ad6102b436600461222b565b61148b565b6101ca6115b5565b6101ca6115d9565b60006102d583836115e8565b90505b92915050565b6001600160a01b0380851660009081526005602090815260408083208984529091529020548591879116331461032f5760405162461bcd60e51b81526004016103269061293f565b60405180910390fd5b6103bb866000896040516024016103469190612a65565b60408051601f198184030181529190526020810180516001600160e01b03167f5312ea8e000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506040516370a0823160e01b81526000906001600160a01b038516906370a082319061040b907f000000000000000000000000000000000000000000000000000000000000000090600401612622565b60206040518083038186803b15801561042357600080fd5b505afa158015610437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045b9190612421565b90506000866001600160a01b031663907448ed87846040518363ffffffff1660e01b815260040161048d929190612636565b60606040518083038186803b1580156104a557600080fd5b505afa1580156104b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dd9190612579565b5050905061056f85600089856040516024016104fa929190612636565b60408051601f198184030181529190526020810180516001600160e01b03167f095ea7b3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b50610606876000888585336000196040516024016105919594939291906126e0565b60408051601f198184030181529190526020810180516001600160e01b03167f09a5fca3000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506106218560008a60006040516024016104fa929190612669565b5061063c8660008960006040516024016104fa929190612669565b50505050505050505050565b6001600160a01b038083166000908152600560209081526040808320858452909152902054839183911633146106905760405162461bcd60e51b81526004016103269061293f565b6040517fbc70fdbc0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0386169063bc70fdbc906106d8908790600401612a65565b60006040518083038186803b1580156106f057600080fd5b505afa158015610704573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261072c9190810190612263565b5090506107be856000866000604051602401610749929190612a85565b60408051601f198184030181529190526020810180516001600160e01b03167fe2bbb158000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506001600160a01b03811673b31f66aa3c1e785363f0875a1b74e27b85fd66c71415610879577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635a556f516040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561083f57600080fd5b505af1158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190612421565b505b6040516370a0823160e01b81526000907322d4002028f537599be9f666d1c4fa138522f9c8906370a08231906108d3907f000000000000000000000000000000000000000000000000000000000000000090600401612622565b60206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109239190612421565b905060006001600160a01b03831661093c5760006109d8565b6040516370a0823160e01b81526001600160a01b038416906370a0823190610988907f000000000000000000000000000000000000000000000000000000000000000090600401612622565b60206040518083038186803b1580156109a057600080fd5b505afa1580156109b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d89190612421565b90508115610cca5760008080541180156109fc57506003546001600160a01b031615155b8015610a9457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a5c57600080fd5b505afa158015610a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9491906123b9565b15610b8e57610aba612710610ab460005486611a3390919063ffffffff16565b90611a6d565b6040517f7c0bb4ab0000000000000000000000000000000000000000000000000000000081529091506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637c0bb4ab90610b22908490600401612a65565b600060405180830381600087803b158015610b3c57600080fd5b505af1158015610b50573d6000803e3d6000fd5b5050600354610b8e92506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692501683611aaf565b600080600154118015610bab57506002546001600160a01b031615155b15610c8057610bcb612710610ab460015487611a3390919063ffffffff16565b600254604051919250610c7e917322d4002028f537599be9f666d1c4fa138522f9c891600091610c09916001600160a01b0316908690602401612636565b60408051601f198184030181529190526020810180516001600160e01b03167fa9059cbb000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b505b6000610c9682610c908786611b22565b90611b22565b9050610cc57322d4002028f537599be9f666d1c4fa138522f9c860003384604051602401610c09929190612636565b505050505b8015610ceb57610ce98360003384604051602401610c09929190612636565b505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663129635956040518163ffffffff1660e01b815260040160206040518083038186803b158015610d4657600080fd5b505afa158015610d5a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7e9190612421565b1115610df8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a71871226040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b505050505b50505050505050565b6002546001600160a01b031681565b6004546001600160a01b03163314610e3a5760405162461bcd60e51b815260040161032690612726565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60015481565b6001600160a01b0380871660009081526005602090815260408083208b845290915290205487918991163314610eb75760405162461bcd60e51b81526004016103269061293f565b6000610ec4868686611b64565b9050610eda6001600160a01b0388168987611cee565b6040517f90d250740000000000000000000000000000000000000000000000000000000081526001600160a01b038916906390d2507490610f47908a9089907f00000000000000000000000000000000000000000000000000000000000000009060001990600401612685565b602060405180830381600087803b158015610f6157600080fd5b505af1158015610f75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f999190612421565b50610fb38660008b846040516024016104fa929190612636565b50610fcd8960008c84604051602401610749929190612a96565b50610df38660008b60006040516024016104fa929190612669565b600080600080600080876001600160a01b031663ffcd4263887f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161103f929190612a6e565b60006040518083038186803b15801561105757600080fd5b505afa15801561106b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110939190810190612519565b9298509196509450505050509250925092565b60005481565b6003546001600160a01b031681565b600080548190158015906110d957506003546001600160a01b031615155b801561117157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561113957600080fd5b505afa15801561114d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117191906123b9565b1561117b57506000545b60008060015411801561119857506002546001600160a01b031615155b156111a257506001545b6111ac8282611dca565b9250505090565b6004546001600160a01b031633146111dd5760405162461bcd60e51b815260040161032690612726565b600055565b7322d4002028f537599be9f666d1c4fa138522f9c881565b6004546001600160a01b031633146112245760405162461bcd60e51b815260040161032690612726565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b0316331461127d5760405162461bcd60e51b815260040161032690612726565b600155565b6001600160a01b0380871660009081526005602090815260408083208b8452909152812054909188918a911633146112cc5760405162461bcd60e51b81526004016103269061293f565b60006112d98b8b87611def565b90506113698a60008d846040516024016112f4929190612a96565b60408051601f198184030181529190526020810180516001600160e01b03167f441a3e70000000000000000000000000000000000000000000000000000000001790526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692919061197c565b506113838760008b846040516024016104fa929190612636565b50600061139b6113948b8b85611eb2565b8390611b22565b905060006113af612710610ab4848b611a33565b90506113bb8282611b22565b915060606113e08c60008d8787306000196040516024016105919594939291906126e0565b90506113fc8a60008e60006040516024016104fa929190612669565b50600061140a826000611f56565b90506114206001600160a01b038d163383611aaf565b9e9d5050505050505050505050505050565b6004546001600160a01b0316331461145c5760405162461bcd60e51b815260040161032690612726565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031633146114b55760405162461bcd60e51b815260040161032690612726565b6000816001600160a01b0316635eaec0e46040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156114f257600080fd5b505af1158015611506573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061152a9190612421565b6001600160a01b03848116600090815260056020908152604080832085845290915290205491925016156115705760405162461bcd60e51b8152600401610326906127cb565b6001600160a01b03928316600090815260056020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004546001600160a01b031681565b600080836001600160a01b03166393f1a40b847f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611639929190612a6e565b60606040518083038186803b15801561165157600080fd5b505afa158015611665573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168991906125ad565b5050905080600014156116a05760009150506102d8565b60006001600160a01b03851673b0523f9f473812fb195ee49bc7d2ab9873a98044141561175257604051631526fe2760e01b81526001600160a01b03861690631526fe27906116f3908790600401612a65565b60e06040518083038186803b15801561170b57600080fd5b505afa15801561171f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174391906122dd565b509495506117da945050505050565b604051631526fe2760e01b81526001600160a01b03861690631526fe279061177e908790600401612a65565b6101006040518083038186803b15801561179757600080fd5b505afa1580156117ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117cf9190612347565b509596505050505050505b6000816001600160a01b03166316f0115b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561181557600080fd5b505afa158015611829573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184d919061220f565b90506000806000836001600160a01b031663907448ed866001600160a01b0316632495a5996040518163ffffffff1660e01b815260040160206040518083038186803b15801561189c57600080fd5b505afa1580156118b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d4919061220f565b886040518363ffffffff1660e01b81526004016118f2929190612636565b60606040518083038186803b15801561190a57600080fd5b505afa15801561191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119429190612579565b925092509250806119655760405162461bcd60e51b8152600401610326906128e2565b61196f8383611dca565b9998505050505050505050565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b81526004016119b2939291906126af565b600060405180830381600087803b1580156119cc57600080fd5b505af11580156119e0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a0891908101906123d3565b9150915081611a295760405162461bcd60e51b815260040161032690612828565b9695505050505050565b600082611a42575060006102d8565b82820282848281611a4f57fe5b04146102d55760405162461bcd60e51b815260040161032690612885565b60006102d583836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611f8c565b611b1d8363a9059cbb60e01b8484604051602401611ace929190612636565b60408051601f198184030181529190526020810180516001600160e01b03167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611fc3565b505050565b60006102d583836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f7700815250612052565b6000836001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9f57600080fd5b505afa158015611bb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bd79190612421565b611bec57611be58383611b22565b9050611ce7565b611ce4846001600160a01b031663705727b56040518163ffffffff1660e01b815260040160206040518083038186803b158015611c2857600080fd5b505afa158015611c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c609190612421565b610ab4866001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c9c57600080fd5b505afa158015611cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd49190612421565b611cde8787611b22565b90611a33565b90505b9392505050565b801580611d8f57506040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063dd62ed3e90611d3d903090869060040161264f565b60206040518083038186803b158015611d5557600080fd5b505afa158015611d69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d8d9190612421565b155b611dab5760405162461bcd60e51b815260040161032690612a08565b611b1d8363095ea7b360e01b8484604051602401611ace929190612636565b6000828201838110156102d55760405162461bcd60e51b81526004016103269061275d565b600080611dfc84866115e8565b90506000846001600160a01b03166393f1a40b877f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401611e4e929190612a6e565b60606040518083038186803b158015611e6657600080fd5b505afa158015611e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9e91906125ad565b50909150611a29905082610ab48684611a33565b6040517f907448ed0000000000000000000000000000000000000000000000000000000081526000906001600160a01b0385169063907448ed90611efc9086908690600401612636565b60606040518083038186803b158015611f1457600080fd5b505afa158015611f28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f4c9190612579565b5095945050505050565b6000611f63826020611dca565b83511015611f835760405162461bcd60e51b815260040161032690612794565b50016020015190565b60008183611fad5760405162461bcd60e51b81526004016103269190612713565b506000838581611fb957fe5b0495945050505050565b6060612018826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661207e9092919063ffffffff16565b805190915015611b1d578080602001905181019061203691906123b9565b611b1d5760405162461bcd60e51b8152600401610326906129ab565b600081848411156120765760405162461bcd60e51b81526004016103269190612713565b505050900390565b6060611ce484846000858561209285612128565b6120ae5760405162461bcd60e51b815260040161032690612974565b60006060866001600160a01b031685876040516120cb9190612606565b60006040518083038185875af1925050503d8060008114612108576040519150601f19603f3d011682016040523d82523d6000602084013e61210d565b606091505b509150915061211d828286612132565b979650505050505050565b803b15155b919050565b60608315612141575081611ce7565b8251156121515782518084602001fd5b8160405162461bcd60e51b81526004016103269190612713565b8051801515811461212d57600080fd5b600082601f83011261218b578081fd5b815167ffffffffffffffff808211156121a057fe5b604051601f8301601f1916810160200182811182821017156121be57fe5b6040528281529250828483016020018610156121d957600080fd5b6121ea836020830160208801612ac3565b50505092915050565b600060208284031215612204578081fd5b81356102d581612af3565b600060208284031215612220578081fd5b81516102d581612af3565b6000806040838503121561223d578081fd5b823561224881612af3565b9150602083013561225881612af3565b809150509250929050565b60008060408385031215612275578182fd5b825161228081612af3565b602084015190925067ffffffffffffffff81111561229c578182fd5b6122a88582860161217b565b9150509250929050565b600080604083850312156122c4578182fd5b82356122cf81612af3565b946020939093013593505050565b600080600080600080600060e0888a0312156122f7578283fd5b875161230281612af3565b80975050602088015195506040880151945060608801519350608088015161232981612af3565b8093505060a0880151915060c0880151905092959891949750929550565b600080600080600080600080610100898b031215612363578081fd5b885161236e81612af3565b80985050602089015196506040890151955060608901519450608089015161239581612af3565b60a08a015160c08b015160e0909b0151999c989b5096999598909790945092505050565b6000602082840312156123ca578081fd5b6102d58261216b565b600080604083850312156123e5578182fd5b6123ee8361216b565b9150602083015167ffffffffffffffff81111561229c578182fd5b60006020828403121561241a578081fd5b5035919050565b600060208284031215612432578081fd5b5051919050565b600080600080600060a08688031215612450578081fd5b85359450602086013561246281612af3565b9350604086013561247281612af3565b9250606086013561248281612af3565b9150608086013561249281612af3565b809150509295509295909350565b600080600080600080600060e0888a0312156124ba578081fd5b8735965060208801356124cc81612af3565b955060408801356124dc81612af3565b945060608801356124ec81612af3565b935060808801356124fc81612af3565b9699959850939692959460a0840135945060c09093013592915050565b6000806000806080858703121561252e578182fd5b84519350602085015161254081612af3565b604086015190935067ffffffffffffffff81111561255c578283fd5b6125688782880161217b565b606096909601519497939650505050565b60008060006060848603121561258d578081fd5b83519250602084015191506125a46040850161216b565b90509250925092565b6000806000606084860312156125c1578081fd5b8351925060208401519150604084015190509250925092565b600081518084526125f2816020860160208601612ac3565b601f01601f19169290920160200192915050565b60008251612618818460208701612ac3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b0392909216825260ff16602082015260400190565b6001600160a01b039485168152602081019390935292166040820152606081019190915260800190565b60006001600160a01b0385168252836020830152606060408301526126d760608301846125da565b95945050505050565b6001600160a01b039586168152602081019490945260408401929092529092166060820152608081019190915260a00190565b6000602082526102d560208301846125da565b6020808252601b908201527f506c617479707573566f74657250726f78793a3a6f6e6c794465760000000000604082015260600190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b60208082526015908201527f746f55696e743235365f6f75744f66426f756e64730000000000000000000000604082015260600190565b60208082526032908201527f506c617479707573566f74657250726f78793a3a537472617465677920666f7260408201527f2050494420616c72656164792061646465640000000000000000000000000000606082015260800190565b60208082526026908201527f506c617479707573566f74657250726f78793a3a73616665457865637574652060408201527f6661696c65640000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60408201527f7700000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526029908201527f506c617479707573566f74657250726f78793a3a546869732073686f756c646e60408201527f27742068617070656e0000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f506c617479707573566f74657250726f78793a3a6f6e6c795374726174656779604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60408201527f6f74207375636365656400000000000000000000000000000000000000000000606082015260800190565b60208082526036908201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60408201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606082015260800190565b90815260200190565b9182526001600160a01b0316602082015260400190565b91825260ff16602082015260400190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b60005b83811015612ade578181015183820152602001612ac6565b83811115612aed576000848401525b50505050565b6001600160a01b0381168114612b0857600080fd5b5056fea2646970667358221220f41c9c3d5557a8434435fb937c48a380d0f95ad6ed758df678ecbc814e765bd164736f6c63430007030033",
  "devdoc": {
    "details": "For accounting reasons, there is one approved strategy per Masterchef PID. In case of upgrade, use a new proxy.",
    "kind": "dev",
    "methods": {
      "approveStrategy(address,address)": {
        "details": "Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)",
        "params": {
          "_stakingContract": "address",
          "_strategy": "address"
        }
      },
      "claimReward(address,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_pid": "PID",
          "_stakingContract": "Platypus Masterchef"
        }
      },
      "deposit(uint256,address,address,address,address,uint256,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_amount": "deposit amount",
          "_asset": "Platypus asset",
          "_depositFee": "deposit fee",
          "_pid": "PID",
          "_pool": "Platypus pool",
          "_stakingContract": "Platypus Masterchef",
          "_token": "Deposit asset"
        }
      },
      "emergencyWithdraw(uint256,address,address,address,address)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_asset": "Platypus asset",
          "_pid": "PID",
          "_pool": "Platypus pool",
          "_stakingContract": "Platypus Masterchef",
          "_token": "Deposit asset"
        }
      },
      "pendingRewards(address,uint256)": {
        "params": {
          "_pid": "PID",
          "_stakingContract": "Platypus Masterchef"
        },
        "returns": {
          "_0": "pendingPtp",
          "_1": "pendingBonusToken",
          "_2": "bonusTokenAddress"
        }
      },
      "poolBalance(address,uint256)": {
        "params": {
          "_pid": "PID",
          "_stakingContract": "Platypus Masterchef"
        },
        "returns": {
          "balance": "in depositToken"
        }
      },
      "reinvestFeeBips()": {
        "returns": {
          "_0": "reinvest fee"
        }
      },
      "setBoosterFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setBoosterFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeReceiver": "address"
        }
      },
      "setStakerFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_stakerFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setStakerFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_stakerFeeReceiver": "address"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "withdraw(uint256,address,address,address,address,uint256,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_amount": "withdraw amount",
          "_asset": "Platypus asset",
          "_maxSlippage": "max slippage in bips",
          "_pid": "PID",
          "_pool": "Platypus pool",
          "_stakingContract": "Platypus Masterchef",
          "_token": "Deposit asset"
        },
        "returns": {
          "_0": "amount withdrawn, in _token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveStrategy(address,address)": {
        "notice": "Add an approved strategy"
      },
      "claimReward(address,uint256)": {
        "notice": "Claim and distribute PTP rewards"
      },
      "deposit(uint256,address,address,address,address,uint256,uint256)": {
        "notice": "Deposit function"
      },
      "emergencyWithdraw(uint256,address,address,address,address)": {
        "notice": "Emergency withdraw function"
      },
      "pendingRewards(address,uint256)": {
        "notice": "Pending rewards matching interface for PlatypusStrategy"
      },
      "poolBalance(address,uint256)": {
        "notice": "Pool balance"
      },
      "reinvestFeeBips()": {
        "notice": "Calculation of reinvest fee (boost + staking)"
      },
      "setBoosterFee(uint256)": {
        "notice": "Update booster fee"
      },
      "setBoosterFeeReceiver(address)": {
        "notice": "Update booster fee receiver"
      },
      "setStakerFee(uint256)": {
        "notice": "Update staker fee"
      },
      "setStakerFeeReceiver(address)": {
        "notice": "Update staker fee receiver"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "withdraw(uint256,address,address,address,address,uint256,uint256)": {
        "notice": "Withdraw function"
      }
    },
    "notice": "PlatypusVoterProxy is an upgradable contract. Strategies interact with PlatypusVoterProxy and PlatypusVoterProxy interacts with PlatypusVoter.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 92216,
        "contract": "contracts/strategies/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "boosterFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 92218,
        "contract": "contracts/strategies/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "stakerFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 92220,
        "contract": "contracts/strategies/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "stakerFeeReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 92222,
        "contract": "contracts/strategies/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "boosterFeeReceiver",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 92230,
        "contract": "contracts/strategies/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 92236,
        "contract": "contracts/strategies/PlatypusVoterProxy.sol:PlatypusVoterProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}