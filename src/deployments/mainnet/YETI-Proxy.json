{
  "address": "0x2b8492113676D4F26B9582de4027C7730477B4F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_boosterFeeBips",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_boosterFeeReceiver",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "approveStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "boosterFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "pendingRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingYETI",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        }
      ],
      "name": "poolBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_boosterFeeBips",
          "type": "uint256"
        }
      ],
      "name": "setBoosterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_boosterFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setBoosterFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voter",
      "outputs": [
        {
          "internalType": "contract IYetiVoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xea5e6d391d1704a639000a5fe88f95daed75e955ffbbc61e56367b7e30651c0d",
  "receipt": {
    "to": null,
    "from": "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    "contractAddress": "0x2b8492113676D4F26B9582de4027C7730477B4F3",
    "transactionIndex": 0,
    "gasUsed": "1434709",
    "logsBloom": "0x
    "blockHash": "0x373d392f74c7260afacd39d736ce582c14cdbc3c44270ce1439c5b99b60a541b",
    "transactionHash": "0xea5e6d391d1704a639000a5fe88f95daed75e955ffbbc61e56367b7e30651c0d",
    "logs": [],
    "blockNumber": 14079800,
    "cumulativeGasUsed": "1434709",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf32854411a46DF5699198787948eBC0963Db6D42",
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44",
    1000,
    "0xDcEDF06Fd33E1D7b6eb4b309f779a0e9D3172e44"
  ],
  "solcInputHash": "ae877bc66f4b7619b88ddcba72509af7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_boosterFeeBips\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_boosterFeeReceiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"approveStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boosterFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingYETI\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"}],\"name\":\"poolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_boosterFeeBips\",\"type\":\"uint256\"}],\"name\":\"setBoosterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_boosterFeeReceiver\",\"type\":\"address\"}],\"name\":\"setBoosterFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voter\",\"outputs\":[{\"internalType\":\"contract IYetiVoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"For accounting reasons, there is one approved strategy per staking contract. In case of upgrade, use a new proxy.\",\"kind\":\"dev\",\"methods\":{\"approveStrategy(address,address)\":{\"details\":\"Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)\",\"params\":{\"_stakingContract\":\"address\",\"_strategy\":\"address\"}},\"claimReward(address)\":{\"params\":{\"_stakingContract\":\"Masterchef\"}},\"deposit(address,address,uint256)\":{\"details\":\"Restricted to strategy with _pid\",\"params\":{\"_amount\":\"deposit amount\",\"_stakingContract\":\"Masterchef\",\"_token\":\"Deposit asset\"}},\"emergencyWithdraw(address,address)\":{\"params\":{\"_stakingContract\":\"Masterchef\",\"_token\":\"Deposit asset\"}},\"pendingRewards(address)\":{\"params\":{\"_stakingContract\":\"Masterchef\"}},\"poolBalance(address)\":{\"params\":{\"_stakingContract\":\"Masterchef\"},\"returns\":{\"balance\":\"in depositToken\"}},\"setBoosterFee(uint256)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeBips\":\"new fee in bips (1% = 100 bips)\"}},\"setBoosterFeeReceiver(address)\":{\"details\":\"Restricted to devAddr\",\"params\":{\"_boosterFeeReceiver\":\"address\"}},\"updateDevAddr(address)\":{\"params\":{\"newValue\":\"address\"}},\"withdraw(address,address,uint256)\":{\"params\":{\"_amount\":\"withdraw amount\",\"_stakingContract\":\"Masterchef\",\"_token\":\"Deposit asset\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveStrategy(address,address)\":{\"notice\":\"Add an approved strategy\"},\"claimReward(address)\":{\"notice\":\"Claim and distribute rewards\"},\"deposit(address,address,uint256)\":{\"notice\":\"Deposit function\"},\"emergencyWithdraw(address,address)\":{\"notice\":\"Emergency withdraw function\"},\"pendingRewards(address)\":{\"notice\":\"Pending rewards matching interface for strategy\"},\"poolBalance(address)\":{\"notice\":\"Pool balance\"},\"setBoosterFee(uint256)\":{\"notice\":\"Update booster fee\"},\"setBoosterFeeReceiver(address)\":{\"notice\":\"Update booster fee receiver\"},\"updateDevAddr(address)\":{\"notice\":\"Update devAddr\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Withdraw function\"}},\"notice\":\"YetiVoterProxy is an upgradable contract. Strategies interact with YetiVoterProxy and YetiVoterProxy interacts with YetiVoter.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/YetiVoterProxy.sol\":\"YetiVoterProxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IERC20 {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0x216b25b890fa0e951ccfc67a9359e08f5d35eac36386cba2d914911da0625681\",\"license\":\"MIT\"},\"contracts/interfaces/IYetiFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IYetiFarm {\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8684902c83a2a204dd2e6e23b7585a3e65a72bf439bd548186d9874e3241bd21\",\"license\":\"MIT\"},\"contracts/interfaces/IYetiVoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IYetiVoter {\\n    function execute(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool, bytes memory);\\n\\n    function depositFromBalance(uint256 _amount) external;\\n\\n    function depositsEnabled() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f4d9806c0068a8db7b5c9c58e73883214844a8d41d2a8595a2070168dd6b67\",\"license\":\"MIT\"},\"contracts/interfaces/IYetiVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\ninterface IYetiVoterProxy {\\n    function withdraw(\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function emergencyWithdraw(address _stakingContract, address _token) external;\\n\\n    function deposit(\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external;\\n\\n    function pendingRewards(address _stakingContract) external view returns (uint256);\\n\\n    function poolBalance(address _stakingContract) external view returns (uint256);\\n\\n    function claimReward(address _stakingContract) external;\\n\\n    function approveStrategy(address _stakingContract, address _strategy) external;\\n}\\n\",\"keccak256\":\"0x2f7fcc225d53c810df1adc79b9c25ef719ce69a342b08cbfc123076201d0cb59\",\"license\":\"MIT\"},\"contracts/lib/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6c2ca57501dc5f1d71e5a5e39616343b9bd57e363c50c4abbeab13059ce2c0ab\",\"license\":\"MIT\"},\"contracts/lib/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\\n            value,\\n            \\\"SafeERC20: decreased allowance below zero\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa79bdc482a4a886790bbfecb531127ead361d3a82abd0aa1e175b7fc1733a6f6\",\"license\":\"MIT\"},\"contracts/lib/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\\n// Subject to the MIT license.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction underflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     * - Subtraction cannot underflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, errorMessage);\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers.\\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        // Solidity only automatically asserts when dividing by 0\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x918ffd3e8c5cf708243afcff266452bc67909e9381af0cdc34f79fc4466cd575\",\"license\":\"MIT\"},\"contracts/strategies/YetiVoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.7.3;\\n\\nimport \\\"../interfaces/IYetiVoter.sol\\\";\\nimport \\\"../interfaces/IYetiVoterProxy.sol\\\";\\nimport \\\"../interfaces/IYetiFarm.sol\\\";\\nimport \\\"../lib/SafeERC20.sol\\\";\\n\\nlibrary SafeProxy {\\n    function safeExecute(\\n        IYetiVoter voter,\\n        address target,\\n        uint256 value,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returnValue) = voter.execute(target, value, data);\\n        if (!success) revert(\\\"YetiVoterProxy::safeExecute failed\\\");\\n        return returnValue;\\n    }\\n}\\n\\n/**\\n * @notice YetiVoterProxy is an upgradable contract.\\n * Strategies interact with YetiVoterProxy and\\n * YetiVoterProxy interacts with YetiVoter.\\n * @dev For accounting reasons, there is one approved\\n * strategy per staking contract. In case of upgrade,\\n * use a new proxy.\\n */\\ncontract YetiVoterProxy is IYetiVoterProxy {\\n    using SafeMath for uint256;\\n    using SafeProxy for IYetiVoter;\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant BIPS_DIVISOR = 10000;\\n    address private constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    IERC20 private constant YETI = IERC20(0x77777777777d4554c39223C354A05825b2E8Faa3);\\n\\n    IYetiVoter public immutable voter;\\n    address public devAddr;\\n    uint256 public boosterFee;\\n    address public boosterFeeReceiver;\\n\\n    // staking contract => strategy\\n    mapping(address => address) private approvedStrategies;\\n\\n    modifier onlyDev() {\\n        require(msg.sender == devAddr, \\\"YetiVoterProxy::onlyDev\\\");\\n        _;\\n    }\\n\\n    modifier onlyStrategy(address _stakingContract) {\\n        require(approvedStrategies[_stakingContract] == msg.sender, \\\"YetiVoterProxy::onlyStrategy\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _voter,\\n        address _devAddr,\\n        uint256 _boosterFeeBips,\\n        address _boosterFeeReceiver\\n    ) {\\n        devAddr = _devAddr;\\n        voter = IYetiVoter(_voter);\\n        boosterFee = _boosterFeeBips;\\n        boosterFeeReceiver = _boosterFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Update devAddr\\n     * @param newValue address\\n     */\\n    function updateDevAddr(address newValue) external onlyDev {\\n        devAddr = newValue;\\n    }\\n\\n    /**\\n     * @notice Add an approved strategy\\n     * @dev Very sensitive, restricted to devAddr\\n     * @dev Can only be set once per PID and staking contract (reported by the strategy)\\n     * @param _stakingContract address\\n     * @param _strategy address\\n     */\\n    function approveStrategy(address _stakingContract, address _strategy) external override onlyDev {\\n        require(approvedStrategies[_stakingContract] == address(0), \\\"YetiVoterProxy::Strategy already added\\\");\\n        approvedStrategies[_stakingContract] = _strategy;\\n    }\\n\\n    /**\\n     * @notice Update booster fee\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeBips new fee in bips (1% = 100 bips)\\n     */\\n    function setBoosterFee(uint256 _boosterFeeBips) external onlyDev {\\n        boosterFee = _boosterFeeBips;\\n    }\\n\\n    /**\\n     * @notice Update booster fee receiver\\n     * @dev Restricted to devAddr\\n     * @param _boosterFeeReceiver address\\n     */\\n    function setBoosterFeeReceiver(address _boosterFeeReceiver) external onlyDev {\\n        boosterFeeReceiver = _boosterFeeReceiver;\\n    }\\n\\n    /**\\n     * @notice Deposit function\\n     * @dev Restricted to strategy with _pid\\n     * @param _stakingContract Masterchef\\n     * @param _token Deposit asset\\n     * @param _amount deposit amount\\n     */\\n    function deposit(\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyStrategy(_stakingContract) {\\n        IERC20(_token).safeTransfer(address(voter), _amount);\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, _amount));\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"stake(uint256)\\\", _amount));\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"approve(address,uint256)\\\", _stakingContract, 0));\\n    }\\n\\n    /**\\n     * @notice Withdraw function\\n     * @param _stakingContract Masterchef\\n     * @param _token Deposit asset\\n     * @param _amount withdraw amount\\n     */\\n    function withdraw(\\n        address _stakingContract,\\n        address _token,\\n        uint256 _amount\\n    ) external override onlyStrategy(_stakingContract) {\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"withdraw(uint256)\\\", _amount));\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, _amount));\\n    }\\n\\n    /**\\n     * @notice Emergency withdraw function\\n     * @param _stakingContract Masterchef\\n     * @param _token Deposit asset\\n     */\\n    function emergencyWithdraw(address _stakingContract, address _token)\\n        external\\n        override\\n        onlyStrategy(_stakingContract)\\n    {\\n        uint256 balance = this.poolBalance(_stakingContract);\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"withdraw(uint256)\\\", balance));\\n        voter.safeExecute(_token, 0, abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, balance));\\n    }\\n\\n    /**\\n     * @notice Pending rewards matching interface for strategy\\n     * @param _stakingContract Masterchef\\n     */\\n    function pendingRewards(address _stakingContract) external view override returns (uint256 pendingYETI) {\\n        pendingYETI = IYetiFarm(_stakingContract).earned(address(voter));\\n        pendingYETI = pendingYETI.sub(_calculateBoostFee(pendingYETI));\\n    }\\n\\n    /**\\n     * @notice Pool balance\\n     * @param _stakingContract Masterchef\\n     * @return balance in depositToken\\n     */\\n    function poolBalance(address _stakingContract) external view override returns (uint256 balance) {\\n        return IYetiFarm(_stakingContract).balanceOf(address(voter));\\n    }\\n\\n    /**\\n     * @notice Claim and distribute rewards\\n     * @param _stakingContract Masterchef\\n     */\\n    function claimReward(address _stakingContract) external override onlyStrategy(_stakingContract) {\\n        voter.safeExecute(_stakingContract, 0, abi.encodeWithSignature(\\\"getReward()\\\"));\\n        uint256 claimedYETI = YETI.balanceOf(address(voter));\\n        if (claimedYETI > 0) {\\n            uint256 boostFee = _calculateBoostFee(claimedYETI);\\n            uint256 reward = claimedYETI.sub(boostFee);\\n            voter.safeExecute(\\n                address(YETI),\\n                0,\\n                abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", msg.sender, reward)\\n            );\\n            if (boostFee > 0) {\\n                voter.depositFromBalance(boostFee);\\n                IERC20(address(voter)).safeTransfer(boosterFeeReceiver, boostFee);\\n            }\\n        }\\n    }\\n\\n    function _calculateBoostFee(uint256 amount) private view returns (uint256 boostFee) {\\n        if (boosterFeeReceiver > address(0) && voter.depositsEnabled()) {\\n            boostFee = amount.mul(boosterFee).div(BIPS_DIVISOR);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4c9ad8310080f1c3c3fc4eee3b753d5c0cfcd5a77b7f7463bea6336ac0d670e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516118c83803806118c88339818101604052608081101561003357600080fd5b50805160208201516040830151606093840151600080546001600160a01b03199081166001600160a01b039586161782559585901b6001600160601b031916608052600192909255600280549095169083161790935516906117d6906100f29039806102f45280610399528061057d52806105ed528061063a528061075e52806107d1528061085c52806108d85280610ba65280610bf95280610ce95280610d395280610dc55280610eaa5280610f1a5280610f7652506117d66000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638340f5491161008c578063c494448e11610066578063c494448e14610250578063d279c1911461027e578063d9caed12146102a4578063da09c72c146102da576100ea565b80638340f549146101d7578063865710f01461020d5780639291d5631461022a576100ea565b80636382d9ad116100c85780636382d9ad1461017357806368abb5e0146101a1578063781a29d1146101c7578063792a230f146101cf576100ea565b806331d7a262146100ef57806346c96aac14610127578063491cad291461014b575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b03166102e2565b60408051918252519081900360200190f35b61012f610397565b604080516001600160a01b039092168252519081900360200190f35b6101716004803603602081101561016157600080fd5b50356001600160a01b03166103bb565b005b6101716004803603604081101561018957600080fd5b506001600160a01b0381358116916020013516610449565b610115600480360360208110156101b757600080fd5b50356001600160a01b0316610627565b6101156106ca565b61012f6106d0565b610171600480360360608110156101ed57600080fd5b506001600160a01b038135811691602081013590911690604001356106df565b6101716004803603602081101561022357600080fd5b5035610903565b6101716004803603602081101561024057600080fd5b50356001600160a01b0316610967565b6101716004803603604081101561026657600080fd5b506001600160a01b03813581169160200135166109f5565b6101716004803603602081101561029457600080fd5b50356001600160a01b0316610ae6565b610171600480360360608110156102ba57600080fd5b506001600160a01b03813581169160208101359091169060400135610df4565b61012f610f4d565b6000816001600160a01b0316628cc2627f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561035057600080fd5b505afa158015610364573d6000803e3d6000fd5b505050506040513d602081101561037a57600080fd5b5051905061039161038a82610f5c565b8290611020565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461041a576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0380831660009081526003602052604090205483911633146104b9576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6000306001600160a01b03166368abb5e0856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561050857600080fd5b505afa15801561051c573d6000803e3d6000fd5b505050506040513d602081101561053257600080fd5b50516040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b0316632e1a7d4d60e01b1790529091506105a8906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690600090611069565b506040805133602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610620907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908590600090611069565b5050505050565b6000816001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d60208110156106c057600080fd5b505190505b919050565b60015481565b6002546001600160a01b031681565b6001600160a01b03808416600090815260036020526040902054849116331461074f576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6107836001600160a01b0384167f00000000000000000000000000000000000000000000000000000000000000008461126e565b604080516001600160a01b03808716602483015260448083018690528351808403909101815260649092019092526020810180516001600160e01b031663095ea7b360e01b1790526107fc917f000000000000000000000000000000000000000000000000000000000000000016908590600090611069565b506040805160248082018590528251808303909101815260449091019091526020810180516001600160e01b03167fa694fc3a00000000000000000000000000000000000000000000000000000000179052610887906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690600090611069565b50604080516001600160a01b038087166024830152600060448084018290528451808503909101815260649093019093526020820180516001600160e01b031663095ea7b360e01b179052610620927f000000000000000000000000000000000000000000000000000000000000000090911691869190611069565b6000546001600160a01b03163314610962576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b600155565b6000546001600160a01b031633146109c6576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a54576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600360205260409020541615610aab5760405162461bcd60e51b81526004018080602001828103825260268152602001806116e86026913960400191505060405180910390fd5b6001600160a01b039182166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6001600160a01b038082166000908152600360205260409020548291163314610b56576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6040805160048152602481019091526020810180516001600160e01b03167f3d18b91200000000000000000000000000000000000000000000000000000000179052610bd1906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908490600090611069565b5060007377777777777d4554c39223c354a05825b2e8faa36001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c5557600080fd5b505afa158015610c69573d6000803e3d6000fd5b505050506040513d6020811015610c7f57600080fd5b505190508015610def576000610c9482610f5c565b90506000610ca28383611020565b6040805133602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052909150610d30907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316907377777777777d4554c39223c354a05825b2e8faa390600090611069565b508115610620577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637c0bb4ab836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610d9d57600080fd5b505af1158015610db1573d6000803e3d6000fd5b505060025461062092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169250168461126e565b505050565b6001600160a01b038084166000908152600360205260409020548491163314610e64576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6040805160248082018590528251808303909101815260449091019091526020810180516001600160e01b0316632e1a7d4d60e01b179052610ed5906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690600090611069565b506040805133602482015260448082018590528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610620907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908590600090611069565b6000546001600160a01b031681565b6002546000906001600160a01b031615801590610ffa57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d6020811015610ff757600080fd5b50515b156106c55761039161271061101a600154856112c090919063ffffffff16565b90611319565b600061106283836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061135b565b9392505050565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110e25781810151838201526020016110ca565b50505050905090810190601f16801561110f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561113057600080fd5b505af1158015611144573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561116d57600080fd5b81516020830180516040519294929383019291908464010000000082111561119457600080fd5b9083019060208201858111156111a957600080fd5b82516401000000008111828201881017156111c357600080fd5b82525081516020918201929091019080838360005b838110156111f05781810151838201526020016111d8565b50505050905090810190601f16801561121d5780820380516001836020036101000a031916815260200191505b5060405250505091509150816112645760405162461bcd60e51b815260040180806020018281038252602281526020018061170e6022913960400191505060405180910390fd5b9695505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610def9084906113f2565b6000826112cf57506000610391565b828202828482816112dc57fe5b04146110625760405162461bcd60e51b81526004018080602001828103825260218152602001806117566021913960400191505060405180910390fd5b600061106283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114a3565b600081848411156113ea5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113af578181015183820152602001611397565b50505050905090810190601f1680156113dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060611447826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115089092919063ffffffff16565b805190915015610def5780806020019051602081101561146657600080fd5b5051610def5760405162461bcd60e51b815260040180806020018281038252602a815260200180611777602a913960400191505060405180910390fd5b600081836114f25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156113af578181015183820152602001611397565b5060008385816114fe57fe5b0495945050505050565b6060611517848460008561151f565b949350505050565b6060824710156115605760405162461bcd60e51b81526004018080602001828103825260268152602001806117306026913960400191505060405180910390fd5b6115698561167b565b6115ba576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106115f95780518252601f1990920191602091820191016115da565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461165b576040519150601f19603f3d011682016040523d82523d6000602084013e611660565b606091505b5091509150611670828286611681565b979650505050505050565b3b151590565b60608315611690575081611062565b8251156116a05782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156113af57818101518382015260200161139756fe59657469566f74657250726f78793a3a537472617465677920616c726561647920616464656459657469566f74657250726f78793a3a7361666545786563757465206661696c6564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d6879f5bed0326eddc7dd8eda14868e31e56ff3882b4cd413098ec5a3c528e4a64736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638340f5491161008c578063c494448e11610066578063c494448e14610250578063d279c1911461027e578063d9caed12146102a4578063da09c72c146102da576100ea565b80638340f549146101d7578063865710f01461020d5780639291d5631461022a576100ea565b80636382d9ad116100c85780636382d9ad1461017357806368abb5e0146101a1578063781a29d1146101c7578063792a230f146101cf576100ea565b806331d7a262146100ef57806346c96aac14610127578063491cad291461014b575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b03166102e2565b60408051918252519081900360200190f35b61012f610397565b604080516001600160a01b039092168252519081900360200190f35b6101716004803603602081101561016157600080fd5b50356001600160a01b03166103bb565b005b6101716004803603604081101561018957600080fd5b506001600160a01b0381358116916020013516610449565b610115600480360360208110156101b757600080fd5b50356001600160a01b0316610627565b6101156106ca565b61012f6106d0565b610171600480360360608110156101ed57600080fd5b506001600160a01b038135811691602081013590911690604001356106df565b6101716004803603602081101561022357600080fd5b5035610903565b6101716004803603602081101561024057600080fd5b50356001600160a01b0316610967565b6101716004803603604081101561026657600080fd5b506001600160a01b03813581169160200135166109f5565b6101716004803603602081101561029457600080fd5b50356001600160a01b0316610ae6565b610171600480360360608110156102ba57600080fd5b506001600160a01b03813581169160208101359091169060400135610df4565b61012f610f4d565b6000816001600160a01b0316628cc2627f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561035057600080fd5b505afa158015610364573d6000803e3d6000fd5b505050506040513d602081101561037a57600080fd5b5051905061039161038a82610f5c565b8290611020565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000546001600160a01b0316331461041a576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0380831660009081526003602052604090205483911633146104b9576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6000306001600160a01b03166368abb5e0856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561050857600080fd5b505afa15801561051c573d6000803e3d6000fd5b505050506040513d602081101561053257600080fd5b50516040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b0316632e1a7d4d60e01b1790529091506105a8906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690600090611069565b506040805133602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610620907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908590600090611069565b5050505050565b6000816001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d60208110156106c057600080fd5b505190505b919050565b60015481565b6002546001600160a01b031681565b6001600160a01b03808416600090815260036020526040902054849116331461074f576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6107836001600160a01b0384167f00000000000000000000000000000000000000000000000000000000000000008461126e565b604080516001600160a01b03808716602483015260448083018690528351808403909101815260649092019092526020810180516001600160e01b031663095ea7b360e01b1790526107fc917f000000000000000000000000000000000000000000000000000000000000000016908590600090611069565b506040805160248082018590528251808303909101815260449091019091526020810180516001600160e01b03167fa694fc3a00000000000000000000000000000000000000000000000000000000179052610887906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690600090611069565b50604080516001600160a01b038087166024830152600060448084018290528451808503909101815260649093019093526020820180516001600160e01b031663095ea7b360e01b179052610620927f000000000000000000000000000000000000000000000000000000000000000090911691869190611069565b6000546001600160a01b03163314610962576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b600155565b6000546001600160a01b031633146109c6576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610a54576040805162461bcd60e51b815260206004820152601760248201527f59657469566f74657250726f78793a3a6f6e6c79446576000000000000000000604482015290519081900360640190fd5b6001600160a01b038281166000908152600360205260409020541615610aab5760405162461bcd60e51b81526004018080602001828103825260268152602001806116e86026913960400191505060405180910390fd5b6001600160a01b039182166000908152600360205260409020805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b6001600160a01b038082166000908152600360205260409020548291163314610b56576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6040805160048152602481019091526020810180516001600160e01b03167f3d18b91200000000000000000000000000000000000000000000000000000000179052610bd1906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908490600090611069565b5060007377777777777d4554c39223c354a05825b2e8faa36001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c5557600080fd5b505afa158015610c69573d6000803e3d6000fd5b505050506040513d6020811015610c7f57600080fd5b505190508015610def576000610c9482610f5c565b90506000610ca28383611020565b6040805133602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052909150610d30907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316907377777777777d4554c39223c354a05825b2e8faa390600090611069565b508115610620577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637c0bb4ab836040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610d9d57600080fd5b505af1158015610db1573d6000803e3d6000fd5b505060025461062092506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169250168461126e565b505050565b6001600160a01b038084166000908152600360205260409020548491163314610e64576040805162461bcd60e51b815260206004820152601c60248201527f59657469566f74657250726f78793a3a6f6e6c79537472617465677900000000604482015290519081900360640190fd5b6040805160248082018590528251808303909101815260449091019091526020810180516001600160e01b0316632e1a7d4d60e01b179052610ed5906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908690600090611069565b506040805133602482015260448082018590528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610620907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316908590600090611069565b6000546001600160a01b031681565b6002546000906001600160a01b031615801590610ffa57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635392fd1c6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d6020811015610ff757600080fd5b50515b156106c55761039161271061101a600154856112c090919063ffffffff16565b90611319565b600061106283836040518060400160405280601f81526020017f536166654d6174683a207375627472616374696f6e20756e646572666c6f770081525061135b565b9392505050565b606060006060866001600160a01b031663b61d27f68787876040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110e25781810151838201526020016110ca565b50505050905090810190601f16801561110f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561113057600080fd5b505af1158015611144573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561116d57600080fd5b81516020830180516040519294929383019291908464010000000082111561119457600080fd5b9083019060208201858111156111a957600080fd5b82516401000000008111828201881017156111c357600080fd5b82525081516020918201929091019080838360005b838110156111f05781810151838201526020016111d8565b50505050905090810190601f16801561121d5780820380516001836020036101000a031916815260200191505b5060405250505091509150816112645760405162461bcd60e51b815260040180806020018281038252602281526020018061170e6022913960400191505060405180910390fd5b9695505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610def9084906113f2565b6000826112cf57506000610391565b828202828482816112dc57fe5b04146110625760405162461bcd60e51b81526004018080602001828103825260218152602001806117566021913960400191505060405180910390fd5b600061106283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506114a3565b600081848411156113ea5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113af578181015183820152602001611397565b50505050905090810190601f1680156113dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6060611447826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115089092919063ffffffff16565b805190915015610def5780806020019051602081101561146657600080fd5b5051610def5760405162461bcd60e51b815260040180806020018281038252602a815260200180611777602a913960400191505060405180910390fd5b600081836114f25760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156113af578181015183820152602001611397565b5060008385816114fe57fe5b0495945050505050565b6060611517848460008561151f565b949350505050565b6060824710156115605760405162461bcd60e51b81526004018080602001828103825260268152602001806117306026913960400191505060405180910390fd5b6115698561167b565b6115ba576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106115f95780518252601f1990920191602091820191016115da565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461165b576040519150601f19603f3d011682016040523d82523d6000602084013e611660565b606091505b5091509150611670828286611681565b979650505050505050565b3b151590565b60608315611690575081611062565b8251156116a05782518084602001fd5b60405162461bcd60e51b81526020600482018181528451602484015284518593919283926044019190850190808383600083156113af57818101518382015260200161139756fe59657469566f74657250726f78793a3a537472617465677920616c726561647920616464656459657469566f74657250726f78793a3a7361666545786563757465206661696c6564416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220d6879f5bed0326eddc7dd8eda14868e31e56ff3882b4cd413098ec5a3c528e4a64736f6c63430007030033",
  "devdoc": {
    "details": "For accounting reasons, there is one approved strategy per staking contract. In case of upgrade, use a new proxy.",
    "kind": "dev",
    "methods": {
      "approveStrategy(address,address)": {
        "details": "Very sensitive, restricted to devAddrCan only be set once per PID and staking contract (reported by the strategy)",
        "params": {
          "_stakingContract": "address",
          "_strategy": "address"
        }
      },
      "claimReward(address)": {
        "params": {
          "_stakingContract": "Masterchef"
        }
      },
      "deposit(address,address,uint256)": {
        "details": "Restricted to strategy with _pid",
        "params": {
          "_amount": "deposit amount",
          "_stakingContract": "Masterchef",
          "_token": "Deposit asset"
        }
      },
      "emergencyWithdraw(address,address)": {
        "params": {
          "_stakingContract": "Masterchef",
          "_token": "Deposit asset"
        }
      },
      "pendingRewards(address)": {
        "params": {
          "_stakingContract": "Masterchef"
        }
      },
      "poolBalance(address)": {
        "params": {
          "_stakingContract": "Masterchef"
        },
        "returns": {
          "balance": "in depositToken"
        }
      },
      "setBoosterFee(uint256)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeBips": "new fee in bips (1% = 100 bips)"
        }
      },
      "setBoosterFeeReceiver(address)": {
        "details": "Restricted to devAddr",
        "params": {
          "_boosterFeeReceiver": "address"
        }
      },
      "updateDevAddr(address)": {
        "params": {
          "newValue": "address"
        }
      },
      "withdraw(address,address,uint256)": {
        "params": {
          "_amount": "withdraw amount",
          "_stakingContract": "Masterchef",
          "_token": "Deposit asset"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approveStrategy(address,address)": {
        "notice": "Add an approved strategy"
      },
      "claimReward(address)": {
        "notice": "Claim and distribute rewards"
      },
      "deposit(address,address,uint256)": {
        "notice": "Deposit function"
      },
      "emergencyWithdraw(address,address)": {
        "notice": "Emergency withdraw function"
      },
      "pendingRewards(address)": {
        "notice": "Pending rewards matching interface for strategy"
      },
      "poolBalance(address)": {
        "notice": "Pool balance"
      },
      "setBoosterFee(uint256)": {
        "notice": "Update booster fee"
      },
      "setBoosterFeeReceiver(address)": {
        "notice": "Update booster fee receiver"
      },
      "updateDevAddr(address)": {
        "notice": "Update devAddr"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Withdraw function"
      }
    },
    "notice": "YetiVoterProxy is an upgradable contract. Strategies interact with YetiVoterProxy and YetiVoterProxy interacts with YetiVoter.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115658,
        "contract": "contracts/strategies/YetiVoterProxy.sol:YetiVoterProxy",
        "label": "devAddr",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 115660,
        "contract": "contracts/strategies/YetiVoterProxy.sol:YetiVoterProxy",
        "label": "boosterFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 115662,
        "contract": "contracts/strategies/YetiVoterProxy.sol:YetiVoterProxy",
        "label": "boosterFeeReceiver",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 115666,
        "contract": "contracts/strategies/YetiVoterProxy.sol:YetiVoterProxy",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}